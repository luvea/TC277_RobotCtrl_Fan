	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 06692445"
	.compiler_invocation	"ctc -f cc18664a --dep-file=Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\.Uart.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc27xc -D__CPU_TC27XC__ --core=tc1.6.x --fp-model=+float -D_TASKING_C_TRICORE_ -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\.settings -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Asw -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\adc_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\adc_infineon_tricore\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\adc_infineon_tricore\\ssc\\inc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\adc_infineon_tricore\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\can_17_mcanp_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\can_17_mcanp_infineon_tricore\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\can_17_mcanp_infineon_tricore\\ssc\\inc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\can_17_mcanp_infineon_tricore\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\dio_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\dio_infineon_tricore\\inc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\dio_infineon_tricore\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\ecum_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\ecum_infineon_tricore\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\ecum_infineon_tricore\\ssc\\inc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\ecum_infineon_tricore\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\general -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\general\\inc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\general\\tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\general\\tricore\\compiler -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\general\\tricore\\inc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\general\\tricore\\inc\\TC27xC -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\general\\tricore\\inc\\TC27xC\\SupportDocuments -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\icu_17_gtmccu6_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\icu_17_gtmccu6_infineon_tricore\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\icu_17_gtmccu6_infineon_tricore\\ssc\\inc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\icu_17_gtmccu6_infineon_tricore\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\integration_general -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\integration_general\\inc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\integration_general\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\irq_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\irq_infineon_tricore\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\irq_infineon_tricore\\ssc\\inc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\irq_infineon_tricore\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\mcu_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\mcu_infineon_tricore\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\mcu_infineon_tricore\\ssc\\inc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\mcu_infineon_tricore\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\port_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\port_infineon_tricore\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\port_infineon_tricore\\ssc\\inc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\port_infineon_tricore\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\pwm_17_gtm_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\pwm_17_gtm_infineon_tricore\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\pwm_17_gtm_infineon_tricore\\ssc\\inc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\pwm_17_gtm_infineon_tricore\\ssc\\lib -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\pwm_17_gtm_infineon_tricore\\ssc\\obj -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\pwm_17_gtm_infineon_tricore\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\tricore_general -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\tricore_general\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\tricore_general\\ssc\\inc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\tricore_general\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\uart_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\inc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Asw -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\adc_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\adc_infineon_tricore\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\adc_infineon_tricore\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\can_17_mcanp_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\can_17_mcanp_infineon_tricore\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\can_17_mcanp_infineon_tricore\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\dio_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\dio_infineon_tricore\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\ecum_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\ecum_infineon_tricore\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\ecum_infineon_tricore\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\icu_17_gtmccu6_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\icu_17_gtmccu6_infineon_tricore\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\icu_17_gtmccu6_infineon_tricore\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\integration_general -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\integration_general\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\irq_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\irq_infineon_tricore\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\irq_infineon_tricore\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\mcu_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\mcu_infineon_tricore\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\mcu_infineon_tricore\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\port_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\port_infineon_tricore\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\port_infineon_tricore\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\pwm_17_gtm_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\pwm_17_gtm_infineon_tricore\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\pwm_17_gtm_infineon_tricore\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\tricore_general -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\tricore_general\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\tricore_general\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\uart_infineon_tricore -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Hal_Sensor -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\output -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\output\\generated -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\output\\generated\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\PWM3Ph -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\Qspi -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\TestCode -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\TestCode\\Adc_Test -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\TestCode\\Adc3ph_Test -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\TestCode\\Can_Test -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\TLE_9180_Drive -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\UART_Test -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Hal_Sensor -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\output -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\output\\generated -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\output\\generated\\Demo_Aurix -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\output\\generated\\inc -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\output\\generated\\mak -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\output\\generated\\src -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\PWM3Ph -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Qspi -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\TestCode -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\TestCode\\Adc_Test -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\TestCode\\Adc3ph_Test -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\TestCode\\Can_Test -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\TLE_9180_Drive -IW:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\UART_Test -g2 --make-target=Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.src ..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c"
	.compiler_name		"ctc"
	;source	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c'

	
$TC16X
	.sdecl	'.zrodata.Uart..1.cnt',data,rom
	.sect	'.zrodata.Uart..1.cnt'
	.align	2
.1.cnt:	.type	object
	.size	.1.cnt,4
	.word	-196609
	.sdecl	'.zrodata.Uart..2.cnt',data,rom
	.sect	'.zrodata.Uart..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	-268205944
	.sdecl	'.zrodata.Uart..3.cnt',data,rom
	.sect	'.zrodata.Uart..3.cnt'
	.align	2
.3.cnt:	.type	object
	.size	.3.cnt,4
	.word	2147482623
	.sdecl	'.zrodata.Uart..4.cnt',data,rom
	.sect	'.zrodata.Uart..4.cnt'
	.align	2
.4.cnt:	.type	object
	.size	.4.cnt,4
	.word	-268205948
	.sdecl	'.zrodata.Uart..5.cnt',data,rom
	.sect	'.zrodata.Uart..5.cnt'
	.align	2
.5.cnt:	.type	object
	.size	.5.cnt,4
	.word	-268205952
	.sdecl	'.zrodata.Uart..6.cnt',data,rom
	.sect	'.zrodata.Uart..6.cnt'
	.align	2
.6.cnt:	.type	object
	.size	.6.cnt,4
	.word	2147483647
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_Init')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	
	.global	Uart_Init

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	     1  /******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	     2  **                                                                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	     3  ** Copyright (C) Infineon Technologies (2015)                                **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	     4  **                                                                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	     5  ** All rights reserved.                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	     6  **                                                                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	     7  ** This document contains proprietary information belonging to Infineon      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	     8  ** Technologies. Passing on and copying of this document, and communication  **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	     9  ** of its contents is not permitted without prior written authorization.     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    10  **                                                                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    11  *******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    12  **                                                                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    13  **  $FILENAME   : Uart.c $                                                   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    14  **                                                                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    15  **  $CC VERSION : \main\74 $                                                 **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    16  **                                                                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    17  **  $DATE       : 2016-08-01 $                                               **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    18  **                                                                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    19  **  AUTHOR      : DL-AUTOSAR-Engineering                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    20  **                                                                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    21  **  VENDOR      : Infineon Technologies                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    22  **                                                                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    23  **  DESCRIPTION : This file contains                                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    24  **                functionality of UART driver                               **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    25  **                                                                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    26  **  MAY BE CHANGED BY USER [yes/no]: No                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    27  **                                                                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    28  ******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    29  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    30     Traceability   : [cover parentID=
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    31     SAS_NAS_ALL_PR748,SAS_NAS_ALL_PR749,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    32     SAS_NAS_ALL_PR102,SAS_NAS_ALL_PR470,SAS_NAS_ALL_PR471,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    33     SAS_NAS_ALL_PR70,SAS_NAS_ALL_PR1652]
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    34     [/cover]
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    35  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    36  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    37  **                      Includes                                              **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    38  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    39  /* Inclusion of sfr file */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    40  #include "IfxAsclin_reg.h"
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    41  #include "IfxSrc_reg.h"
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    42  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    43  /* Own header file, this includes own configuration file also */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    44  /* Inclusion structure */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    45  #include "Uart.h"
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    46  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    47  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    48  **                      Imported Compiler Switch Check                        **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    49  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    50  /*************** SW Version Checks ***************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    51  #ifndef UART_SW_MAJOR_VERSION
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    52    #error "UART_SW_MAJOR_VERSION is not defined."
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    53  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    54  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    55  #ifndef UART_SW_MINOR_VERSION
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    56    #error "UART_SW_MINOR_VERSION is not defined."
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    57  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    58  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    59  #ifndef UART_SW_PATCH_VERSION
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    60    #error "UART_SW_PATCH_VERSION is not defined."
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    61  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    62  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    63  /* Check for Correct inclusion of headers */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    64  #if ( UART_SW_MAJOR_VERSION != 1U )
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    65    #error "UART_SW_MAJOR_VERSION does not match."
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    66  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    67  #if ( UART_SW_MINOR_VERSION != 3U )
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    68    #error "UART_SW_MINOR_VERSION does not match."
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    69  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    70  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    71  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    72  **                      Private Macro Definitions                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    73  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    74  /* ASCLIN Register Start Address Mapping */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    75  #define UART_HW_MODULE                    (&MODULE_ASCLIN0)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    76  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    77  #define UART_CSRREG_CLKSEL_NOCLK          (0U)  /* No Clock  */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    78  #define UART_FRAMECONREG_INIT_MODE        (0U)  /* ASCLIN INIT mode */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    79  #define UART_FRAMECONREG_ASC_MODE         (0x00010000U)  /* ASCLIN UART mode */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    80  #define UART_CSRREG_CLKSEL_CLC            (8U)  /* Clk source = fASCLINF */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    81  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    82  /* Digital Glitch Filter Disabled */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    83  #define UART_IOCRREG_DEPTH_VAL            (0U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    84  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    85  #define UART_BITCONREG_SM_VAL             (1U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    86  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    87  #define UART_ENABLE_BIT                   (1U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    88  #define UART_DISABLE_BIT                  (0U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    89  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    90  #define UART_INVALID_CHANNEL              (0xFFU)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    91  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    92  /* Configure Inlet width and outlet width for FIFO
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    93  depending on the Datalength configured for the Channels */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    94  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    95  #if (UART_NINEBITS_USED == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    96  #define UART_TXFIFOCONREG_INW_VAL         (2U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    97  #define UART_RXFIFOCONREG_OUTW_VAL        (2U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    98  #define UART_STEPSIZE                     (2U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	    99  #else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   100  #define UART_TXFIFOCONREG_INW_VAL         (1U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   101  #define UART_RXFIFOCONREG_OUTW_VAL        (1U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   102  #define UART_STEPSIZE                     (1U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   103  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   104  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   105  #define UART_ZERO_U                       (0U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   106  #define UART_ONE_U                        (1U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   107  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   108  #define UART_BIT_RESET                    (0U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   109  #define UART_BIT_SET                      (1U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   110  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   111  #define UART_TX_LOCK_IDX                  (0U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   112  #define UART_RX_LOCK_IDX                  (1U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   113  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   114  #define UART_NINEBIT_DATLEN               (9U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   115  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   116  /*Rx FIFO Buffer Int level is set to Store 16 bytes*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   117  #define UART_RX_FIFO_INT_LEVEL_VAL        (15U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   118  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   119  /* SRC register for ASCLIN are offset by a below value  0x0C div 4 */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   120  #define UART_SRC_ADDROFFSET               (0x03U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   121  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   122  /* Disable ASCLIN Module clock */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   123  #define UART_DISABLE_ASCLIN_MODULE        (0x00000001U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   124  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   125  #define UART_TIMEOUT_DURATION             (0xFFU)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   126  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   127  #define UART_KRST_TIMEOUT                 (0x100U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   128  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   129  /* Set and Clear Mask to Disable Interrupts */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   130  #define UART_SET_MASK_DISABLE_INTR        (0x02000000U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   131  #define UART_CLR_MASK_DISABLE_INTR        (0x80000400U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   132  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   133  /* Set and Clear Mask to Clear Interrupts */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   134  #define UART_SET_MASK_CLR_INTR            (0x52000000U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   135  #define UART_CLR_MASK_CLR_INTR            (0x80000000U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   136  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   137  /* Set and Clear Mask to Enable Interrupts */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   138  #define UART_SET_MASK_ENABLE_INTR         (0x00000400U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   139  #define UART_CLR_MASK_ENABLE_INTR         (0x80000000U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   140  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   141  /* SRC register addresses */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   142  #define UART_SRC_ASCLIN0TXADDR  ((volatile Ifx_SRC_SRCR_Bits  *) \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   143  (void *)&(SRC_ASCLIN0TX))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   144  #define UART_SRC_ASCLIN0RXADDR  ((volatile Ifx_SRC_SRCR_Bits  *) \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   145  (void *)&(SRC_ASCLIN0RX))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   146  #define UART_SRC_ASCLIN0ERRADDR ((volatile Ifx_SRC_SRCR_Bits  *) \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   147  (void *)&(SRC_ASCLIN0ERR))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   148  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   149  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   150  **                      Private Type Definitions                              **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   151  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   152  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   153  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   154  *                     Private Function Declarations                            *
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   155  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   156  /*Memory Map of the UART Code*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   157  #define UART_START_SEC_CODE
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   158  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   159   allowed only for MemMap.h*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   160  #include "MemMap.h"
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   161  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   162  IFX_LOCAL_INLINE uint8 Uart_lHwInitClcReg(uint8 HwUnit, uint32 Value);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   163  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   164  #if ((UART_RESET_SFR_INIT == STD_ON) || (UART_DEINIT_API == STD_ON))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   165  IFX_LOCAL_INLINE void Uart_lHwInitKernelRegInit(uint8 HwUnit);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   166  IFX_LOCAL_INLINE void Uart_lHwInitKernelRegDeInit(uint8 HwUnit);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   167  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   168  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   169  static void Uart_lHwInit(uint8 HwUnit,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   170                                       const Uart_ChannelType* ChannelConfigPtr);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   171  #if ((UART_ABORT_READ_API == STD_ON) || (UART_ABORT_WRITE_API == STD_ON))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   172  static void Uart_lHwInitRuntime(uint8 HwUnit,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   173                                        const Uart_ChannelType* ChannelConfigPtr);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   174  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   175  static void Uart_lRead(Ifx_ASCLIN* HwModulePtr,Uart_ChannelIdType Channel);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   176  static void Uart_lWrite(Ifx_ASCLIN* HwModulePtr,Uart_ChannelIdType Channel);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   177  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   178  static void Uart_lEnableReadInterrupts(Ifx_ASCLIN* HwModulePtr);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   179  static void Uart_lEnableWriteInterrupts(Ifx_ASCLIN* HwModulePtr,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   180                                                               uint8 ApiAccessId);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   181  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   182  /* Functions to clear flags for read and write functions */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   183  static void Uart_lClearWriteInterrupts(Ifx_ASCLIN* HwModulePtr,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   184                                                               uint8 ApiAccessId);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   185  static void Uart_lClearReadInterrupts(Ifx_ASCLIN* HwModulePtr,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   186                                                               uint8 ApiAccessId);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   187  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   188  #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   189  static Uart_ReturnType Uart_lChannelCheck(\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   190                               Uart_ChannelIdType Channel,uint8 ApiId);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   191  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   192  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   193  /* Functions to enable SRE bit of corresponding hardware*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   194  static void  Uart_lHwEnableAscLinTxIntr(volatile uint8 HwUnit);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   195  static void  Uart_lHwEnableAscLinRxIntr(volatile uint8 HwUnit);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   196  static void  Uart_lHwEnableAscLinErrIntr(volatile uint8 HwUnit);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   197  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   198  /* Functions to disable SRE bit of curresponding hardware*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   199  static void  Uart_lHwDisableAscLinTxIntr(volatile uint8 HwUnit, \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   200                                                               uint8 ApiAccessId);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   201  static void  Uart_lHwDisableAscLinRxIntr(volatile uint8 HwUnit, \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   202                                                               uint8 ApiAccessId);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   203  static void  Uart_lHwDisableAscLinErrIntr(volatile uint8 HwUnit, \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   204                                                               uint8 ApiAccessId);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   205  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   206  #define UART_STOP_SEC_CODE
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   207  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   208   allowed only for MemMap.h*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   209  #include "MemMap.h"
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   210  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   211  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   212  **                      Global Constant Definitions                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   213  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   214  #if (UART_PB_FIXEDADDR == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   215  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   216  #define UART_START_SEC_CONST_32BIT
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   217  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   218   allowed only for MemMap.h*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   219  #include "MemMap.h"
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   220  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   221  /* UART Config Set Pointer */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   222  static const Uart_ConfigType* const Uart_kConfigPtr = &Uart_ConfigRoot[0];
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   223  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   224  #define UART_STOP_SEC_CONST_32BIT
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   225  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   226   allowed only for MemMap.h*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   227  #include "MemMap.h"
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   228  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   229  #endif /*(UART_PB_FIXEDADDR == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   230  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   231  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   232  #if (UART_PB_FIXEDADDR == STD_OFF)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   233  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   234  #define UART_START_SEC_VAR_32BIT
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   235  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   236   allowed only for MemMap.h*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   237  #include "MemMap.h"
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   238  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   239  static const Uart_ConfigType* Uart_kConfigPtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   240  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   241  #define UART_STOP_SEC_VAR_32BIT
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   242  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   243   allowed only for MemMap.h*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   244  #include "MemMap.h"
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   245  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   246  #endif /*(UART_PB_FIXEDADDR == OFF)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   247  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   248  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   249  **                      Global Variable Definitions                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   250  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   251  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   252  /*[cover parentID=DS_NAS_UART_PR115]Global and Static variable[/cover]*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   253  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   254  #define UART_START_SEC_VAR_INIT_8BIT
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   255  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   256   allowed only for MemMap.h*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   257  #include "MemMap.h"
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   258  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   259  /* Mapping of ASCLIN HW Units Used to the respective logical UART Channel Ids*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   260  static Uart_ChannelIdType Uart_BusChannelMap[UART_MAX_HW_UNIT]=\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   261  {UART_INVALID_CHANNEL};
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   262  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   263  /* Variable used to check Uart Initialization Status */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   264  #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   265  static Uart_StateType Uart_InitStatus = UART_UNINITIALISED;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   266  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   267  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   268  #define UART_STOP_SEC_VAR_INIT_8BIT
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   269  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   270   allowed only for MemMap.h*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   271  #include "MemMap.h"
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   272  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   273  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   274  #define UART_START_SEC_VAR_UNSPECIFIED
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   275  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   276   allowed only for MemMap.h*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   277  #include "MemMap.h"
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   278  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   279  #if (UART_DEBUG_SUPPORT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   280  /*IFX_MISRA_RULE_08_10_STATUS=Variable Uart_ChannelInfo is declared as
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   281   extern in Uart_Dbg.h, which will be included application for
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   282   debugging*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   283  Uart_ChannelInfoType  Uart_ChannelInfo[UART_MAXIMUM_CHANNEL];
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   284  #else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   285  static Uart_ChannelInfoType Uart_ChannelInfo[UART_MAXIMUM_CHANNEL];
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   286  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   287  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   288  #define UART_STOP_SEC_VAR_UNSPECIFIED
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   289  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   290   allowed only for MemMap.h*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   291  #include "MemMap.h"
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   292  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   293  #define UART_START_SEC_VAR_32BIT
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   294  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   295   allowed only for MemMap.h*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   296  #include "MemMap.h"
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   297  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   298  /*Resource Protection Flags for UART Channel Resource(using binary semaphore)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   299  static uint32 Uart_ChLock[2][UART_MAXIMUM_CHANNEL];
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   300  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   301  #ifdef IFX_UART_DEBUG
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   302  extern volatile uint32 TestUart_DebugMask01;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   303  extern volatile uint32 TestUart_DebugMask02;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   304  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   305  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   306  #define UART_STOP_SEC_VAR_32BIT
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   307  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   308   allowed only for MemMap.h*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   309  #include "MemMap.h"
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   310  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   311  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   312  **                      Private Constant Definitions                          **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   313  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   314  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   315  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   316  **                      Private Variable Definitions                          **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   317  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   318  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   319  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   320  **                      Global Function Definitions                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   321  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   322  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   323  /*Memory Map of the UART Code*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   324  #define UART_START_SEC_CODE
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   325  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   326   allowed only for MemMap.h*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   327  #include "MemMap.h"
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   328  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   329  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   330  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   331  ** Traceability : [cover parentID=DS_NAS_UART_PR1569,DS_NAS_HE2_UART_PR3018,  **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   332  **                DS_NAS_EP_UART_PR3018,DS_NAS_UART_PR63_6][/cover]           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   333  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   334  ** Syntax : void Uart_Init( const Uart_ConfigType* ConfigPtr )                **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   335  **    [/cover]                                                                **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   336  ** Service ID:  0x00                                                          **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   337  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   338  ** Sync/Async:  Synchronous                                                   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   339  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   340  ** Reentrancy:  Non reentrant                                                 **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   341  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   342  ** Parameters (in) :  ConfigPtr - Pointer to Uart driver configuration set    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   343  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   344  ** Parameters (out):  None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   345  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   346  ** Return value    :  None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   347  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   348  ** Description : Driver Module Initialization function.                       **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   349  ** Service for UART initialization. The Initialization function shall         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   350  ** initialize all common relevant registers of UART channels with the values  **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   351  ** of the structure referenced by the parameter ConfigPtr.                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   352  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   353  void Uart_Init(const Uart_ConfigType* ConfigPtr)
; Function Uart_Init
.L100:
Uart_Init:	.type	func

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   354  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   355    const Uart_ChannelType *ChannelConfigPtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   356    uint8 ModuleNo,Chan;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   357    uint8 MaxChannel,ClkDisableChk,ClkFailureChk ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   358  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   359    #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   360    Std_ReturnType ReturnStatus;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   361    ReturnStatus = E_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   362    #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   363  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   364    #if (UART_DEV_ERROR_DETECT == STD_ON) /* if DET detection is switched On */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   365     #if (UART_PB_FIXEDADDR == STD_OFF)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   366     if (ConfigPtr == NULL_PTR)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   367     {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   368       /* If the config pointer is equal to null pointer report to DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   369       Det_ReportError(
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   370                       UART_MODULE_ID,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   371                       UART_MODULE_INSTANCE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   372                       UART_SID_INIT,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   373                       UART_E_PARAM_POINTER
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   374                      );
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   375       ReturnStatus = E_NOT_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   376     }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   377     #else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   378     if (Uart_kConfigPtr != ConfigPtr)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   379     {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   380       /* In case of PB Fixed address if the Uart_kConfigPtr not equal to
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   381       ConfigPtr then report to DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   382       Det_ReportError(
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   383                       UART_MODULE_ID,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   384                       UART_MODULE_INSTANCE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   385                       UART_SID_INIT,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   386                       UART_E_INVALID_POINTER
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   387                      );
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   388       ReturnStatus = E_NOT_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   389     }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   390     #endif/*(UART_PB_FIXEDADDR == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   391  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   392     else if (Uart_InitStatus == UART_INITIALISED)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   393     {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   394       /* If Uart is already initialsed then report to DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   395       Det_ReportError(
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   396                       UART_MODULE_ID,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   397                       UART_MODULE_INSTANCE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   398                       UART_SID_INIT,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   399                       UART_E_STATE_TRANSITION
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   400                      );
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   401       ReturnStatus = E_NOT_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   402     }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   403     else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   404     {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   405       /* Do Nothing */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   406     }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   407    #endif  /* (UART_DEV_ERROR_DETECT == STD_ON) */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   408  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   409    #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   410    if (ReturnStatus == E_OK)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   411    #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   412    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   413      MaxChannel = ConfigPtr->NoOfChannels;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   414  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   415      ClkFailureChk = UART_ZERO_U;
	mov	d11,#0
	sub.a	a10,#16
.L640:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   416  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   417      /* Enable the ASCLIN hardware unit/s for all configured Channels */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   418      for (Chan = UART_ZERO_U; Chan < MaxChannel; Chan++)
	mov	d12,d11
	st.a	[a10]4,a4
.L642:
	ld.bu	d15,[a4]4
.L643:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   419      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   420        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   421         ChannelConfigPtr to access the Configuration of a particular Channel*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   422        ChannelConfigPtr = &(ConfigPtr->ChannelConfigPtr[Chan]);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   423        /* Extract the HW Module */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   424        ModuleNo = ChannelConfigPtr->HwModule;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   425  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   426        /* Enable the ASCLIN module and also set the EDIS bit (Sleep setting) */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   427        ClkDisableChk = Uart_lHwInitClcReg(ModuleNo, UART_ASCLIN_CLC);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   428  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   429        if (UART_ZERO_U == ClkDisableChk)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   430        {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   431          #if (UART_RESET_SFR_INIT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   432          /* Reset ASCLIN Kernel  */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   433          Uart_lHwInitKernelRegInit(ModuleNo);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   434          #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   435  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   436          /* Initialise the Uart Hardware. */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   437          Uart_lHwInit(ModuleNo, ChannelConfigPtr);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   438  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   439        /* Initialize the ChannelInfo containig UART Channel to HW Unit Mapping*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   440          Uart_ChannelInfo[Chan].Uart_AssignedHW = ModuleNo;
	fcall	.cocofun_25
.L641:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   441  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   442          /* Init Uart_BusChannelMap Array */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   443          Uart_BusChannelMap[ModuleNo] = Chan;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   444  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   445          /* Init UART Channel Tx and Rx State variables */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   446          Uart_ChannelInfo[Chan].Uart_TxState = UART_INITIALISED;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   447          Uart_ChannelInfo[Chan].Uart_RxState = UART_INITIALISED;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   448  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   449          /* Init Uart Channel Tx/Rx Resource Lock */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   450          Uart_ChLock[UART_TX_LOCK_IDX][Chan] = UART_ZERO_U;
	fcall	.cocofun_14
.L417:
	mov	d13,#8
	st.a	[a10],a2
.L418:
	jlt	d15,#1,.L6
.L901:
	mov.a	a12,d15
.L647:
	mov	d8,#1
.L902:
	add.a	a12,#-1
.L646:
	mov	d9,d11
.L903:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   451          Uart_ChLock[UART_RX_LOCK_IDX][Chan] = UART_ZERO_U;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   452        }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   453        else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   454        {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   455          ClkFailureChk++;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   456  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   457        /* Set Uart_AssignedHW to Invalid Channel Id */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   458          Uart_ChannelInfo[Chan].Uart_AssignedHW = UART_INVALID_CHANNEL;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   459  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   460          /* Set Uart_BusChannelMap as Invalid Channel Id */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   461          Uart_BusChannelMap[ModuleNo] = UART_INVALID_CHANNEL;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   462  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   463         /* Set UART Channel Tx and Rx State as Uninitialised*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   464          Uart_ChannelInfo[Chan].Uart_TxState = UART_UNINITIALISED;
	mov	d14,d11
.L904:
	mov	d10,#255
.L3:
	ld.a	a2,[a10]4
.L648:
	ld.a	a2,[a2]
.L649:
	sha	d15,d12,#5
.L905:
	addsc.a	a13,a2,d15,#0
.L650:
	ld.bu	d15,[a13]23
.L651:
	st.w	[a10]8,d15
.L425:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   465          Uart_ChannelInfo[Chan].Uart_RxState = UART_UNINITIALISED;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   466        }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   467      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   468  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   469      if(UART_ZERO_U == ClkFailureChk)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   470      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   471        /* Store ConfigPtr for use by APIs*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   472        #if (UART_PB_FIXEDADDR == STD_OFF)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   473        Uart_kConfigPtr = ConfigPtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   474        #endif    /*(UART_PB_FIXEDADDR == OFF)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   475  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   476        #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   477         /* Store UART driver initailization status */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   478        Uart_InitStatus = UART_INITIALISED;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   479        #endif/*(UART_DEV_ERROR_DETECT == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   480      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   481      else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   482      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   483        #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   484         /* Store UART driver Status */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   485        Uart_InitStatus = UART_UNINITIALISED;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   486        #endif/*(UART_DEV_ERROR_DETECT == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   487      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   488    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   489    return ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   490  }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   491  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   492  #if ((UART_RESET_SFR_INIT == STD_ON) || (UART_DEINIT_API == STD_ON))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   493  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   494  ** Syntax           : IFX_LOCAL_INLINE void Uart_lHwInitKernelRegInit         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   495  **                      (uint8 HwUnit)                                        **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   496  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   497  ** Service ID       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   498  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   499  ** Sync/Async       : Synchronous                                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   500  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   501  ** Reentrancy       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   502  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   503  ** Parameters (in)  : HwUnit   : ASCLIN Hardware module no                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   504  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   505  ** Parameters (out) : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   506  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   507  ** Return value     : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   508  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   509  ** Description      : This function resets the Kernel                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   510  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   511  IFX_LOCAL_INLINE void Uart_lHwInitKernelRegInit(uint8 HwUnit)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   512  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   513    volatile uint32 Readback;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   514    uint32 WaitCount,RstStatus;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   515    WaitCount = UART_KRST_TIMEOUT;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   516    /* Reset End Init Protection to access regsiters */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   517    UART_SFR_INIT_RESETENDINIT();
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   518    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   519     efficiently access the SFRs of multiple ASCLINKernels.*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   520    UART_SFR_INIT_MODIFY32(UART_HW_MODULE[HwUnit].KRST0.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   521                                       UART_KRST0_RST_CLEARMASK,UART_ENABLE_BIT)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   522    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   523     efficiently access the SFRs of multiple ASCLIN kernels.*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   524    Readback = UART_SFR_INIT_USER_MODE_READ32(UART_HW_MODULE[HwUnit].KRST0.U);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   525    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   526     efficiently access the SFRs of multiple ASCLIN kernels.*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   527    UART_SFR_INIT_MODIFY32(UART_HW_MODULE[HwUnit].KRST1.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   528                 UART_KRST1_RST_CLEARMASK,UART_ENABLE_BIT)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   529    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   530     efficiently access the SFRs of multiple ASCLIN kernels.*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   531    Readback = UART_SFR_INIT_USER_MODE_READ32(UART_HW_MODULE[HwUnit].KRST1.U);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   532    /* Set End Init Protection */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   533    UART_SFR_INIT_SETENDINIT();
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   534    do
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   535    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   536      WaitCount--;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   537      #ifdef IFX_UART_DEBUG
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   538      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   539      efficiently access the SFRs of multiple ASCLIN kernels.*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   540      RstStatus =(uint32)(((UART_SFR_INIT_USER_MODE_READ32\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   541            (UART_HW_MODULE[HwUnit].KRST0.U) & UART_KRST0_RSTSTAT_MASK) >>\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   542               UART_KRST0_RSTSTAT_BITPOS) & TestUart_DebugMask01);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   543      #else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   544      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   545      efficiently access the SFRs of multiple ASCLIN kernels.*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   546      RstStatus =(uint32)((UART_SFR_INIT_USER_MODE_READ32\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   547             (UART_HW_MODULE[HwUnit].KRST0.U) & UART_KRST0_RSTSTAT_MASK) >>\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   548                                                     UART_KRST0_RSTSTAT_BITPOS);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   549      #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   550    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   551    while ((RstStatus == UART_ZERO_U) && (WaitCount > UART_ZERO_U));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   552    /* Reset End Init Protection to access regsiters */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   553    UART_SFR_INIT_RESETENDINIT();
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   554    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   555     efficiently access the SFRs of multiple ASCLIN kernels.*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   556    UART_SFR_INIT_MODIFY32(UART_HW_MODULE[HwUnit].KRSTCLR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   557                                    UART_KRSTCLR_CLR_CLEARMASK,UART_ENABLE_BIT)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   558    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   559     efficiently access the SFRs of multiple ASCLIN kernels.*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   560    Readback = UART_SFR_INIT_USER_MODE_READ32(UART_HW_MODULE[HwUnit].KRSTCLR.U);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   561    /* Set End Init Protection */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   562    UART_SFR_INIT_SETENDINIT();
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   563    UNUSED_PARAMETER(Readback)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   564  }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   565  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   566  ** Syntax           : IFX_LOCAL_INLINE void Uart_lHwInitKernelRegDeInit       **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   567  **                      (uint8 HwUnit)                                        **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   568  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   569  ** Service ID       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   570  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   571  ** Sync/Async       : Synchronous                                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   572  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   573  ** Reentrancy       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   574  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   575  ** Parameters (in)  : HwUnit   : ASCLIN Hardware module no                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   576  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   577  ** Parameters (out) : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   578  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   579  ** Return value     : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   580  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   581  ** Description      : This function resets the Kernel                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   582  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   583  IFX_LOCAL_INLINE void Uart_lHwInitKernelRegDeInit(uint8 HwUnit)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   584  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   585    volatile uint32 Readback;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   586    uint32 WaitCount,RstStatus;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   587    WaitCount = UART_KRST_TIMEOUT;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   588    /* Reset End Init Protection to access regsiters */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   589    UART_SFR_DEINIT_RESETENDINIT();
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   590    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   591     efficiently access the SFRs of multiple ASCLINKernels.*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   592    UART_SFR_DEINIT_MODIFY32(UART_HW_MODULE[HwUnit].KRST0.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   593                                       UART_KRST0_RST_CLEARMASK,UART_ENABLE_BIT)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   594    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   595     efficiently access the SFRs of multiple ASCLIN kernels.*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   596    Readback = UART_SFR_DEINIT_USER_MODE_READ32(UART_HW_MODULE[HwUnit].KRST0.U);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   597    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   598     efficiently access the SFRs of multiple ASCLIN kernels.*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   599    UART_SFR_DEINIT_MODIFY32(UART_HW_MODULE[HwUnit].KRST1.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   600                 UART_KRST1_RST_CLEARMASK,UART_ENABLE_BIT)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   601    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   602     efficiently access the SFRs of multiple ASCLIN kernels.*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   603    Readback = UART_SFR_DEINIT_USER_MODE_READ32(UART_HW_MODULE[HwUnit].KRST1.U);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   604    /* Set End Init Protection */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   605    UART_SFR_DEINIT_SETENDINIT();
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   606    do
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   607    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   608      WaitCount--;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   609      #ifdef IFX_UART_DEBUG
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   610      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   611      efficiently access the SFRs of multiple ASCLIN kernels.*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   612      RstStatus =(uint32)(((UART_SFR_DEINIT_USER_MODE_READ32\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   613            (UART_HW_MODULE[HwUnit].KRST0.U) & UART_KRST0_RSTSTAT_MASK) >>\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   614               UART_KRST0_RSTSTAT_BITPOS) & TestUart_DebugMask01);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   615      #else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   616      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   617      efficiently access the SFRs of multiple ASCLIN kernels.*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   618      RstStatus =(uint32)((UART_SFR_DEINIT_USER_MODE_READ32\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   619             (UART_HW_MODULE[HwUnit].KRST0.U) & UART_KRST0_RSTSTAT_MASK) >>\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   620                                                     UART_KRST0_RSTSTAT_BITPOS);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   621      #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   622    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   623    while ((RstStatus == UART_ZERO_U) && (WaitCount > UART_ZERO_U));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   624    /* Reset End Init Protection to access regsiters */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   625    UART_SFR_DEINIT_RESETENDINIT();
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   626    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   627     efficiently access the SFRs of multiple ASCLIN kernels.*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   628    UART_SFR_DEINIT_MODIFY32(UART_HW_MODULE[HwUnit].KRSTCLR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   629                                    UART_KRSTCLR_CLR_CLEARMASK,UART_ENABLE_BIT)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   630    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used to
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   631     efficiently access the SFRs of multiple ASCLIN kernels.*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   632    Readback = UART_SFR_DEINIT_USER_MODE_READ32\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   633                                             (UART_HW_MODULE[HwUnit].KRSTCLR.U);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   634    /* Set End Init Protection */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   635    UART_SFR_DEINIT_SETENDINIT();
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   636    UNUSED_PARAMETER(Readback)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   637  }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   638  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   639  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   640  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   641  ** Syntax           : IFX_LOCAL_INLINE uint8 Uart_lHwInitClcReg               **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   642  **                      (uint8 HwUnit, uint32 Value)                          **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   643  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   644  ** Service ID       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   645  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   646  ** Sync/Async       : Synchronous                                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   647  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   648  ** Reentrancy       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   649  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   650  ** Parameters (in)  : HwUnit   : ASCLIN Hardware module no                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   651  **                  : Value    : Value to configure CLC Reg                   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   652  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   653  ** Parameters (out) : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   654  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   655  ** Return value     : 0 (Module Clk Enabled)/ 1 (Module Clk Disabled)         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   656  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   657  ** Description      : This function sets the clc register with given value    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   658  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   659  IFX_LOCAL_INLINE uint8 Uart_lHwInitClcReg(uint8 HwUnit, uint32 Value)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   660  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   661    uint8 ModClkStatus;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   662  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   663    /* Reset End Init Protection */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   664    UART_SFR_INIT_RESETENDINIT();
	call	Mcal_ResetENDINIT
.L906:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   665  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   666    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   667     UART_HW_MODULE to access the SFRs of a particular HW Unit*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   668    UART_SFR_INIT_WRITE32(UART_HW_MODULE[HwUnit].CLC.U,Value);
	sha	d15,d15,#8
	lea	a2,0xf0000600
.L652:
	addsc.a	a14,a2,d15,#0
	st.w	[a14],d13
.L907:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   669  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   670    /* Set End Init Protection */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   671    UART_SFR_INIT_SETENDINIT();
	call	Mcal_SetENDINIT
.L908:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   672  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   673  /* Check the status bit DISS for Checking Mod Clk Disable Status*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   674  #ifdef IFX_UART_DEBUG
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   675    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   676     UART_HW_MODULE to access the SFRs of a particular HW Unit*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   677    ModClkStatus = (uint8)(((UART_SFR_INIT_USER_MODE_READ32\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   678                   (UART_HW_MODULE[HwUnit].CLC.U) & UART_CLC_DISS_MASK) >>\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   679                   UART_CLC_DISS_BITPOS) | TestUart_DebugMask02);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   680  #else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   681    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   682     UART_HW_MODULE to access the SFRs of a particular HW Unit*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   683    ModClkStatus = (uint8)((UART_SFR_INIT_USER_MODE_READ32\ 
	ld.w	d15,[a14]
.L909:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   684    (UART_HW_MODULE[HwUnit].CLC.U) & UART_CLC_DISS_MASK) >> UART_CLC_DISS_BITPOS);
	sh	d15,#-1
.L910:
	and	d0,d15,#1
	ld.w	d15,[a10]8
.L426:
	lea	a2,Uart_BusChannelMap
.L911:
	addsc.a	a14,a2,d15,#0
.L427:
	jne	d0,#0,.L4
.L428:
	mov	d4,d15
	mov.aa	a4,a13
.L654:
	call	Uart_lHwInit
.L653:
	st.b	[a15]18,d15
.L912:
	st.b	[a14],d12
.L913:
	st.b	[a15]8,d8
.L914:
	st.b	[a15]9,d8
.L915:
	ld.a	a2,[a10]
	st.w	[a2],d9
.L916:
	st.w	[a2]12,d9
.L917:
	j	.L5
.L4:
	st.b	[a15]18,d10
.L918:
	st.b	[a14],d10
.L919:
	add	d11,#1
	st.b	[a15]8,d14
.L645:
	extr.u	d11,d11,#0,#8
	st.b	[a15]9,d14
.L5:
	ld.a	a2,[a10]
	add	d12,#1
	lea	a15,[a15]20
.L644:
	extr.u	d12,d12,#0,#8
.L655:
	add.a	a2,#4
.L920:
	st.a	[a10],a2
	loop	a12,.L3
.L6:
	jne	d11,#0,.L7
.L921:
	ld.a	a15,[a10]4
.L656:
	st.a	Uart_kConfigPtr,a15
.L7:
	ret
.L405:
	
__Uart_Init_function_end:
	.size	Uart_Init,__Uart_Init_function_end-Uart_Init
.L191:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_25')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_25
.L102:
.cocofun_25:	.type	func
; Function body .cocofun_25, coco_iter:2
	movh.a	a15,#@his(Uart_ChannelInfo)
.L766:
	lea	a15,[a15]@los(Uart_ChannelInfo)
.L1354:
	fret
.L396:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_14')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_14
.L104:
.cocofun_14:	.type	func
; Function body .cocofun_14, coco_iter:0
	movh.a	a2,#@his(Uart_ChLock)
.L787:
	lea	a2,[a2]@los(Uart_ChLock)
.L1301:
	fret
.L341:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_lHwInit')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   685  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   686  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   687    return ModClkStatus;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   688  }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   689  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   690  ** Traceability :                                                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   691  ** Syntax           : static void Uart_lHwInit                                **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   692  **                     (uint8 HwUnit,Uart_ChannelConfigType* ChannelConfigPtr)**
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   693  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   694  ** Service ID       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   695  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   696  ** Sync/Async       : Synchronous                                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   697  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   698  ** Reentrancy       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   699  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   700  ** Parameters (in)  : HwUnit   : ASCLIN Hardware module no                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   701  **                ChannelConfigPtr : Channel configuration pointer            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   702  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   703  ** Parameters (out) : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   704  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   705  ** Return value     : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   706  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   707  ** Description      : This function initialises the ASCLIN Hw module          **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   708  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   709  static void Uart_lHwInit(uint8 HwUnit,const Uart_ChannelType* ChannelConfigPtr)
; Function Uart_lHwInit
.L106:
Uart_lHwInit:	.type	func

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   710  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   711    Ifx_ASCLIN*  HwModulePtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   712    uint32 TimeOutCount = UART_TIMEOUT_DURATION;
	fcall	.cocofun_10
.L661:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   713  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   714    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   715     UART_HW_MODULE to access the SFRs of a particular HW Unit*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   716    HwModulePtr = &(UART_HW_MODULE[HwUnit]);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   717    /* Disable the Input Clock source */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   718    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->CSR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   719                             UART_CSR_CLKSEL_CLEARMASK,UART_CSRREG_CLKSEL_NOCLK)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   720    /* provide delay of  TW >= 4 * (1/fA) + 2 * (1/fCLC) clock cycles */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   721    /* Wait TW or poll for CSR.CON = 0 */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   722    while ((((UART_SFR_INIT_USER_MODE_READ32(HwModulePtr->CSR.U) &\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   723            UART_CSR_CON_MASK) >> UART_CSR_CON_BITPOS) != UART_BIT_RESET) &&\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   724                                                              (TimeOutCount > 0U))
	j	.L8
.L9:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   725    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   726      TimeOutCount-- ;
	add	d0,#-1
.L8:
	ld.w	d15,[a15]76
.L1117:
	sh	d15,d15,#-31
.L1118:
	jeq	d15,#0,.L10
.L1119:
	jne	d0,#0,.L9
.L10:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   727    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   728  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   729    TimeOutCount = UART_TIMEOUT_DURATION;
	fcall	.cocofun_11
.L668:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   730    /* Change to INIT mode */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   731    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->FRAMECON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   732                         UART_FRAMECON_MODE_CLEARMASK,UART_FRAMECONREG_INIT_MODE)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   733    /* Connect the Clock source */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   734    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->CSR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   735                               UART_CSR_CLKSEL_CLEARMASK,UART_CSRREG_CLKSEL_CLC)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   736    /* provide delay of TW >= 4 * (1/fA) + 2 * (1/fCLC) clock cycles */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   737    /*Wait TW or poll for CSR.CON = 1*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   738    while ((((UART_SFR_INIT_USER_MODE_READ32(HwModulePtr->CSR.U) &\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   739              UART_CSR_CON_MASK) >> UART_CSR_CON_BITPOS) !=\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   740                              UART_BIT_SET) && (TimeOutCount > 0U))
	j	.L11
.L12:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   741    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   742       TimeOutCount-- ;
	add	d0,#-1
.L11:
	ld.w	d15,[a15]76
.L1120:
	sh	d15,d15,#-31
.L1121:
	jne	d15,#0,.L13
.L1122:
	jne	d0,#0,.L12
.L13:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   743    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   744  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   745    TimeOutCount = UART_TIMEOUT_DURATION;
	fcall	.cocofun_17
.L666:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   746    /* Disable the Clock source. */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   747    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->CSR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   748                            UART_CSR_CLKSEL_CLEARMASK,UART_CSRREG_CLKSEL_NOCLK)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   749    /* provide delay of  TW >= 4 * (1/fA) + 2 * (1/fCLC) clock cycles */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   750    /*Wait TW or poll for CSR.CON = 0*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   751    while ((((UART_SFR_INIT_USER_MODE_READ32(HwModulePtr->CSR.U) &\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   752           UART_CSR_CON_MASK) >> UART_CSR_CON_BITPOS) != UART_BIT_RESET) &&\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   753                                                              (TimeOutCount > 0U))
	j	.L14
.L15:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   754    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   755       TimeOutCount-- ;
	add	d15,#-1
.L14:
	ld.w	d0,[a15]76
.L1123:
	sh	d0,d0,#-31
.L1124:
	jeq	d0,#0,.L16
.L1125:
	jne	d15,#0,.L15
.L16:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   756    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   757    /* Change to ASC mode */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   758     UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->FRAMECON.U,\ 
	fcall	.cocofun_7
.L540:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   759                         UART_FRAMECON_MODE_CLEARMASK,UART_FRAMECONREG_ASC_MODE)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   760  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   761    /* Configure the Baudrate parameters */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   762    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->BRG.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   763                                      UART_BRG_NUMERATOR_CLEARMASK,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   764          ((uint32)ChannelConfigPtr->HwBrgNumerator << UART_BRG_NUMERATOR_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   765    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->BRG.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   766                                         UART_BRG_DENOMINATOR_CLEARMASK,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   767                                             ChannelConfigPtr->HwBrgDenominator)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   768    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->BITCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   769                                            UART_BITCON_PRESCALER_CLEARMASK,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   770                                            ChannelConfigPtr->HwBitconPrescalar)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   771    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->BITCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   772                  UART_BITCON_OVERSAMPLING_CLEARMASK,((uint32)\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   773       ChannelConfigPtr->HwBitconOversampling << UART_BITCON_OVERSAMPLING_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   774  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   775    /* Digital Glitch Filter = OFF */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   776    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->IOCR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   777                               UART_IOCR_DEPTH_CLEARMASK,UART_IOCRREG_DEPTH_VAL)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   778  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   779    /* Configure CTS */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   780    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->IOCR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   781          UART_IOCR_CTSEN_CLEARMASK, ((uint32)ChannelConfigPtr->CtsEnable <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   782                                                          UART_IOCR_CTSEN_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   783    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->IOCR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   784        UART_IOCR_RCPOL_CLEARMASK, ((uint32)ChannelConfigPtr->CtsPolarity <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   785                                                          UART_IOCR_RCPOL_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   786  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   787    /* Configure Sample mode(3 Bit), Sample point, Parity, Collision detection */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   788    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->BITCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   789                 UART_BITCON_SM_CLEARMASK, ((uint32)UART_BITCONREG_SM_VAL <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   790                                                           UART_BITCON_SM_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   791    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->BITCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   792                                    UART_BITCON_SAMPLEPOINT_CLEARMASK,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   793      (uint32)((((uint32)(ChannelConfigPtr->HwBitconOversampling)>>UART_ONE_U)+\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   794                                   UART_ONE_U) << UART_BITCON_SAMPLEPOINT_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   795  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   796    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->FRAMECON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   797          UART_FRAMECON_PEN_CLEARMASK, ((uint32)ChannelConfigPtr->ParityEnable <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   798                                                        UART_FRAMECON_PEN_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   799    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->FRAMECON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   800              UART_FRAMECON_ODD_CLEARMASK, ((uint32)ChannelConfigPtr->Parity <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   801                                                        UART_FRAMECON_ODD_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   802    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->FRAMECON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   803          UART_FRAMECON_IDLE_CLEARMASK, UART_BIT_SET << UART_FRAMECON_IDLE_BITPOS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   804  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   805    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->FRAMECON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   806         UART_FRAMECON_STOP_CLEARMASK, ((uint32)ChannelConfigPtr->StopBits <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   807                                                       UART_FRAMECON_STOP_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   808  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   809    /* Configure RX inlet, TX outlet width/s(8/16 bit) based on UartDataLength*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   810    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->TXFIFOCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   811                   UART_TXFIFOCON_INW_CLEARMASK, UART_TXFIFOCONREG_INW_VAL <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   812                                                        UART_TXFIFOCON_INW_BITPOS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   813    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->RXFIFOCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   814                UART_RXFIFOCON_OUTW_CLEARMASK, UART_RXFIFOCONREG_OUTW_VAL <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   815                                                       UART_RXFIFOCON_OUTW_BITPOS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   816  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   817    /*Data length Defines the number of bits in a character*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   818    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->DATCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   819                                     UART_DATCON_DATLEN_CLEARMASK,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   820                             ((uint32)ChannelConfigPtr->DataLength - UART_ONE_U))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   821  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   822    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->IOCR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   823                                     UART_IOCR_LB_CLEARMASK, UART_DISABLE_BIT)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   824    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->IOCR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   825                     UART_IOCR_ALTI_CLEARMASK, ChannelConfigPtr->RxPinSelection)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   826  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   827    /* Select the Clock source */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   828    UART_SFR_INIT_USER_MODE_MODIFY32(HwModulePtr->CSR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   829                               UART_CSR_CLKSEL_CLEARMASK, UART_CSRREG_CLKSEL_CLC)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   830  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   831    TimeOutCount = UART_TIMEOUT_DURATION;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   832    /* provide delay of TW >= 4 * (1/fA) + 2 * (1/fCLC) clock cycles */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   833    /*Wait TW or poll for CSR.CON = 1*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   834    while ((((UART_SFR_INIT_USER_MODE_READ32(HwModulePtr->CSR.U) &\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   835               UART_CSR_CON_MASK) >> UART_CSR_CON_BITPOS) !=UART_BIT_SET) &&\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   836                                                              (TimeOutCount > 0U))
	j	.L17
.L18:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   837    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   838       TimeOutCount-- ;
	add	d15,#-1
.L17:
	ld.w	d0,[a15]76
.L1126:
	sh	d0,d0,#-31
.L1127:
	jne	d0,#0,.L19
.L1128:
	jne	d15,#0,.L18
.L19:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   839    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   840  }
	ret
.L533:
	
__Uart_lHwInit_function_end:
	.size	Uart_lHwInit,__Uart_lHwInit_function_end-Uart_lHwInit
.L236:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_17')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_17
.L108:
.cocofun_17:	.type	func
; Function body .cocofun_17, coco_iter:0
	mov	d15,#255
	ld.w	d0,[a15]76
.L670:
	insert	d0,d0,#0,#0,#5
	st.w	[a15]76,d0
.L669:
	fret
.L356:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_11')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_11
.L110:
.cocofun_11:	.type	func
; Function body .cocofun_11, coco_iter:0
	ld.w	d15,[a15]24
.L1285:
	mov	d0,#255
.L736:
	insert	d15,d15,#0,#16,#2
	st.w	[a15]24,d15
.L662:
	fcall	.cocofun_22
.L734:
	fret
.L326:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_22')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_22
.L112:
.cocofun_22:	.type	func
; Function body .cocofun_22, coco_iter:1
	ld.w	d15,[a15]76
.L665:
	insert	d15,d15,#8,#0,#5
	st.w	[a15]76,d15
.L663:
	fret
.L381:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_10')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_10
.L114:
.cocofun_10:	.type	func
; Function body .cocofun_10, coco_iter:0
	sha	d15,d4,#8
	lea	a15,0xf0000600
.L1280:
	addsc.a	a15,a15,d15,#0
.L658:
	mov	d0,#255
.L659:
	ld.w	d15,[a15]76
.L732:
	insert	d15,d15,#0,#0,#5
	st.w	[a15]76,d15
.L657:
	fret
.L321:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_7')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_7
.L116:
.cocofun_7:	.type	func
; Function body .cocofun_7, coco_iter:0
	ld.w	d15,[a15]24
.L673:
	movh	d1,#256
.L741:
	insert	d15,d15,#1,#16,#2
	st.w	[a15]24,d15
.L674:
	ld.w	d15,[a15]32
.L675:
	ld.hu	d0,[a4]16
	insert	d15,d15,#0,#16,#12
	sh	d0,d0,#16
.L677:
	or	d15,d0
	st.w	[a15]32,d15
.L1251:
	ld.w	d15,[a15]32
.L678:
	ld.hu	d0,[a4]18
	insert	d15,d15,#0,#0,#12
.L680:
	or	d15,d0
	st.w	[a15]32,d15
.L1252:
	ld.w	d15,[a15]20
.L681:
	ld.hu	d0,[a4]20
	insert	d15,d15,#0,#0,#12
.L683:
	or	d15,d0
	st.w	[a15]20,d15
.L1253:
	ld.w	d15,[a15]20
.L684:
	ld.bu	d0,[a4]22
	insert	d15,d15,#0,#16,#4
	sh	d0,d0,#16
.L686:
	or	d15,d0
	st.w	[a15]20,d15
.L1254:
	ld.w	d15,[a15]4
.L687:
	insert	d15,d15,#0,#4,#6
	st.w	[a15]4,d15
.L689:
	ld.w	d15,[a15]4
.L690:
	ld.bu	d0,[a4]29
	insert	d15,d15,#0,#29,#1
	sh	d0,d0,#29
.L692:
	or	d15,d0
	st.w	[a15]4,d15
.L1255:
	ld.w	d15,[a15]4
.L693:
	ld.bu	d0,[a4]30
	insert	d15,d15,#0,#25,#1
	sh	d0,d0,#25
.L695:
	or	d15,d0
	st.w	[a15]4,d15
.L1256:
	ld.w	d15,[a15]20
.L696:
	insert	d15,d15,#1,#31,#1
	st.w	[a15]20,d15
.L698:
	ld.w	d15,[a15]20
.L699:
	ld.bu	d0,[a4]22
	insert	d15,d15,#0,#24,#4
	sh	d0,#-1
	sh	d0,d0,#24
	add	d0,d1
.L701:
	or	d15,d0
	st.w	[a15]20,d15
.L1257:
	ld.w	d15,[a15]24
.L702:
	ld.bu	d0,[a4]27
	insert	d15,d15,#0,#30,#1
	sh	d0,d0,#30
.L704:
	or	d15,d0
	st.w	[a15]24,d15
.L1258:
	ld.w	d15,[a15]24
.L705:
	ld.bu	d0,[a4]28
	insert	d15,d15,#0,#31,#1
	sh	d0,d0,#31
.L707:
	or	d15,d0
	st.w	[a15]24,d15
.L1259:
	ld.w	d15,[a15]24
.L708:
	insert	d15,d15,#1,#6,#3
	st.w	[a15]24,d15
.L710:
	ld.w	d15,[a15]24
.L711:
	ld.bu	d0,[a4]24
	insert	d15,d15,#0,#9,#3
	sh	d0,d0,#9
.L713:
	or	d15,d0
	st.w	[a15]24,d15
.L1260:
	ld.w	d15,[a15]12
.L714:
	insert	d15,d15,#1,#6,#2
	st.w	[a15]12,d15
.L716:
	ld.w	d15,[a15]16
.L717:
	insert	d15,d15,#1,#6,#2
	st.w	[a15]16,d15
.L719:
	ld.w	d15,[a15]28
.L720:
	ld.bu	d0,[a4]25
	insert	d15,d15,#0,#0,#4
	add	d0,#-1
.L722:
	or	d15,d0
	st.w	[a15]28,d15
.L1261:
	ld.w	d15,[a15]4
.L723:
	insert	d15,d15,#0,#28,#1
	st.w	[a15]4,d15
.L725:
	ld.w	d15,[a15]4
.L726:
	ld.bu	d0,[a4]26
	insert	d15,d15,#0,#0,#3
.L728:
	or	d15,d0
	st.w	[a15]4,d15
.L672:
	fcall	.cocofun_22
.L730:
	mov	d15,#255
	fret
.L306:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_lHwInitRuntime')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   841  #if ((UART_ABORT_READ_API == STD_ON) || (UART_ABORT_WRITE_API == STD_ON))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   842  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   843  ** Traceability :                                                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   844  ** Syntax           : static void Uart_lHwInitRuntime                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   845  **                     (uint8 HwUnit,Uart_ChannelConfigType* ChannelConfigPtr)**
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   846  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   847  ** Service ID       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   848  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   849  ** Sync/Async       : Synchronous                                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   850  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   851  ** Reentrancy       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   852  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   853  ** Parameters (in)  : HwUnit   : ASCLIN Hardware module no                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   854  **                ChannelConfigPtr : Channel configuration pointer            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   855  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   856  ** Parameters (out) : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   857  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   858  ** Return value     : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   859  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   860  ** Description      : This function initialises the ASCLIN Hw module          **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   861  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   862  static void Uart_lHwInitRuntime(uint8 HwUnit,\ 
; Function Uart_lHwInitRuntime
.L118:
Uart_lHwInitRuntime:	.type	func

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   863                                         const Uart_ChannelType* ChannelConfigPtr)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   864  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   865    Ifx_ASCLIN*  HwModulePtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   866    uint32 TimeOutCount = UART_TIMEOUT_DURATION;
	fcall	.cocofun_10
.L733:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   867  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   868    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   869     UART_HW_MODULE to access the SFRs of a particular HW Unit*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   870    HwModulePtr = &(UART_HW_MODULE[HwUnit]);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   871     /* Disable the Input Clock source */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   872      UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->CSR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   873                             UART_CSR_CLKSEL_CLEARMASK,UART_CSRREG_CLKSEL_NOCLK)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   874      /* provide delay of  TW >= 4 * (1/fA) + 2 * (1/fCLC) clock cycles */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   875      /* Wait TW or poll for CSR.CON = 0 */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   876      while ((((UART_SFR_RUNTIME_USER_MODE_READ32(HwModulePtr->CSR.U) &\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   877            UART_CSR_CON_MASK) >> UART_CSR_CON_BITPOS) != UART_BIT_RESET) &&\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   878                                                              (TimeOutCount > 0U))
	j	.L20
.L21:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   879      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   880        TimeOutCount-- ;
	add	d0,#-1
.L20:
	ld.w	d15,[a15]76
.L1133:
	sh	d15,d15,#-31
.L1134:
	jeq	d15,#0,.L22
.L1135:
	jne	d0,#0,.L21
.L22:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   881      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   882  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   883      TimeOutCount = UART_TIMEOUT_DURATION;
	fcall	.cocofun_11
.L739:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   884    /* Change to INIT mode */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   885    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FRAMECON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   886                         UART_FRAMECON_MODE_CLEARMASK,UART_FRAMECONREG_INIT_MODE)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   887    /* Connect the Clock source */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   888    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->CSR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   889                               UART_CSR_CLKSEL_CLEARMASK,UART_CSRREG_CLKSEL_CLC)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   890    /* provide delay of TW >= 4 * (1/fA) + 2 * (1/fCLC) clock cycles */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   891    /*Wait TW or poll for CSR.CON = 1*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   892    while ((((UART_SFR_RUNTIME_USER_MODE_READ32(HwModulePtr->CSR.U) &\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   893              UART_CSR_CON_MASK) >> UART_CSR_CON_BITPOS) !=\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   894                              UART_BIT_SET) && (TimeOutCount > 0U))
	j	.L23
.L24:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   895    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   896       TimeOutCount-- ;
	add	d0,#-1
.L23:
	ld.w	d15,[a15]76
.L1136:
	sh	d15,d15,#-31
.L1137:
	jne	d15,#0,.L25
.L1138:
	jne	d0,#0,.L24
.L25:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   897    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   898  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   899    TimeOutCount = UART_TIMEOUT_DURATION;
	fcall	.cocofun_17
.L738:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   900    /* Disable the Clock source. */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   901    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->CSR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   902                            UART_CSR_CLKSEL_CLEARMASK,UART_CSRREG_CLKSEL_NOCLK)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   903    /* provide delay of  TW >= 4 * (1/fA) + 2 * (1/fCLC) clock cycles */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   904    /*Wait TW or poll for CSR.CON = 0*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   905    while ((((UART_SFR_RUNTIME_USER_MODE_READ32(HwModulePtr->CSR.U) &\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   906           UART_CSR_CON_MASK) >> UART_CSR_CON_BITPOS) != UART_BIT_RESET) &&\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   907                                                              (TimeOutCount > 0U))
	j	.L26
.L27:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   908    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   909       TimeOutCount-- ;
	add	d15,#-1
.L26:
	ld.w	d0,[a15]76
.L1139:
	sh	d0,d0,#-31
.L1140:
	jeq	d0,#0,.L28
.L1141:
	jne	d15,#0,.L27
.L28:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   910    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   911    /* Change to ASC mode */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   912    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FRAMECON.U,\ 
	fcall	.cocofun_7
.L547:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   913                         UART_FRAMECON_MODE_CLEARMASK,UART_FRAMECONREG_ASC_MODE)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   914  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   915    /* Configure the Baudrate parameters */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   916    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->BRG.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   917                                      UART_BRG_NUMERATOR_CLEARMASK,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   918          ((uint32)ChannelConfigPtr->HwBrgNumerator << UART_BRG_NUMERATOR_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   919    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->BRG.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   920                                         UART_BRG_DENOMINATOR_CLEARMASK,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   921                                             ChannelConfigPtr->HwBrgDenominator)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   922    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->BITCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   923                                            UART_BITCON_PRESCALER_CLEARMASK,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   924                                            ChannelConfigPtr->HwBitconPrescalar)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   925    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->BITCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   926                  UART_BITCON_OVERSAMPLING_CLEARMASK,((uint32)\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   927       ChannelConfigPtr->HwBitconOversampling << UART_BITCON_OVERSAMPLING_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   928  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   929    /* Digital Glitch Filter = OFF */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   930    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->IOCR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   931                               UART_IOCR_DEPTH_CLEARMASK,UART_IOCRREG_DEPTH_VAL)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   932  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   933    /* Configure CTS */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   934    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->IOCR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   935          UART_IOCR_CTSEN_CLEARMASK, ((uint32)ChannelConfigPtr->CtsEnable <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   936                                                          UART_IOCR_CTSEN_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   937    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->IOCR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   938        UART_IOCR_RCPOL_CLEARMASK, ((uint32)ChannelConfigPtr->CtsPolarity <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   939                                                          UART_IOCR_RCPOL_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   940  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   941    /* Configure Sample mode(3 Bit), Sample point, Parity, Collision detection */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   942    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->BITCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   943                 UART_BITCON_SM_CLEARMASK, ((uint32)UART_BITCONREG_SM_VAL <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   944                                                           UART_BITCON_SM_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   945    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->BITCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   946                                    UART_BITCON_SAMPLEPOINT_CLEARMASK,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   947      (uint32)((((uint32)(ChannelConfigPtr->HwBitconOversampling)>>UART_ONE_U)+\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   948                                   UART_ONE_U) << UART_BITCON_SAMPLEPOINT_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   949  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   950    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FRAMECON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   951          UART_FRAMECON_PEN_CLEARMASK, ((uint32)ChannelConfigPtr->ParityEnable <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   952                                                        UART_FRAMECON_PEN_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   953    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FRAMECON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   954              UART_FRAMECON_ODD_CLEARMASK, ((uint32)ChannelConfigPtr->Parity <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   955                                                        UART_FRAMECON_ODD_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   956    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FRAMECON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   957          UART_FRAMECON_IDLE_CLEARMASK, UART_BIT_SET << UART_FRAMECON_IDLE_BITPOS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   958  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   959    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FRAMECON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   960         UART_FRAMECON_STOP_CLEARMASK, ((uint32)ChannelConfigPtr->StopBits <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   961                                                       UART_FRAMECON_STOP_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   962  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   963    /* Configure RX inlet, TX outlet width/s(8/16 bit) based on UartDataLength*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   964    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->TXFIFOCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   965                   UART_TXFIFOCON_INW_CLEARMASK, UART_TXFIFOCONREG_INW_VAL <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   966                                                        UART_TXFIFOCON_INW_BITPOS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   967    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->RXFIFOCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   968                UART_RXFIFOCON_OUTW_CLEARMASK, UART_RXFIFOCONREG_OUTW_VAL <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   969                                                       UART_RXFIFOCON_OUTW_BITPOS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   970  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   971    /*Data length Defines the number of bits in a character*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   972    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->DATCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   973                                     UART_DATCON_DATLEN_CLEARMASK,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   974                             ((uint32)ChannelConfigPtr->DataLength - UART_ONE_U))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   975  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   976    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->IOCR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   977                                     UART_IOCR_LB_CLEARMASK, UART_DISABLE_BIT)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   978    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->IOCR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   979                     UART_IOCR_ALTI_CLEARMASK, ChannelConfigPtr->RxPinSelection)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   980  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   981    /* Select the Clock source */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   982    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->CSR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   983                               UART_CSR_CLKSEL_CLEARMASK, UART_CSRREG_CLKSEL_CLC)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   984  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   985    TimeOutCount = UART_TIMEOUT_DURATION;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   986    /* provide delay of TW >= 4 * (1/fA) + 2 * (1/fCLC) clock cycles */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   987    /*Wait TW or poll for CSR.CON = 1*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   988    while ((((UART_SFR_RUNTIME_USER_MODE_READ32(HwModulePtr->CSR.U) &\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   989               UART_CSR_CON_MASK) >> UART_CSR_CON_BITPOS) !=UART_BIT_SET) &&\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   990                                                              (TimeOutCount > 0U))
	j	.L29
.L30:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   991    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   992       TimeOutCount-- ;
	add	d15,#-1
.L29:
	ld.w	d0,[a15]76
.L1142:
	sh	d0,d0,#-31
.L1143:
	jne	d0,#0,.L31
.L1144:
	jne	d15,#0,.L30
.L31:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   993    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   994  }
	ret
.L542:
	
__Uart_lHwInitRuntime_function_end:
	.size	Uart_lHwInitRuntime,__Uart_lHwInitRuntime_function_end-Uart_lHwInitRuntime
.L241:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_Read')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	
	.global	Uart_Read

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   995  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   996  #if (UART_DEINIT_API == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   997  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   998  ** Traceability : [cover parentID=DS_NAS_UART_PR1570,DS_NAS_UART_PR63_7]      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	   999  **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1000  ** Syntax : void Uart_DeInit( void )                                          **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1001  **          [/cover]                                                          **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1002  ** Service ID:  0x01                                                          **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1003  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1004  ** Sync/Async:  Synchronous                                                   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1005  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1006  ** Reentrancy:  Non reentrant                                                 **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1007  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1008  ** Parameters (in) :  None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1009  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1010  ** Parameters (out):  None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1011  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1012  ** Return value    :  None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1013  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1014  ** Description : Driver Module DeInitialization function.                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1015  ** Service for UART de initialization.                                        **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1016  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1017  void Uart_DeInit(void)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1018  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1019    Ifx_ASCLIN*  HwModulePtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1020    const Uart_ChannelType   *ChannelConfigPtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1021    uint32 TimeOutCount = UART_TIMEOUT_DURATION;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1022    uint8 ModuleNo,Chan;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1023    uint8 MaxChannel;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1024  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1025    #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1026     Std_ReturnType ReturnStatus;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1027     ReturnStatus = E_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1028    #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1029  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1030    #if (UART_DEV_ERROR_DETECT == STD_ON) /* if DET detection is switched On */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1031    if (Uart_InitStatus == UART_UNINITIALISED)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1032     {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1033       /* If Uart is already unintialised Report to  DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1034       Det_ReportError(
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1035                        UART_MODULE_ID,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1036                        UART_MODULE_INSTANCE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1037                        UART_SID_DEINIT,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1038                        UART_E_UNINIT
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1039                       );
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1040       ReturnStatus = E_NOT_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1041     }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1042    #endif  /* (_DEV_ERROR_DETECT == STD_ON) */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1043  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1044    #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1045    if (ReturnStatus == E_OK)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1046    #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1047    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1048      MaxChannel = Uart_kConfigPtr->NoOfChannels;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1049  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1050      for (Chan = UART_ZERO_U; Chan < MaxChannel; Chan++)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1051      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1052        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1053         ChannelConfigPtr to access the Configuration of a particular Channel*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1054        ChannelConfigPtr = &(Uart_kConfigPtr->ChannelConfigPtr[Chan]);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1055        /* Extract the Hw module */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1056        ModuleNo = ChannelConfigPtr->HwModule;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1057        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1058         UART_HW_MODULE to access the SFRs of a particular HW Unit*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1059        HwModulePtr = &(UART_HW_MODULE[ModuleNo]);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1060  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1061        /* Disable the Clock source */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1062        UART_SFR_DEINIT_USER_MODE_MODIFY32(HwModulePtr->CSR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1063                             UART_CSR_CLKSEL_CLEARMASK, UART_CSRREG_CLKSEL_NOCLK)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1064  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1065        TimeOutCount = UART_TIMEOUT_DURATION;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1066        /* provide delay of  TW >= 4 * (1/fA) + 2 * (1/fCLC) clock cycles */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1067        /*Wait TW or poll for CSR.CON = 0*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1068        while ((((UART_SFR_DEINIT_USER_MODE_READ32(HwModulePtr->CSR.U) &\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1069             UART_CSR_CON_MASK) >> UART_CSR_CON_BITPOS) !=UART_BIT_RESET) &&\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1070                                                              (TimeOutCount > 0U))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1071        {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1072          TimeOutCount-- ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1073        }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1074  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1075        /* Change to  INIT mode */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1076        UART_SFR_DEINIT_USER_MODE_MODIFY32(HwModulePtr->FRAMECON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1077                      UART_FRAMECON_MODE_CLEARMASK, UART_FRAMECONREG_INIT_MODE)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1078        /* Connect the Clock source */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1079        UART_SFR_DEINIT_USER_MODE_MODIFY32(HwModulePtr->FRAMECON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1080                             UART_CSR_CLKSEL_CLEARMASK, UART_CSRREG_CLKSEL_CLC)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1081  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1082        TimeOutCount = UART_TIMEOUT_DURATION;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1083        /* provide delay of TW >= 4 * (1/fA) + 2 * (1/fCLC) clock cycles */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1084        /* Wait TW or poll for CSR.CON = 1 */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1085        while ((((UART_SFR_DEINIT_USER_MODE_READ32(HwModulePtr->CSR.U) &\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1086               UART_CSR_CON_MASK) >> UART_CSR_CON_BITPOS) !=UART_BIT_SET) && \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1087                                                              (TimeOutCount > 0U))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1088        {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1089          TimeOutCount-- ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1090        }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1091  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1092        /* Init the Uart_BusChannelMap Array */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1093        Uart_BusChannelMap[ModuleNo] = UART_INVALID_CHANNEL;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1094  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1095        /* Reset the channel Info*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1096        Uart_ChannelInfo[Chan].Uart_TxState = UART_UNINITIALISED;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1097        Uart_ChannelInfo[Chan].Uart_RxState = UART_UNINITIALISED;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1098        Uart_ChannelInfo[Chan].Uart_TxDataLeft = UART_ZERO_U;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1099        Uart_ChannelInfo[Chan].Uart_RxDataLeft = UART_ZERO_U;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1100        Uart_ChannelInfo[Chan].Uart_TotalDataTxd= UART_ZERO_U;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1101        Uart_ChannelInfo[Chan].Uart_TotalDataRxd= UART_ZERO_U;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1102        Uart_ChannelInfo[Chan].Uart_TxBuffPtr = NULL_PTR;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1103        Uart_ChannelInfo[Chan].Uart_RxBuffPtr = NULL_PTR;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1104        Uart_ChannelInfo[Chan].Uart_TxDataCopyCntr = UART_ZERO_U;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1105        Uart_ChannelInfo[Chan].Uart_AssignedHW = UART_INVALID_CHANNEL;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1106  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1107        /* Reset the Uart Channel Tx/Rx Resource Lock */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1108        Uart_ChLock[UART_TX_LOCK_IDX][Chan] = UART_ZERO_U;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1109        Uart_ChLock[UART_RX_LOCK_IDX][Chan] = UART_ZERO_U;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1110  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1111        /* Clear the read and write Interrupts*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1112        Uart_lClearReadInterrupts(HwModulePtr, UART_DEINIT_ACCESS);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1113        Uart_lClearWriteInterrupts(HwModulePtr, UART_DEINIT_ACCESS);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1114  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1115        /* Disable Tx,Rx and Err Interrupts*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1116        Uart_lHwDisableAscLinTxIntr(ModuleNo, UART_DEINIT_ACCESS);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1117        Uart_lHwDisableAscLinRxIntr(ModuleNo, UART_DEINIT_ACCESS);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1118        Uart_lHwDisableAscLinErrIntr(ModuleNo, UART_DEINIT_ACCESS);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1119  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1120        /* Reset ASCLIN Kernel  */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1121        Uart_lHwInitKernelRegDeInit(ModuleNo);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1122  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1123        /* Reset End Init Protection */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1124        UART_SFR_DEINIT_RESETENDINIT();
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1125  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1126        /* Disable the ASCLIN module */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1127        UART_SFR_DEINIT_WRITE32(HwModulePtr->CLC.U, UART_DISABLE_ASCLIN_MODULE);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1128  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1129        /* Set End Init Protection */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1130        UART_SFR_DEINIT_SETENDINIT();
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1131      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1132  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1133      #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1134       /* Store UART driver initailization status */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1135      Uart_InitStatus = UART_UNINITIALISED;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1136      #endif/*(UART_DEV_ERROR_DETECT == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1137    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1138    return ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1139  }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1140  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1141  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1142  ** Traceability : [cover parentID=DS_NAS_UART_PR1571,DS_NAS_UART_PR63_8]
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1143  **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1144  ** Syntax : Uart_ReturnType Uart_Read                                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1145  **  (                                                                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1146  **    Uart_ChannelIdType channel,Uart_MemPtrType MemPtr,Uart_SizeType Size    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1147  **  )                                                                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1148  **                    [/cover]                                                **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1149  ** Service ID:  0x02                                                          **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1150  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1151  ** Sync/Async:  Asynchronous                                                  **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1152  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1153  ** Reentrancy:  Reentrant(Not for same channel)                               **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1154  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1155  ** Parameters (in): Channel - Uart channel to be addressed .                  **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1156  **                  MemPtr - Pointer to location where data needs to be stored**
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1157  **                  Size - No of data that needs to be recieved               **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1158  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1159  ** Parameters (out): None                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1160  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1161  ** Return value    : UART_OK - Read operation was initiaited successfully     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1162  **                   UART_NOT_OK - Read operation couldn't be initiated       **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1163  **                   due to developement errors                               **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1164  **                   UART_IS_BUSY - Uart channel is busy with other           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1165  **                   read operation                                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1166  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1167  ** Description : Api to configure the given UART Channel for reception of the **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1168  **       specified number of data bytes and the memory location (App Rx Buff) **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1169  **        to be used to store the received data                               **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1170  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1171  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1172  Uart_ReturnType Uart_Read\ 
; Function Uart_Read
.L120:
Uart_Read:	.type	func
	mov	d15,d4
	mov.aa	a12,a4
.L762:
	mov	d8,d5
.L768:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1173           (Uart_ChannelIdType Channel,Uart_MemPtrType MemPtr,Uart_SizeType Size)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1174  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1175    Ifx_ASCLIN*  HwModulePtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1176    Uart_ReturnType Retvalue = UART_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1177    uint8 HwUnit;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1178    uint8 TempIntLevel;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1179  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1180   #if (UART_DEV_ERROR_DETECT != STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1181    uint32 ChRxLock;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1182   #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1183  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1184    #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1185    if (Uart_InitStatus == UART_UNINITIALISED)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1186    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1187      /*If Uart is not initialised then  Report to  DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1188      Det_ReportError(
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1189                      UART_MODULE_ID,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1190                      UART_MODULE_INSTANCE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1191                      UART_SID_READ,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1192                      UART_E_UNINIT
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1193                     );
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1194      Retvalue = UART_NOT_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1195    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1196    else if (MemPtr == NULL_PTR)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1197    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1198      /*If memory pointer is equal to null pointer Report to  DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1199      Det_ReportError(
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1200                      UART_MODULE_ID,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1201                      UART_MODULE_INSTANCE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1202                      UART_SID_READ,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1203                      UART_E_PARAM_POINTER
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1204                     );
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1205      Retvalue = UART_NOT_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1206    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1207    else if (Size == UART_ZERO_U )
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1208    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1209      /* If the size is equal to zero Report to  DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1210      Det_ReportError(
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1211                      UART_MODULE_ID,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1212                      UART_MODULE_INSTANCE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1213                      UART_SID_READ,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1214                      UART_E_INVALID_SIZE
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1215                     );
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1216      Retvalue = UART_NOT_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1217    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1218    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1219    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1220      /* If the channelId is Invalid Report to DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1221      Retvalue = Uart_lChannelCheck(Channel,UART_SID_READ);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1222  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1223      if (Retvalue == UART_OK)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1224      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1225        /* If the channel is busy then Report to DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1226        if (Uart_ChannelInfo[Channel].Uart_RxState != UART_INITIALISED)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1227        {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1228          /*If channel is busy then Report to  DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1229          Det_ReportError(
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1230                          UART_MODULE_ID,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1231                          UART_MODULE_INSTANCE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1232                          UART_SID_READ,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1233                          UART_E_STATE_TRANSITION
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1234                          );
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1235          Retvalue = UART_IS_BUSY;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1236        }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1237      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1238    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1239    #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1240    #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1241    if (Retvalue == UART_OK)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1242    #else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1243     /* The Uart Read operation is already started for the channel. No other
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1244        operation can be started on this Channel. This is implemented using a
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1245        binary semaphore mechanism */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1246     ChRxLock = Mcal_LockResource(&Uart_ChLock[UART_RX_LOCK_IDX][Channel]);
	mov	d9,#0
	fcall	.cocofun_23
.L926:
	addsc.a	a15,a15,d15,#2
	lea	a4,[a15]12
.L765:
	call	Mcal_LockResource
.L764:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1247  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1248     /* No other Uart Read operation is in progress on the same Channel */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1249     if (ChRxLock == MCAL_RESOURCE_BUSY)
	jne	d2,#1,.L32
.L927:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1250     {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1251          Retvalue = UART_IS_BUSY;
	mov	d9,#2
	j	.L33
.L32:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1252     }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1253     else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1254    #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1255    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1256      /* Update Uart_ChannelInfo for Read Operation */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1257      Uart_ChannelInfo[Channel].Uart_RxState= UART_OPERATION_IN_PROGRESS;
	mul	d15,d15,#20
	fcall	.cocofun_25
.L763:
	addsc.a	a2,a15,d15,#0
.L928:
	mov	d15,#2
.L929:
	st.b	[a2]9,d15
.L930:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1258      Uart_ChannelInfo[Channel].Uart_RxBuffPtr= MemPtr;
	st.a	[a2],a12
.L931:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1259      Uart_ChannelInfo[Channel].Uart_RxDataLeft = Size;
	st.h	[a2]12,d8
.L932:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1260      Uart_ChannelInfo[Channel].Uart_TotalDataRxd =UART_ZERO_U;
	mov	d15,#0
	st.h	[a2]16,d15
.L933:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1261  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1262      HwUnit = Uart_ChannelInfo[Channel].Uart_AssignedHW;
	ld.bu	d8,[a2]18
.L769:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1263    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1264      UART_HW_MODULE to access the SFRs of a particular HW Unit*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1265      HwModulePtr= &(UART_HW_MODULE[HwUnit]);
	lea	a15,0xf0000600
.L934:
	sha	d15,d8,#8
.L935:
	addsc.a	a15,a15,d15,#0
.L445:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1266  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1267      /* Configure RX Outlet Width */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1268      UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->RXFIFOCON.U,\ 
	ld.w	d15,[a15]16
	insert	d15,d15,#1,#6,#2
	st.w	[a15]16,d15
.L446:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1269                UART_RXFIFOCON_OUTW_CLEARMASK, UART_RXFIFOCONREG_OUTW_VAL <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1270                                                      UART_RXFIFOCON_OUTW_BITPOS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1271  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1272      if(Uart_ChannelInfo[Channel].Uart_RxDataLeft < UART_BUFFER_SIZE)
	ld.hu	d0,[a2]12
.L936:
	mov	d15,#16
.L770:
	jge.u	d0,d15,.L34
.L937:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1273      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1274        /*Set RX FIFO Interrupt level according to Uart Size*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1275        TempIntLevel = (uint8)Uart_ChannelInfo[Channel].Uart_RxDataLeft\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1276                                    - (uint8)(UART_ONE_U);
	add	d0,#-1
.L938:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1277        UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->RXFIFOCON.U,\ 
	extr.u	d0,d0,#0,#8
	ld.w	d15,[a15]16
.L448:
	insert	d15,d15,#0,#8,#4
.L939:
	sh	d0,d0,#8
	j	.L35
.L34:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1278                  UART_RXFIFOCON_INTLEVEL_CLEARMASK,(uint32)(TempIntLevel) << \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1279                                                   UART_RXFIFOCON_INTLEVEL_BITPOS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1280      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1281      else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1282      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1283        /*Set RX FIFO Interrupt level to RX FIFO level*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1284        UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->RXFIFOCON.U,\ 
	mov	d0,#3840
	ld.w	d15,[a15]16
.L35:
	or	d15,d0
	st.w	[a15]16,d15
.L450:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1285                                   UART_RXFIFOCON_INTLEVEL_CLEARMASK,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1286           ((uint32)UART_RX_FIFO_INT_LEVEL_VAL << UART_RXFIFOCON_INTLEVEL_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1287      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1288  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1289       /*Flush the Rx FIFO*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1290      UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->RXFIFOCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1291                               UART_RXFIFOCON_FLUSH_CLEARMASK, UART_ENABLE_BIT)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1292  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1293      /*Enable Rx(RxFIFO level) and Err(Parity,framing,rx underflow) Interrupts*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1294      Uart_lEnableReadInterrupts(HwModulePtr);
	mov.aa	a4,a15
.L452:
	ld.w	d15,[a15]16
.L771:
	or	d15,#1
	st.w	[a15]16,d15
.L453:
	call	Uart_lEnableReadInterrupts
.L767:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1295  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1296       /*Enable Error and Rx Interrupts*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1297      Uart_lHwEnableAscLinRxIntr(HwUnit);
	mov	d4,d8
	call	Uart_lHwEnableAscLinRxIntr
.L940:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1298      Uart_lHwEnableAscLinErrIntr(HwUnit);
	mov	d4,d8
	call	Uart_lHwEnableAscLinErrIntr
.L455:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1299  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1300       /*Enable Receiver and filling of RxFIFO*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1301      UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->RXFIFOCON.U,\ 
	ld.w	d15,[a15]16
.L772:
	or	d15,#2
	st.w	[a15]16,d15
.L33:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1302            UART_RXFIFOCON_ENI_CLEARMASK, UART_ONE_U << UART_RXFIFOCON_ENI_BITPOS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1303    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1304    return Retvalue;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1305  }
	mov	d2,d9
	ret
.L431:
	
__Uart_Read_function_end:
	.size	Uart_Read,__Uart_Read_function_end-Uart_Read
.L196:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_23')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_23
.L122:
.cocofun_23:	.type	func
; Function body .cocofun_23, coco_iter:1
	movh.a	a15,#@his(Uart_ChLock)
.L761:
	lea	a15,[a15]@los(Uart_ChLock)
.L1345:
	fret
.L386:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_lRead')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1306  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1307  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1308  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1309  ** Syntax : static void Uart_lRead                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1310  **  (                                                                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1311  **    Ifx_ASCLIN* HwModulePtr,Uart_ChannelIdType Channel                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1312  **  )                                                                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1313  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1314  ** Service ID: NA                                                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1315  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1316  ** Sync/Async:  Synchronous                                                   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1317  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1318  ** Reentrancy:   Reentrant(Not for same channel)                              **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1319  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1320  ** Parameters (in): Channel - Uart channel to be addressed                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1321  **                  HwModulePtr - Asclin Hardware Pointer                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1322  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1323  ** Parameters (out): None                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1324  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1325  ** Return value    : None                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1326  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1327  ** Description : local function to copy the data from the RX FIFO buffer to   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1328  **               the user specified memory location(App Buffer)               **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1329  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1330  static void Uart_lRead(Ifx_ASCLIN* HwModulePtr,Uart_ChannelIdType Channel)
; Function Uart_lRead
.L124:
Uart_lRead:	.type	func

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1331  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1332    Uart_MemPtrType BuffPtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1333    uint16 Read_Count;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1334    uint8 TempIntLevel;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1335    uint8 UartDatalen;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1336  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1337    BuffPtr =  Uart_ChannelInfo[Channel].Uart_RxBuffPtr;
	fcall	.cocofun_12
.L775:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1338  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1339    if (Uart_ChannelInfo[Channel].Uart_RxDataLeft <= UART_BUFFER_SIZE)
	ld.hu	d15,[a15]12
.L1149:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1340    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1341      /*Set Read byte Count equal to the amount of data Remaining */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1342      Read_Count = Uart_ChannelInfo[Channel].Uart_RxDataLeft;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1343    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1344    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1345    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1346      /*Set Read byte Count equal to RX FIFO Buffer Size*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1347      Read_Count = UART_BUFFER_SIZE;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1348    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1349  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1350    while (Read_Count > UART_ZERO_U)
	mov	d2,#0
	ld.a	a2,[a15]
.L776:
	min.u	d0,d15,#16
.L777:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1351    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1352      UartDatalen =(uint8)((UART_SFR_RUNTIME_USER_MODE_READ32\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1353      (HwModulePtr->DATCON.U) & UART_DATCON_DATLEN_MASK) + UART_ONE_U);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1354  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1355      /*Check if the data to be read is the last one and datalen is 7/8*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1356      if ((Uart_ChannelInfo[Channel].Uart_RxDataLeft == UART_ONE_U) &&\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1357                              (UartDatalen != UART_NINEBIT_DATLEN))
	mov	d3,#9
	j	.L37
.L38:
	ld.w	d15,[a4]28
.L1150:
	ld.hu	d1,[a15]12
.L1151:
	and	d15,#15
.L779:
	add	d15,#1
.L1152:
	jne	d1,#1,.L39
.L1153:
	jeq	d15,d3,.L40
.L557:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1358      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1359        UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->RXFIFOCON.U,\ 
	ld.w	d15,[a4]16
.L780:
	insert	d15,d15,#1,#6,#2
	st.w	[a4]16,d15
.L558:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1360          UART_RXFIFOCON_OUTW_CLEARMASK, UART_ONE_U << UART_RXFIFOCON_OUTW_BITPOS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1361  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1362        *BuffPtr = (Uart_MemType)UART_SFR_RUNTIME_USER_MODE_READ32\ 
	ld.w	d0,[a4]72
.L778:
	st.b	[a2+],d0
.L1154:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1363                                           (HwModulePtr->RXDATA.U);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1364        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1365          BuffPtr to access next element of Application Data Buffer*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1366        BuffPtr++;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1367  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1368        /*Complete data is copied so set the Rx FIFO Interrupt level to Zero*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1369        UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->RXFIFOCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1370                                UART_RXFIFOCON_INTLEVEL_CLEARMASK, UART_ZERO_U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1371  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1372        /*Complete data is copied so set Read count to Zero*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1373        Read_Count = UART_ZERO_U;
	mov	d0,#0
.L560:
	ld.w	d15,[a4]16
.L781:
	insert	d15,d15,#0,#8,#4
	st.w	[a4]16,d15
.L561:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1374  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1375        Uart_ChannelInfo[Channel].Uart_RxDataLeft = UART_ZERO_U;
	st.h	[a15]12,d2
.L1155:
	j	.L41
.L40:
.L39:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1376        Uart_ChannelInfo[Channel].Uart_TotalDataRxd += UART_ONE_U;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1377      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1378      else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1379      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1380        *BuffPtr = (Uart_MemType)UART_SFR_RUNTIME_USER_MODE_READ32\ 
	ld.w	d1,[a4]72
.L1156:
	st.b	[a2+],d1
.L1157:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1381                                                  (HwModulePtr->RXDATA.U);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1382        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1383          BuffPtr to access next element of Application Data Buffer*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1384        BuffPtr++;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1385  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1386        /*Reduce the Read count by step size(i.e. One Data Count)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1387        Read_Count = Read_Count - UART_STEPSIZE;
	add	d0,#-1
.L1158:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1388        /*Update Uart_ChannelInfo for total data received and data
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1389         bytes remaining to be received*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1390        Uart_ChannelInfo[Channel].Uart_RxDataLeft -= UART_STEPSIZE;
	ld.hu	d1,[a15]12
.L1159:
	add	d15,d1,#-1
	st.h	[a15]12,d15
.L41:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1391        Uart_ChannelInfo[Channel].Uart_TotalDataRxd += UART_STEPSIZE;
	ld.hu	d1,[a15]16
.L1160:
	add	d15,d1,#1
	st.h	[a15]16,d15
.L37:
	jne	d0,#0,.L38
.L1161:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1392      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1393    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1394  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1395    if(Uart_ChannelInfo[Channel].Uart_RxDataLeft < UART_BUFFER_SIZE)
	ld.hu	d15,[a15]12
.L1162:
	mov	d0,#16
.L782:
	jge.u	d15,d0,.L42
.L1163:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1396    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1397      if (Uart_ChannelInfo[Channel].Uart_RxDataLeft > UART_ZERO_U)
	jeq	d15,#0,.L43
.L1164:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1398      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1399        /*Set RX FIFO Interrupt level according to the amount of data remainig*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1400        TempIntLevel = (uint8)Uart_ChannelInfo[Channel].Uart_RxDataLeft\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1401                                                    - ((uint8)UART_ONE_U);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1402        UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->RXFIFOCON.U,\ 
	add	d0,d15,#-1
	ld.w	d15,[a4]16
.L563:
	sh	d0,d0,#8
.L783:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1403                   UART_RXFIFOCON_INTLEVEL_CLEARMASK, (uint32)TempIntLevel << \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1404                                                   UART_RXFIFOCON_INTLEVEL_BITPOS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1405      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1406      else
	insert	d15,d15,#0,#8,#4
	j	.L44
.L42:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1407      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1408       /* Do Nothing */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1409      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1410    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1411    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1412    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1413      /*Set the RX FIFO Interrupt level to RX FIFO Buffer Size*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1414       UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->RXFIFOCON.U,\ 
	mov	d0,#3840
	ld.w	d15,[a4]16
.L44:
	or	d15,d0
	st.w	[a4]16,d15
.L43:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1415                                        UART_RXFIFOCON_INTLEVEL_CLEARMASK,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1416           ((uint32)UART_RX_FIFO_INT_LEVEL_VAL << UART_RXFIFOCON_INTLEVEL_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1417    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1418      /*Update Uart_ChannelInfo for Memptr*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1419    Uart_ChannelInfo[Channel].Uart_RxBuffPtr = BuffPtr;
	st.a	[a15],a2
.L1165:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1420  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1421  }
	ret
.L549:
	
__Uart_lRead_function_end:
	.size	Uart_lRead,__Uart_lRead_function_end-Uart_lRead
.L246:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_12')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_12
.L126:
.cocofun_12:	.type	func
; Function body .cocofun_12, coco_iter:0
	mul	d15,d4,#20
.L1290:
	fcall	.cocofun_21
.L773:
	fret
.L331:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_21')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_21
.L128:
.cocofun_21:	.type	func
; Function body .cocofun_21, coco_iter:1
	fcall	.cocofun_25
.L774:
	addsc.a	a15,a15,d15,#0
.L1336:
	fret
.L376:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_lEnableReadInterrupts')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1422  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1423  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1424  ** Syntax : static void Uart_lEnableReadInterrupts (Ifx_ASCLIN* HwModulePtr)  **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1425  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1426  ** Service ID:  NA                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1427  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1428  ** Sync/Async:  Synchronous                                                   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1429  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1430  ** Reentrancy:      reentrant                                                 **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1431  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1432  ** Parameters (in): HwModulePtr - Asclin Hardware Pointer                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1433  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1434  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1435  ** Parameters (out): None                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1436  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1437  ** Return value    : None                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1438  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1439  ** Description : Local function to Enable Rx and Err Interrupts in read fnt   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1440  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1441  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1442  static void Uart_lEnableReadInterrupts(Ifx_ASCLIN* HwModulePtr)
; Function Uart_lEnableReadInterrupts
.L130:
Uart_lEnableReadInterrupts:	.type	func

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1443  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1444    /*Enable Parity, Framing, RxFIFO Underflow and RxFIFO Level Interrupts*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1445    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FLAGSENABLE.U,\ 
	ld.w	d15,[a4]64
	insert	d15,d15,#1,#16,#1
.L784:
	fcall	.cocofun_15
.L578:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1446                 UART_FLAGSENABLE_PEE_CLEARMASK,((uint32)UART_ENABLE_BIT << \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1447                                                     UART_FLAGSENABLE_PEE_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1448  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1449    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FLAGSENABLE.U,\ 
	insert	d15,d15,#1,#18,#1
.L785:
	fcall	.cocofun_15
.L580:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1450                UART_FLAGSENABLE_FEE_CLEARMASK, ((uint32)UART_ENABLE_BIT << \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1451                                                     UART_FLAGSENABLE_FEE_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1452  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1453    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FLAGSENABLE.U,\ 
	insert	d15,d15,#1,#28,#1
.L786:
	fcall	.cocofun_15
.L582:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1454                UART_FLAGSENABLE_RFLE_CLEARMASK, ((uint32)UART_ENABLE_BIT << \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1455                                                    UART_FLAGSENABLE_RFLE_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1456  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1457    UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FLAGSENABLE.U,\ 
	insert	d15,d15,#1,#27,#1
	st.w	[a4]64,d15
.L584:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1458                UART_FLAGSENABLE_RFUE_CLEARMASK, ((uint32)UART_ENABLE_BIT << \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1459                                                    UART_FLAGSENABLE_RFUE_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1460  }
	ret
.L575:
	
__Uart_lEnableReadInterrupts_function_end:
	.size	Uart_lEnableReadInterrupts,__Uart_lEnableReadInterrupts_function_end-Uart_lEnableReadInterrupts
.L256:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_15')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_15
.L132:
.cocofun_15:	.type	func
; Function body .cocofun_15, coco_iter:0
	st.w	[a4]64,d15
.L1306:
	ld.w	d15,[a4]64
.L1307:
	fret
.L346:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_lClearReadInterrupts')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1461  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1462  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1463  ** Syntax : static void Uart_lClearReadInterrupts (Ifx_ASCLIN* HwModulePtr,   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1464                                                           uint8 ApiAccessId)   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1465  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1466  ** Service ID:  NA                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1467  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1468  ** Sync/Async:  Synchronous                                                   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1469  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1470  ** Reentrancy:      reentrant                                                 **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1471  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1472  ** Parameters (in): HwModulePtr - Asclin Hardware Pointer                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1473  **                  ApiAccessId - API Access type                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1474  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1475  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1476  ** Parameters (out): None                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1477  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1478  ** Return value    : None                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1479  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1480  ** Description : Local function to Disable  Rx and Err Interrupts in read fnt **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1481  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1482  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1483  static void Uart_lClearReadInterrupts(Ifx_ASCLIN* HwModulePtr,\ 
; Function Uart_lClearReadInterrupts
.L134:
Uart_lClearReadInterrupts:	.type	func

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1484                                                                uint8 ApiAccessId)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1485  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1486    #if (UART_RUNNING_IN_USER_0_MODE_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1487    #if (UART_USER_MODE_RUNTIME_API_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1488    if (ApiAccessId == UART_RUNTIME_ACCESS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1489    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1490      /*Clear Parity,Framing, RxFIFO Underflow and RxFIFO Level Interrupts*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1491      UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FLAGSCLEAR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1492                 UART_FLAGSCLEAR_PEC_CLEARMASK, ((uint32)UART_ENABLE_BIT << \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1493                                                      UART_FLAGSCLEAR_PEC_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1494  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1495      UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FLAGSCLEAR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1496                  UART_FLAGSCLEAR_FEC_CLEARMASK, ((uint32)UART_ENABLE_BIT << \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1497                                                      UART_FLAGSCLEAR_FEC_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1498  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1499      UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FLAGSCLEAR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1500                 UART_FLAGSCLEAR_RFLC_CLEARMASK, ((uint32)UART_ENABLE_BIT << \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1501                                                     UART_FLAGSCLEAR_RFLC_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1502  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1503      UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FLAGSCLEAR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1504                 UART_FLAGSCLEAR_RFUC_CLEARMASK, ((uint32)UART_ENABLE_BIT << \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1505                                                     UART_FLAGSCLEAR_RFUC_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1506    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1507    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1508    #endif /*(UART_USER_MODE_RUNTIME_API_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1509    #if (UART_USER_MODE_DEINIT_API_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1510    if (ApiAccessId == UART_DEINIT_ACCESS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1511    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1512      /*Clear Parity,Framing, RxFIFO Underflow and RxFIFO Level Interrupts*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1513      UART_SFR_DEINIT_USER_MODE_MODIFY32(HwModulePtr->FLAGSCLEAR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1514                 UART_FLAGSCLEAR_PEC_CLEARMASK, ((uint32)UART_ENABLE_BIT << \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1515                                                      UART_FLAGSCLEAR_PEC_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1516  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1517      UART_SFR_DEINIT_USER_MODE_MODIFY32(HwModulePtr->FLAGSCLEAR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1518                  UART_FLAGSCLEAR_FEC_CLEARMASK, ((uint32)UART_ENABLE_BIT << \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1519                                                      UART_FLAGSCLEAR_FEC_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1520  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1521      UART_SFR_DEINIT_USER_MODE_MODIFY32(HwModulePtr->FLAGSCLEAR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1522                 UART_FLAGSCLEAR_RFLC_CLEARMASK, ((uint32)UART_ENABLE_BIT << \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1523                                                     UART_FLAGSCLEAR_RFLC_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1524  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1525      UART_SFR_DEINIT_USER_MODE_MODIFY32(HwModulePtr->FLAGSCLEAR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1526                 UART_FLAGSCLEAR_RFUC_CLEARMASK, ((uint32)UART_ENABLE_BIT << \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1527                                                     UART_FLAGSCLEAR_RFUC_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1528    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1529    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1530    #endif /*(UART_USER_MODE_DEINIT_API_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1531    #endif /*(UART_RUNNING_IN_USER_0_MODE_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1532    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1533      /*Clear Parity,Framing, RxFIFO Underflow and RxFIFO Level Interrupts*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1534      HwModulePtr->FLAGSCLEAR.U = (unsigned_int)((HwModulePtr->FLAGSCLEAR.U &\ 
	ld.w	d15,[a4]60
.L1215:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1535              UART_FLAGSCLEAR_PEC_CLEARMASK) | ((unsigned_int)UART_ENABLE_BIT << \ 
	insert	d15,d15,#1,#16,#1
	st.w	[a4]60,d15
.L1216:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1536                                                     UART_FLAGSCLEAR_PEC_BITPOS));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1537  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1538      HwModulePtr->FLAGSCLEAR.U = (unsigned_int)((HwModulePtr->FLAGSCLEAR.U &\ 
	ld.w	d15,[a4]60
.L1217:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1539              UART_FLAGSCLEAR_FEC_CLEARMASK) | ((unsigned_int)UART_ENABLE_BIT << \ 
	insert	d15,d15,#1,#18,#1
	st.w	[a4]60,d15
.L1218:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1540                                                     UART_FLAGSCLEAR_FEC_BITPOS));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1541  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1542      HwModulePtr->FLAGSCLEAR.U = (unsigned_int)((HwModulePtr->FLAGSCLEAR.U &\ 
	ld.w	d15,[a4]60
.L1219:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1543             UART_FLAGSCLEAR_RFLC_CLEARMASK) | ((unsigned_int)UART_ENABLE_BIT << \ 
	insert	d15,d15,#1,#28,#1
	st.w	[a4]60,d15
.L1220:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1544                                                    UART_FLAGSCLEAR_RFLC_BITPOS));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1545  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1546      HwModulePtr->FLAGSCLEAR.U = (unsigned_int)((HwModulePtr->FLAGSCLEAR.U &\ 
	ld.w	d15,[a4]60
.L1221:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1547             UART_FLAGSCLEAR_RFUC_CLEARMASK) | ((unsigned_int)UART_ENABLE_BIT << \ 
	insert	d15,d15,#1,#27,#1
	st.w	[a4]60,d15
.L1222:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1548                                                    UART_FLAGSCLEAR_RFUC_BITPOS));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1549    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1550    #if ((UART_RUNNING_IN_USER_0_MODE_ENABLE == STD_OFF) || \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1551        ((UART_USER_MODE_RUNTIME_API_ENABLE == STD_OFF) && \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1552        (UART_USER_MODE_DEINIT_API_ENABLE == STD_OFF)))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1553        UNUSED_PARAMETER(ApiAccessId)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1554        #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1555  }
	ret
.L592:
	
__Uart_lClearReadInterrupts_function_end:
	.size	Uart_lClearReadInterrupts,__Uart_lClearReadInterrupts_function_end-Uart_lClearReadInterrupts
.L271:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_Write')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	
	.global	Uart_Write

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1556  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1557  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1558  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1559  ** Traceability : [cover parentID=DS_NAS_UART_PR1572,DS_NAS_UART_PR63_9]      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1560  ** Syntax : Uart_ReturnType Uart_Write                                        **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1561  **  (                                                                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1562  **    Uart_ChannelIdType channel,Uart_MemPtrType MemPtr,Uart_SizeType Size    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1563  **  )                                                                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1564  **                    [/cover]                                                **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1565  ** Service ID:  0x03                                                          **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1566  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1567  ** Sync/Async:  Asynchronous                                                  **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1568  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1569  ** Reentrancy:  Reentrant  (Not for the same channel)                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1570  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1571  ** Parameters (in): Channel - Uart channel to be addressed                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1572  **                  MemPtr - Pointer to location where transmit data is stored**
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1573  **                  Size - No. of data bytes that needs to be transmitted     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1574  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1575  ** Parameters (out): None                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1576  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1577  ** Return value    : UART_OK - Write operation was initiaited successfully    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1578  **                   UART_NOT_OK - Write operation couldn't performed         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1579  **                                 due to developement error                  **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1580  **                   UART_IS_BUSY - Uart channel is busy with other           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1581  **                                  write operation                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1582  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1583  ** Description : Api to transmit data from user memory location(App Buffer)   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1584  **               on to the given channel                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1585  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1586  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1587  Uart_ReturnType Uart_Write\ 
; Function Uart_Write
.L136:
Uart_Write:	.type	func
	mov	d8,d4
	mov.aa	a12,a4
.L792:
	mov	d9,d5
.L803:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1588            (Uart_ChannelIdType Channel,Uart_MemPtrType MemPtr,Uart_SizeType Size)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1589  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1590    const Uart_ChannelType *ChannelConfigPtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1591    Ifx_ASCLIN* HwModulePtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1592    Uart_ReturnType Retvalue = UART_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1593    uint8 HwUnit;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1594  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1595   #if (UART_DEV_ERROR_DETECT != STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1596    uint32 ChTxLock;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1597   #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1598  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1599     #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1600  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1601     if (Uart_InitStatus == UART_UNINITIALISED)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1602     {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1603       /* If Uart is not initialised then report the DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1604       Det_ReportError(
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1605                       UART_MODULE_ID,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1606                       UART_MODULE_INSTANCE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1607                       UART_SID_WRITE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1608                       UART_E_UNINIT
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1609                      );
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1610       Retvalue = UART_NOT_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1611     }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1612     else if (MemPtr == NULL_PTR)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1613     {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1614       /* If the memory pointer passed is a Null Pointer report the DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1615       Det_ReportError(
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1616                       UART_MODULE_ID,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1617                       UART_MODULE_INSTANCE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1618                       UART_SID_WRITE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1619                       UART_E_PARAM_POINTER
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1620                      );
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1621       Retvalue = UART_NOT_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1622     }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1623     else if (Size == UART_ZERO_U )
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1624     {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1625       /* If the parameter Size is equal to zero Report to  DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1626       Det_ReportError(
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1627                       UART_MODULE_ID,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1628                       UART_MODULE_INSTANCE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1629                       UART_SID_WRITE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1630                       UART_E_INVALID_SIZE
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1631                      );
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1632       Retvalue = UART_NOT_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1633     }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1634     else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1635     {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1636       /* If the channelId is Invalid Report to DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1637       Retvalue = Uart_lChannelCheck(Channel,UART_SID_WRITE);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1638  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1639       if (Retvalue == UART_OK)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1640       {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1641         if (Uart_ChannelInfo[Channel].Uart_TxState != UART_INITIALISED)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1642         {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1643          /* If the channel is Busy(Read/Write on-going) Report to  DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1644          Det_ReportError(
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1645                          UART_MODULE_ID,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1646                          UART_MODULE_INSTANCE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1647                          UART_SID_WRITE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1648                          UART_E_STATE_TRANSITION
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1649                         );
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1650          Retvalue = UART_IS_BUSY;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1651         }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1652       }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1653     }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1654    #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1655  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1656    #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1657     if (Retvalue == UART_OK)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1658    #else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1659     /* The Uart Write operation is already started for the channel. No other
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1660        operation can be started on this Channel. This is implemented using a
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1661        binary semaphore mechanism*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1662     ChTxLock = Mcal_LockResource(&Uart_ChLock[UART_TX_LOCK_IDX][Channel]);
	mov	d10,#0
	fcall	.cocofun_14
.L945:
	addsc.a	a4,a2,d8,#2
.L789:
	call	Mcal_LockResource
.L788:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1663  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1664     /* No other Uart Write operation is in progress */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1665     if (ChTxLock == MCAL_RESOURCE_BUSY)
	jne	d2,#1,.L45
.L946:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1666     {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1667          Retvalue = UART_IS_BUSY;
	mov	d10,#2
	j	.L46
.L45:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1668     }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1669     else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1670    #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1671     {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1672     /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1673       ChannelConfigPtr to access the Configuration of Channel passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1674     ChannelConfigPtr = &(Uart_kConfigPtr->ChannelConfigPtr[Channel]);
	ld.a	a2,Uart_kConfigPtr
.L947:
	ld.a	a2,[a2]
.L948:
	sha	d15,d8,#5
.L949:
	addsc.a	a2,a2,d15,#0
.L791:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1675      /*Update driver state in Uart_ChannelInfo as Write Operation*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1676     Uart_ChannelInfo[Channel].Uart_TxState= UART_OPERATION_IN_PROGRESS;
	mul	d15,d8,#20
	fcall	.cocofun_25
.L950:
	addsc.a	a4,a15,d15,#0
.L951:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1677  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1678     /* Extract asssigned HWUnit module ptr */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1679     HwUnit = Uart_ChannelInfo[Channel].Uart_AssignedHW;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1680    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1681     UART_HW_MODULE to access the SFRs of a particular HW Unit*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1682     HwModulePtr= &(UART_HW_MODULE[HwUnit]);
	mov	d15,#2
	lea	a15,0xf0000600
.L952:
	st.b	[a4]8,d15
.L953:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1683  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1684     /* Set TX FIFO Inlet width */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1685     UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->TXFIFOCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1686                UART_TXFIFOCON_INW_CLEARMASK, UART_TXFIFOCONREG_INW_VAL << \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1687                                                        UART_TXFIFOCON_INW_BITPOS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1688     /* Set TX Datalength */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1689     UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->DATCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1690                                         UART_DATCON_DATLEN_CLEARMASK,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1691                           ((uint32)ChannelConfigPtr->DataLength - UART_ONE_U))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1692  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1693     /*Update Tx BuffPtr,size in Uart_ChannelInfo for Write Operation*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1694     Uart_ChannelInfo[Channel].Uart_TxBuffPtr= MemPtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1695     Uart_ChannelInfo[Channel].Uart_TxDataLeft = Size;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1696     Uart_ChannelInfo[Channel].Uart_TotalDataTxd = UART_ZERO_U;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1697  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1698     /* Flush TX FIFO */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1699      UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->TXFIFOCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1700                                UART_TXFIFOCON_FLUSH_CLEARMASK, UART_ENABLE_BIT)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1701  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1702     /*local function to copy the Tx data to FIFO*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1703     Uart_lWrite(HwModulePtr,Channel);
	mov	d4,d8
.L794:
	ld.bu	d11,[a4]18
.L802:
	sha	d15,d11,#8
.L954:
	addsc.a	a15,a15,d15,#0
.L466:
	ld.w	d15,[a15]12
	insert	d15,d15,#1,#6,#2
	st.w	[a15]12,d15
.L467:
	ld.w	d15,[a15]28
.L795:
	ld.bu	d0,[a2]25
	insert	d15,d15,#0,#0,#4
	add	d0,#-1
.L796:
	or	d15,d0
	st.w	[a15]28,d15
.L469:
	st.a	[a4]4,a12
.L955:
	mov	d15,#0
	st.h	[a4]10,d9
.L797:
	lea	a12,[a4]14
.L793:
	st.h	[a12],d15
.L956:
	mov.aa	a4,a15
.L471:
	ld.w	d15,[a15]12
.L798:
	or	d15,#1
	st.w	[a15]12,d15
.L472:
	call	Uart_lWrite
.L790:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1704  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1705     /*Check if only one data needs to be txd*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1706     if (Size == UART_ONE_U )
	jne	d9,#1,.L47
.L475:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1707     {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1708       /*Clear the Tx Complete flag*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1709       UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FLAGSCLEAR.U,\ 
	fcall	.cocofun_18
.L476:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1710                                            UART_FLAGSCLEAR_TCC_CLEARMASK,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1711                          ((uint32)UART_ENABLE_BIT << UART_FLAGSCLEAR_TCC_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1712       /*Enable the Tx Complete flag*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1713       UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FLAGSENABLE.U,\ 
	insert	d15,d15,#1,#17,#1
	st.w	[a15]64,d15
.L478:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1714                                           UART_FLAGSENABLE_TCE_CLEARMASK,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1715                         ((uint32)UART_ENABLE_BIT << UART_FLAGSENABLE_TCE_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1716       Uart_ChannelInfo[Channel].Uart_TotalDataTxd = UART_ONE_U;
	mov	d15,#1
	st.h	[a12],d15
.L804:
	j	.L48
.L47:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1717     }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1718     else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1719     {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1720       /*Enable Tx and Err Interrupts*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1721       Uart_lEnableWriteInterrupts(HwModulePtr, UART_RUNTIME_ACCESS);
	mov	d4,#3
	mov.aa	a4,a15
.L805:
	call	Uart_lEnableWriteInterrupts
.L806:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1722       Uart_lHwEnableAscLinTxIntr(HwUnit);
	mov	d4,d11
	call	Uart_lHwEnableAscLinTxIntr
.L48:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1723     }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1724  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1725     Uart_lHwEnableAscLinErrIntr(HwUnit);
	mov	d4,d11
	call	Uart_lHwEnableAscLinErrIntr
.L480:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1726  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1727     /*Enable the Tx FIFO*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1728     UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->TXFIFOCON.U,\ 
	ld.w	d15,[a15]12
.L807:
	or	d15,#2
	st.w	[a15]12,d15
.L46:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1729       UART_TXFIFOCON_ENO_CLEARMASK, UART_ENABLE_BIT << UART_TXFIFOCON_ENO_BITPOS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1730    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1731    return Retvalue;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1732  }
	mov	d2,d10
	ret
.L457:
	
__Uart_Write_function_end:
	.size	Uart_Write,__Uart_Write_function_end-Uart_Write
.L201:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_18')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_18
.L138:
.cocofun_18:	.type	func
; Function body .cocofun_18, coco_iter:0
	fcall	.cocofun_24
.L801:
	ld.w	d15,[a15]64
.L1321:
	fret
.L361:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_24')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_24
.L140:
.cocofun_24:	.type	func
; Function body .cocofun_24, coco_iter:1
	ld.w	d15,[a15]60
.L800:
	insert	d15,d15,#1,#17,#1
	st.w	[a15]60,d15
.L799:
	fret
.L391:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_lWrite')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1733  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1734  ** Syntax : static void Uart_lWrite                                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1735  **  (                                                                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1736  **    Ifx_ASCLIN* HwModulePtr,Uart_ChannelIdType Channel                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1737  **  )                                                                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1738  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1739  ** Service ID:  NA                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1740  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1741  ** Sync/Async:  Synchronous                                                   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1742  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1743  ** Reentrancy:      reentrant                                                 **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1744  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1745  ** Parameters (in): Channel - Uart channel to be addressed                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1746  **                  HwModulePtr - Asclin Hardware Pointer                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1747  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1748  ** Parameters (out): None                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1749  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1750  ** Return value    : None                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1751  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1752  ** Description : local function to copy the transmit data from specified      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1753  **               memory location(App buffer) to TX FIFO Buffer                **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1754  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1755  static void Uart_lWrite(Ifx_ASCLIN* HwModulePtr,Uart_ChannelIdType Channel)
; Function Uart_lWrite
.L142:
Uart_lWrite:	.type	func

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1756  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1757    Uart_MemPtrType BuffPtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1758    uint16 Write_Count =UART_ZERO_U;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1759    uint8 Uartdata = UART_ZERO_U;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1760    uint8 UartDatalen ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1761  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1762    BuffPtr = Uart_ChannelInfo[Channel].Uart_TxBuffPtr;
	fcall	.cocofun_12
.L808:
	mov.aa	a2,a15
	ld.a	a5,[+a2]4
.L809:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1763    Uart_ChannelInfo[Channel].Uart_TxDataCopyCntr = UART_ZERO_U;
	mov	d15,#0
	st.b	[a15]19,d15
.L1170:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1764  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1765    if (Uart_ChannelInfo[Channel].Uart_TxDataLeft == UART_STEPSIZE)
	ld.hu	d15,[a15]10
.L1171:
	jne	d15,#1,.L50
.L1172:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1766    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1767       /*Set the Write byte Count to copy the last data*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1768      Write_Count = UART_STEPSIZE;
	mov	d0,#1
	j	.L51
.L50:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1769    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1770    else if (Uart_ChannelInfo[Channel].Uart_TxDataLeft <= UART_BUFFER_SIZE)
	mov	d0,#16
.L1173:
	jlt.u	d0,d15,.L52
.L1174:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1771    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1772      /*Set the Write byte Count to copy the Data left minus last data*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1773      Write_Count = (Uart_ChannelInfo[Channel].Uart_TxDataLeft - UART_STEPSIZE);
	add	d15,#-1
	extr.u	d0,d15,#0,#16
.L52:
.L51:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1774    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1775    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1776    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1777     /*Set the data copy  byte Count to Tx Fifo Buff Size */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1778      Write_Count = UART_BUFFER_SIZE;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1779    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1780  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1781    while (Write_Count > UART_ZERO_U)
	mov	d2,#0
.L1175:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1782    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1783       UartDatalen = ((uint8)(UART_SFR_RUNTIME_USER_MODE_READ32\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1784                 (HwModulePtr->DATCON.U) & UART_DATCON_DATLEN_MASK) + UART_ONE_U);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1785  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1786     /*Check if the data to Write is the last one and datalen is 7/8*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1787       if ((Uart_ChannelInfo[Channel].Uart_TxDataLeft == UART_ONE_U) &&\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1788                          (UartDatalen !=UART_NINEBIT_DATLEN))
	mov	d3,#9
	j	.L54
.L55:
	ld.w	d15,[a4]28
.L1176:
	ld.hu	d1,[a15]10
.L1177:
	and	d15,#15
.L810:
	add	d15,#1
.L1178:
	jne	d1,#1,.L56
.L1179:
	jeq	d15,d3,.L57
.L572:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1789       {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1790         /* Set TX FIFO Inlet width to One as one byte TX data is there*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1791         UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->TXFIFOCON.U,\ 
	ld.w	d15,[a4]12
.L811:
	insert	d15,d15,#1,#6,#2
	st.w	[a4]12,d15
.L573:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1792           UART_TXFIFOCON_INW_CLEARMASK, UART_ONE_U << UART_TXFIFOCON_INW_BITPOS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1793  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1794         /*Copy the data from the mem to Tx FIFO buffer*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1795         Uartdata = *((uint8*)(void*)BuffPtr) ;
	ld.bu	d0,[a5+]
.L1180:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1796         UART_SFR_RUNTIME_USER_MODE_WRITE32(HwModulePtr->TXDATA.U, Uartdata);
	st.w	[a4]68,d0
.L1181:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1797         /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1798          BuffPtr to access next element of Application Data Buffer*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1799         BuffPtr++;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1800  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1801       /*Reset Data Copy counter and Tx Data left cntr to one as Tx is complete*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1802         Uart_ChannelInfo[Channel].Uart_TxDataLeft = UART_ZERO_U;
	st.h	[a15]10,d2
.L1182:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1803         Uart_ChannelInfo[Channel].Uart_TxDataCopyCntr += UART_ONE_U;
	ld.bu	d0,[a15]19
.L1183:
	add	d0,#1
	st.b	[a15]19,d0
.L1184:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1804  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1805         /* Reset Write count as Tx is complete*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1806         Write_Count = UART_ZERO_U;
	mov	d0,#0
	j	.L58
.L57:
.L56:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1807       }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1808       else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1809       {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1810         /*Copy the data from the mem to Tx FIFO buffer*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1811         UART_SFR_RUNTIME_USER_MODE_WRITE32(HwModulePtr->TXDATA.U, *( BuffPtr));
	ld.bu	d1,[a5+]
	st.w	[a4]68,d1
.L813:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1812         /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1813          BuffPtr to access next element of Application Data Buffer*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1814         BuffPtr++;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1815  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1816     /*Decrement TxData Left Cntr and increment TxData Copy cntr by step size*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1817         Uart_ChannelInfo[Channel].Uart_TxDataLeft -= UART_STEPSIZE;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1818         Uart_ChannelInfo[Channel].Uart_TxDataCopyCntr += UART_STEPSIZE;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1819  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1820         /*Decrement the Data copy counter by step size(i.e. one Data Count)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1821         Write_Count = Write_Count - UART_STEPSIZE;
	add	d0,#-1
.L1185:
	ld.hu	d1,[a15]10
.L1186:
	add	d15,d1,#-1
	st.h	[a15]10,d15
.L812:
	ld.bu	d1,[a15]19
.L1187:
	add	d1,#1
	st.b	[a15]19,d1
.L58:
.L54:
	jne	d0,#0,.L55
.L814:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1822       }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1823    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1824  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1825    Uart_ChannelInfo[Channel].Uart_TxBuffPtr = BuffPtr;
	st.a	[a2],a5
.L1188:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1826    return ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1827  }
	ret
.L566:
	
__Uart_lWrite_function_end:
	.size	Uart_lWrite,__Uart_lWrite_function_end-Uart_lWrite
.L251:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_lEnableWriteInterrupts')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1828  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1829  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1830  ** Syntax : static void Uart_lEnableWriteInterrupts                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1831  **                   ( Ifx_ASCLIN* HwModulePtr,uint8 ApiAccessId)             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1832  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1833  ** Service ID:  NA                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1834  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1835  ** Sync/Async:  Synchronous                                                   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1836  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1837  ** Reentrancy:      reentrant                                                 **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1838  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1839  ** Parameters (in):   HwModulePtr - Asclin Hardware Pointer                   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1840  **                :   ApiAccessId - API Access type                           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1841  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1842  ** Parameters (out): None                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1843  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1844  ** Return value    : None                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1845  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1846  ** Description : Local function to Enable Interrupts for Write Operation      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1847  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1848  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1849  static void Uart_lEnableWriteInterrupts(Ifx_ASCLIN* HwModulePtr,\ 
; Function Uart_lEnableWriteInterrupts
.L144:
Uart_lEnableWriteInterrupts:	.type	func

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1850                                                               uint8 ApiAccessId)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1851  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1852  #if ((UART_USER_MODE_RUNTIME_API_ENABLE == STD_ON) && \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1853                                   (UART_RUNNING_IN_USER_0_MODE_ENABLE == STD_ON))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1854    if (ApiAccessId == UART_RUNTIME_ACCESS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1855    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1856      /*Set Tx FIFO Int level and Enable Tx FIFO overflow and Level flags*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1857      UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->TXFIFOCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1858                                 UART_TXFIFOCON_INTLEVEL_CLEARMASK, UART_ZERO_U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1859  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1860      UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FLAGSENABLE.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1861                                         UART_FLAGSENABLE_TFLE_CLEARMASK,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1862                        ((uint32)UART_ENABLE_BIT << UART_FLAGSENABLE_TFLE_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1863  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1864      UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FLAGSENABLE.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1865                                          UART_FLAGSENABLE_TFOE_CLEARMASK,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1866                        ((uint32)UART_ENABLE_BIT << UART_FLAGSENABLE_TFOE_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1867    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1868    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1869  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1870    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1871      /*Set Tx FIFO Int level and Enable Tx FIFO overflow and Level flags*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1872      HwModulePtr->TXFIFOCON.U = (unsigned_int)((HwModulePtr->TXFIFOCON.U &\ 
	ld.w	d15,[a4]12
.L1197:
	insert	d15,d15,#0,#8,#4
	st.w	[a4]12,d15
.L1198:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1873                                UART_TXFIFOCON_INTLEVEL_CLEARMASK) | UART_ZERO_U);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1874  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1875      HwModulePtr->FLAGSENABLE.U = (unsigned_int)((HwModulePtr->FLAGSENABLE.U &\ 
	ld.w	d15,[a4]64
.L1199:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1876                                         UART_FLAGSENABLE_TFLE_CLEARMASK) |\ 
	insert	d15,d15,#1,#31,#1
.L1200:
	fcall	.cocofun_15
.L1201:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1877                 ((unsigned_int)UART_ENABLE_BIT << UART_FLAGSENABLE_TFLE_BITPOS));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1878  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1879      HwModulePtr->FLAGSENABLE.U = (unsigned_int)((HwModulePtr->FLAGSENABLE.U &\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1880                                          UART_FLAGSENABLE_TFOE_CLEARMASK) |\ 
	insert	d15,d15,#1,#30,#1
	st.w	[a4]64,d15
.L1202:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1881                 ((unsigned_int)UART_ENABLE_BIT << UART_FLAGSENABLE_TFOE_BITPOS));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1882    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1883  #if ((UART_USER_MODE_RUNTIME_API_ENABLE == STD_OFF) || \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1884                                 (UART_RUNNING_IN_USER_0_MODE_ENABLE == STD_OFF))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1885      UNUSED_PARAMETER(ApiAccessId)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1886  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1887  }
	ret
.L586:
	
__Uart_lEnableWriteInterrupts_function_end:
	.size	Uart_lEnableWriteInterrupts,__Uart_lEnableWriteInterrupts_function_end-Uart_lEnableWriteInterrupts
.L261:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_lClearWriteInterrupts')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1888  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1889  ** Syntax : static void Uart_lClearWriteInterrupts                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1890  **                   ( Ifx_ASCLIN* HwModulePtr,uint8 ApiAccessId)             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1891  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1892  ** Service ID:  NA                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1893  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1894  ** Sync/Async:  Synchronous                                                   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1895  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1896  ** Reentrancy:      reentrant                                                 **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1897  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1898  ** Parameters (in):   HwModulePtr - Asclin Hardware Pointer                   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1899  **                    ApiAccessId - Describes the API access type             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1900  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1901  ** Parameters (out): None                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1902  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1903  ** Return value    : None                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1904  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1905  ** Description : Local function to Disable Interrupts for Write operation     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1906  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1907  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1908  static void Uart_lClearWriteInterrupts(Ifx_ASCLIN* HwModulePtr,\ 
; Function Uart_lClearWriteInterrupts
.L146:
Uart_lClearWriteInterrupts:	.type	func

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1909                                                                uint8 ApiAccessId)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1910  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1911    #if (UART_RUNNING_IN_USER_0_MODE_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1912    #if (UART_USER_MODE_RUNTIME_API_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1913    if (ApiAccessId == UART_RUNTIME_ACCESS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1914    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1915      /*Clear Tx FIFO overflow and Level flags*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1916      UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FLAGSCLEAR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1917                     UART_FLAGSCLEAR_TFLC_CLEARMASK,(uint32)UART_ENABLE_BIT <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1918                                                      UART_FLAGSCLEAR_TFLC_BITPOS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1919      
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1920      UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->FLAGSCLEAR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1921                   UART_FLAGSCLEAR_TFOC_CLEARMASK,((uint32)UART_ENABLE_BIT <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1922                                                     UART_FLAGSCLEAR_TFOC_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1923    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1924    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1925    #endif /*(UART_USER_MODE_RUNTIME_API_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1926    #if (UART_USER_MODE_DEINIT_API_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1927    if (ApiAccessId == UART_DEINIT_ACCESS)  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1928    {  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1929      /*Clear Tx FIFO overflow and Level flags*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1930      UART_SFR_DEINIT_USER_MODE_MODIFY32(HwModulePtr->FLAGSCLEAR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1931                     UART_FLAGSCLEAR_TFLC_CLEARMASK,(uint32)UART_ENABLE_BIT <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1932                                                     UART_FLAGSCLEAR_TFLC_BITPOS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1933    
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1934      UART_SFR_DEINIT_USER_MODE_MODIFY32(HwModulePtr->FLAGSCLEAR.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1935                   UART_FLAGSCLEAR_TFOC_CLEARMASK,((uint32)UART_ENABLE_BIT <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1936                                                    UART_FLAGSCLEAR_TFOC_BITPOS))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1937    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1938    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1939    #endif /*(UART_USER_MODE_DEINIT_API_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1940    #endif /*(UART_RUNNING_IN_USER_0_MODE_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1941    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1942      HwModulePtr->FLAGSCLEAR.U = (unsigned_int)((HwModulePtr->FLAGSCLEAR.U &\ 
	ld.w	d15,[a4]60
.L1207:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1943            UART_FLAGSCLEAR_TFLC_CLEARMASK) | ((unsigned_int)UART_ENABLE_BIT <<\ 
	insert	d15,d15,#1,#31,#1
	st.w	[a4]60,d15
.L1208:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1944                                                   UART_FLAGSCLEAR_TFLC_BITPOS));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1945      HwModulePtr->FLAGSCLEAR.U = (unsigned_int)((HwModulePtr->FLAGSCLEAR.U &\ 
	ld.w	d15,[a4]60
.L1209:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1946           UART_FLAGSCLEAR_TFOC_CLEARMASK) | ((unsigned_int)UART_ENABLE_BIT <<\ 
	insert	d15,d15,#1,#30,#1
	st.w	[a4]60,d15
.L1210:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1947                                                    UART_FLAGSCLEAR_TFOC_BITPOS));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1948    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1949    #if((UART_RUNNING_IN_USER_0_MODE_ENABLE == STD_OFF) || \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1950     ((UART_USER_MODE_RUNTIME_API_ENABLE == STD_OFF) && \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1951     (UART_USER_MODE_DEINIT_API_ENABLE == STD_OFF)))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1952     UNUSED_PARAMETER(ApiAccessId)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1953     #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1954  }
	ret
.L589:
	
__Uart_lClearWriteInterrupts_function_end:
	.size	Uart_lClearWriteInterrupts,__Uart_lClearWriteInterrupts_function_end-Uart_lClearWriteInterrupts
.L266:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_AbortRead')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	
	.global	Uart_AbortRead

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1955  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1956   #if (UART_ABORT_READ_API == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1957  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1958  ** Traceability : [cover parentID=DS_NAS_UART_PR1573,DS_NAS_UART_PR63_10]     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1959  ** Syntax : Uart_SizeType Uart_AbortRead( Uart_ChannelIdType Channel )        **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1960  **              [/cover]                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1961  ** Service ID:  0x04                                                          **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1962  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1963  ** Sync/Async:  Synchronous                                                   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1964  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1965  ** Reentrancy:  Reentrant  (Not for the same channel)                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1966  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1967  ** Parameters (in): Channel - Uart channel to be addressed                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1968  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1969  ** Parameters (out): None                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1970  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1971  ** Return value  : UartRetSize - Number of bytes that have been successfully  **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1972  **                               recieved and stored to the memory location   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1973  **                               before the read operation was aborted        **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1974  ** Description : Api to Abort the read operation on the specified channel     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1975  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1976  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1977  Uart_SizeType Uart_AbortRead(Uart_ChannelIdType  Channel)
; Function Uart_AbortRead
.L148:
Uart_AbortRead:	.type	func

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1978  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1979    Ifx_ASCLIN* HwModulePtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1980    const Uart_ChannelType *ChannelConfigPtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1981    Uart_SizeType UartRetSize = UART_ZERO_U ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1982    uint8 HwUnit;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1983  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1984    #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1985    Uart_ReturnType Retvalue = UART_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1986  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1987    if (Uart_InitStatus == UART_UNINITIALISED)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1988    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1989      /* If uart is not uninitialised Report to  DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1990      Det_ReportError(
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1991                      UART_MODULE_ID,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1992                      UART_MODULE_INSTANCE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1993                      UART_SID_ABORT_READ,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1994                      UART_E_UNINIT
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1995                     );
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1996      Retvalue = UART_NOT_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1997      UartRetSize = UART_ZERO_U ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1998    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  1999    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2000    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2001      /* If the channelId is Invalid Report to DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2002      Retvalue = Uart_lChannelCheck(Channel,UART_SID_ABORT_READ);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2003      UartRetSize = UART_ZERO_U ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2004    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2005    #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2006  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2007    #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2008    if (Retvalue == UART_OK)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2009    #else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2010     /* Release the lock so that New Uart Read Operation can be started*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2011    Mcal_UnlockResource(&Uart_ChLock[UART_RX_LOCK_IDX][Channel]);
	mov	d9,d4
	fcall	.cocofun_23
.L961:
	addsc.a	a15,a15,d9,#2
	lea	a4,[a15]12
	call	Mcal_UnlockResource
.L815:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2012    #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2013    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2014      HwUnit = Uart_ChannelInfo[Channel].Uart_AssignedHW;
	mul	d15,d9,#20
.L962:
	fcall	.cocofun_21
.L963:
	ld.bu	d10,[a15]18
.L817:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2015    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2016     UART_HW_MODULE to access the SFRs of a particular HW Unit*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2017      HwModulePtr= &(UART_HW_MODULE[HwUnit]);
	lea	a2,0xf0000600
.L964:
	sha	d15,d10,#8
.L965:
	addsc.a	a4,a2,d15,#0
.L818:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2018  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2019      /*Disable RxFIFO and flush It*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2020      UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->RXFIFOCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2021                               UART_RXFIFOCON_ENI_CLEARMASK, UART_DISABLE_BIT)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2022      UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->RXFIFOCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2023                            UART_RXFIFOCON_FLUSH_CLEARMASK, UART_ENABLE_BIT)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2024  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2025      /*Clear Rx overflow and level Interrupts*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2026      Uart_lClearReadInterrupts(HwModulePtr, UART_RUNTIME_ACCESS);
	mov	d4,#3
.L488:
	ld.w	d15,[a4]16
	insert	d15,d15,#0,#1,#1
	st.w	[a4]16,d15
.L489:
	ld.w	d15,[a4]16
.L820:
	or	d15,#1
	st.w	[a4]16,d15
.L491:
	call	Uart_lClearReadInterrupts
.L819:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2027  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2028      /*Disable Rx and Err Interrupts*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2029      Uart_lHwDisableAscLinRxIntr(HwUnit, UART_RUNTIME_ACCESS);
	mov	d5,#3
	mov	d4,d10
	call	Uart_lHwDisableAscLinRxIntr
.L966:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2030      Uart_lHwDisableAscLinErrIntr(HwUnit, UART_RUNTIME_ACCESS);
	mov	d5,#3
	mov	d4,d10
	call	Uart_lHwDisableAscLinErrIntr
.L967:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2031  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2032      /*Return Total Data Rxd before Read operation was Aborted */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2033      UartRetSize = Uart_ChannelInfo[Channel].Uart_TotalDataRxd;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2034  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2035     /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2036       ChannelConfigPtr to access the Configuration of Channel passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2037      ChannelConfigPtr = &(Uart_kConfigPtr->ChannelConfigPtr[Channel]);
	ld.a	a2,Uart_kConfigPtr
.L968:
	sha	d9,#5
	ld.hu	d8,[a15]16
.L816:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2038     /*Reinitialise the HW Unit*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2039      Uart_lHwInitRuntime(HwUnit, ChannelConfigPtr);
	mov	d4,d10
.L822:
	ld.a	a2,[a2]
.L969:
	addsc.a	a12,a2,d9,#0
.L824:
	mov.aa	a4,a12
.L825:
	call	Uart_lHwInitRuntime
.L823:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2040  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2041      /*Reset Uart_ChannelInfo*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2042      Uart_ChannelInfo[Channel].Uart_RxState = UART_INITIALISED;
	mov	d15,#1
	st.b	[a15]9,d15
.L821:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2043      Uart_ChannelInfo[Channel].Uart_RxBuffPtr = NULL_PTR;
	mov.a	a2,#0
.L970:
	st.a	[a15],a2
.L971:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2044  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2045      /*Reset Data Rxd Counter*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2046      Uart_ChannelInfo[Channel].Uart_TotalDataRxd = UART_ZERO_U;
	mov	d4,#0
	st.h	[a15]16,d4
.L972:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2047  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2048      if(ChannelConfigPtr->UartNotif.UartAbortReceiveNotifPtr != NULL_PTR)
	ld.a	a15,[a12]12
.L973:
	jz.a	a15,.L59
.L974:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2049      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2050        /*Call Abort Receive Notification Function*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2051        ChannelConfigPtr->UartNotif.UartAbortReceiveNotifPtr(UART_NO_ERR);
	calli	a15
.L59:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2052      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2053    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2054    return UartRetSize ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2055  }
	mov	d2,d8
	ret
.L482:
	
__Uart_AbortRead_function_end:
	.size	Uart_AbortRead,__Uart_AbortRead_function_end-Uart_AbortRead
.L206:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_AbortWrite')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	
	.global	Uart_AbortWrite

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2056  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2057  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2058  #if (UART_ABORT_WRITE_API == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2059  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2060  ** Traceability : [cover parentID=DS_NAS_UART_PR1574,DS_NAS_UART_PR63_11]     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2061  ** Syntax : Uart_SizeType Uart_AbortWrite( Uart_ChannelIdType Channel )       **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2062  **            [/cover]                                                        **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2063  ** Service ID:  0x05                                                          **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2064  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2065  ** Sync/Async:  Synchronous                                                   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2066  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2067  ** Reentrancy:  Reentrant  (Not for the same channel)                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2068  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2069  ** Parameters (in): Channel - Uart channel to be addressed                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2070  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2071  ** Parameters (out): None                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2072  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2073  ** Return value  : UartRetSize - Number of bytes that have been successfully  **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2074  **                       transmitted before the write operation was aborted   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2075  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2076  ** Description : Api to Abort Transmission of data on the specified channel   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2077  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2078  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2079  Uart_SizeType Uart_AbortWrite(Uart_ChannelIdType Channel)
; Function Uart_AbortWrite
.L150:
Uart_AbortWrite:	.type	func
	mov	d8,d4
.L829:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2080  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2081    Ifx_ASCLIN* HwModulePtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2082    const Uart_ChannelType *ChannelConfigPtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2083    Uart_SizeType UartRetSize = UART_ZERO_U;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2084    uint16 tempsum;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2085    uint8 HwUnit;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2086  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2087     #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2088     Uart_ReturnType Retvalue;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2089     #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2090  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2091    #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2092    if (Uart_InitStatus == UART_UNINITIALISED)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2093    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2094      /* Report to  DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2095      Det_ReportError(
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2096                      UART_MODULE_ID,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2097                      UART_MODULE_INSTANCE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2098                      UART_SID_ABORT_WRITE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2099                      UART_E_UNINIT
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2100                     );
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2101      Retvalue = UART_NOT_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2102      UartRetSize = UART_ZERO_U;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2103    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2104    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2105    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2106      /* If the channelId is Invalid Report to DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2107      Retvalue = Uart_lChannelCheck(Channel,UART_SID_ABORT_WRITE);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2108      UartRetSize = UART_ZERO_U;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2109    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2110  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2111    if (Retvalue == UART_OK)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2112    #else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2113     /* Release the lock so that New Uart Write Operation can be started*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2114    Mcal_UnlockResource(&Uart_ChLock[UART_TX_LOCK_IDX][Channel]);
	fcall	.cocofun_19
.L979:
	call	Mcal_UnlockResource
.L827:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2115    #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2116    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2117  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2118     /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2119       ChannelConfigPtr to access the Configuration of Channel passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2120      ChannelConfigPtr = &(Uart_kConfigPtr->ChannelConfigPtr[Channel]);
	ld.a	a15,Uart_kConfigPtr
.L980:
	ld.a	a15,[a15]
.L981:
	sha	d15,d8,#5
.L982:
	addsc.a	a13,a15,d15,#0
.L831:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2121      HwUnit = Uart_ChannelInfo[Channel].Uart_AssignedHW;
	mul	d15,d8,#20
	fcall	.cocofun_20
.L983:
	addsc.a	a15,a2,d15,#0
.L984:
	ld.bu	d8,[a15]18
.L830:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2122    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2123     UART_HW_MODULE to access the SFRs of a particular HW Unit*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2124      HwModulePtr= &(UART_HW_MODULE[HwUnit]);
	lea	a2,0xf0000600
.L985:
	sha	d15,d8,#8
.L986:
	addsc.a	a4,a2,d15,#0
.L501:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2125  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2126      /*Disable TxFIFO*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2127      UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->TXFIFOCON.U,\ 
	ld.w	d15,[a4]12
	insert	d15,d15,#0,#1,#1
	st.w	[a4]12,d15
.L502:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2128                                UART_TXFIFOCON_ENO_CLEARMASK, UART_DISABLE_BIT)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2129  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2130     if((Uart_ChannelInfo[Channel].Uart_TxState == UART_INITIALISED) &&\ 
	lea	a12,[a15]8
	ld.bu	d15,[a12]
.L833:
	jne	d15,#1,.L61
.L987:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2131           (Uart_ChannelInfo[Channel].Uart_TxDataLeft == UART_ZERO_U))
	ld.hu	d15,[a15]10
.L988:
	jne	d15,#0,.L62
.L989:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2132      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2133         /*Reset Txd Data Fill to zero*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2134         Uart_ChannelInfo[Channel].Uart_TxDataCopyCntr = UART_ZERO_U;
	st.b	[a15]19,d15
.L62:
.L61:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2135      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2136  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2137      /*Return the Count of Data Txd before the write operation was aborted*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2138      tempsum =(uint16)Uart_ChannelInfo[Channel].Uart_TxDataCopyCntr -\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2139          ((uint16)((UART_SFR_RUNTIME_USER_MODE_READ32(HwModulePtr->TXFIFOCON.U)\ 
	ld.w	d15,[a4]12
.L990:
	ld.bu	d0,[a15]19
.L991:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2140                     & UART_TXFIFOCON_FILL_MASK) >> UART_TXFIFOCON_FILL_BITPOS));
	extr.u	d15,d15,#16,#5
.L992:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2141      Uart_ChannelInfo[Channel].Uart_TotalDataTxd += tempsum;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2142  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2143      UartRetSize = Uart_ChannelInfo[Channel].Uart_TotalDataTxd;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2144  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2145     /*Flush TxFIFO*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2146      UART_SFR_RUNTIME_USER_MODE_MODIFY32(HwModulePtr->TXFIFOCON.U,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2147                               UART_TXFIFOCON_FLUSH_CLEARMASK, UART_ENABLE_BIT )
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2148  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2149     /*Clear Tx overflow and level Interrupts*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2150      Uart_lClearWriteInterrupts(HwModulePtr, UART_RUNTIME_ACCESS);
	mov	d4,#3
.L834:
	sub	d0,d15
	ld.hu	d15,[a15]14
.L993:
	add	d15,d0
	st.h	[a15]14,d15
.L505:
	ld.w	d15,[a4]12
.L506:
	ld.hu	d9,[a15]14
.L507:
	or	d15,#1
	st.w	[a4]12,d15
.L508:
	call	Uart_lClearWriteInterrupts
.L832:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2151  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2152     /*Disable Tx and Err Interrupts*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2153      Uart_lHwDisableAscLinTxIntr(HwUnit, UART_RUNTIME_ACCESS);
	mov	d5,#3
	mov	d4,d8
	call	Uart_lHwDisableAscLinTxIntr
.L994:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2154      Uart_lHwDisableAscLinErrIntr(HwUnit, UART_RUNTIME_ACCESS);
	mov	d5,#3
	mov	d4,d8
	call	Uart_lHwDisableAscLinErrIntr
.L995:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2155  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2156     /*Reinitialise the HW Unit*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2157      Uart_lHwInitRuntime(HwUnit, ChannelConfigPtr);
	mov	d4,d8
	mov.aa	a4,a13
.L836:
	call	Uart_lHwInitRuntime
.L837:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2158  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2159     /*Reset Uart_ChannelInfo*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2160      Uart_ChannelInfo[Channel].Uart_TxBuffPtr = NULL_PTR;
	mov.a	a2,#0
.L996:
	st.a	[a15]4,a2
.L997:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2161      Uart_ChannelInfo[Channel].Uart_TxState = UART_INITIALISED;
	mov	d15,#1
	st.b	[a12],d15
.L835:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2162      Uart_ChannelInfo[Channel].Uart_TotalDataTxd = UART_ZERO_U;
	mov	d4,#0
	st.h	[a15]14,d4
.L998:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2163      Uart_ChannelInfo[Channel].Uart_TxDataCopyCntr = UART_ZERO_U;
	st.b	[a15]19,d4
.L999:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2164  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2165      if(ChannelConfigPtr->UartNotif.UartAbortTransmitNotifPtr != NULL_PTR)
	ld.a	a15,[a13]8
.L1000:
	jz.a	a15,.L63
.L1001:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2166      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2167        /*Call Abort Transmit Notification Function*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2168        ChannelConfigPtr->UartNotif.UartAbortTransmitNotifPtr(UART_NO_ERR);
	calli	a15
.L63:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2169      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2170     }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2171    return UartRetSize;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2172  }
	mov	d2,d9
	ret
.L493:
	
__Uart_AbortWrite_function_end:
	.size	Uart_AbortWrite,__Uart_AbortWrite_function_end-Uart_AbortWrite
.L211:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_20')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_20
.L152:
.cocofun_20:	.type	func
; Function body .cocofun_20, coco_iter:0
	movh.a	a2,#@his(Uart_ChannelInfo)
.L828:
	lea	a2,[a2]@los(Uart_ChannelInfo)
.L1331:
	fret
.L371:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_19')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_19
.L154:
.cocofun_19:	.type	func
; Function body .cocofun_19, coco_iter:0
	fcall	.cocofun_23
.L826:
	addsc.a	a4,a15,d8,#2
.L1326:
	fret
.L366:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_GetStatus')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	
	.global	Uart_GetStatus

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2173  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2174  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2175  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2176  ** Traceability : [cover parentID=DS_NAS_UART_PR1575,DS_NAS_UART_PR63_12]     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2177  ** Syntax : Uart_StatusType Uart_GetStatus(Uart_ChannelIdType Channel)        **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2178  **            [/cover]                                                        **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2179  ** Service ID:      0x06                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2180  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2181  ** Sync/Async:      Synchronous                                               **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2182  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2183  ** Reentrancy:      Re-entrant                                                **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2184  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2185  ** Parameters (in): Channel    : Uart channel to be addressed                 **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2186  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2187  ** Parameters (out): None                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2188  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2189  ** Return value:                                                              **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2190  **                  UART_BUSY : Uart channel is busy with transmission        **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2191  **                                    or Reception operation                  **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2192  **                  UART_IDLE : Uart channel is currently free to use         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2193  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2194  **                  UART_UNINIT: Uart channel is not uninitialised            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2195  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2196  ** Description :    Indicates the current driver status for the UART channel  **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2197  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2198  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2199  Uart_StatusType Uart_GetStatus(Uart_ChannelIdType Channel)
; Function Uart_GetStatus
.L156:
Uart_GetStatus:	.type	func

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2200  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2201    Uart_StatusType UartDriverState = UART_UNINIT;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2202  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2203    #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2204    Uart_ReturnType Retvalue = UART_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2205  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2206    /*Check for driver initialisation */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2207    if (Uart_InitStatus == UART_UNINITIALISED)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2208    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2209      Det_ReportError(
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2210                      UART_MODULE_ID,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2211                      UART_MODULE_INSTANCE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2212                      UART_SID_GETSTATUS,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2213                      UART_E_UNINIT
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2214                     );
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2215  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2216      Retvalue = UART_NOT_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2217  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2218      UartDriverState = UART_UNINIT;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2219    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2220    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2221    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2222       /* If the channelId is Invalid Report to DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2223      Retvalue = Uart_lChannelCheck(Channel,UART_SID_GETSTATUS);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2224  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2225      UartDriverState = UART_BUSY;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2226    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2227  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2228    if (Retvalue == UART_OK)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2229    #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2230    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2231     /*Return state as BUSY if channel is busy with Read or Write Operation*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2232  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2233      if((Uart_ChannelInfo[Channel].Uart_TxState == UART_OPERATION_IN_PROGRESS) \ 
	fcall	.cocofun_12
.L838:
	ld.bu	d15,[a15]8
.L1006:
	jeq	d15,#2,.L65
.L1007:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2234       ||( Uart_ChannelInfo[Channel].Uart_RxState == UART_OPERATION_IN_PROGRESS))
	ld.bu	d0,[a15]9
.L1008:
	jne	d0,#2,.L66
.L65:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2235      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2236        UartDriverState = UART_BUSY;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2237      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2238      else if (( Uart_ChannelInfo[Channel].Uart_TxState == UART_INITIALISED)\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2239       &&( Uart_ChannelInfo[Channel].Uart_RxState == UART_INITIALISED))
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2240      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2241        UartDriverState = UART_IDLE;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2242      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2243      else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2244      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2245        UartDriverState = UART_UNINIT;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2246      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2247    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2248  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2249    return UartDriverState;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2250  }
	mov	d2,#2
	ret
.L66:
	jne	d15,#1,.L68
.L1009:
	jne	d0,#1,.L69
.L1010:
	mov	d2,#0
	ret
.L69:
.L68:
	mov	d2,#1
	ret
.L511:
	
__Uart_GetStatus_function_end:
	.size	Uart_GetStatus,__Uart_GetStatus_function_end-Uart_GetStatus
.L216:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_IsrReceive')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	
	.global	Uart_IsrReceive

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2251  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2252  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2253  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2254  ** Syntax :          void Uart_IsrReceive( uint8  HwUnit)                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2255  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2256  ** Service ID:       NA                                                       **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2257  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2258  ** Sync/Async:       Asynchronous                                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2259  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2260  ** Reentrancy:  Reentrant  (Not for the same HW Unit)                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2261  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2262  ** Parameters (in):  HwUnit : Represents ASCLIN hw module number              **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2263  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2264  ** Parameters (out): none                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2265  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2266  ** Return value:     none                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2267  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2268  ** Description :     This ISR will be called whenever  data                   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2269  **                   is completely received by the ASCLIN w/o any errors      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2270  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2271  void Uart_IsrReceive(uint8  HwUnit)
; Function Uart_IsrReceive
.L158:
Uart_IsrReceive:	.type	func
	fcall	.cocofun_13
.L842:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2272  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2273    const Uart_ChannelType *ChannelConfigPtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2274    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2275     UART_HW_MODULE to access the SFRs of a particular HW Unit*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2276    Ifx_ASCLIN* HwModulePtr= &(UART_HW_MODULE[HwUnit]);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2277    Uart_ChannelIdType Channel;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2278  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2279    /* Extract the Channel */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2280    Channel = Uart_BusChannelMap[HwUnit];
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2281    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2282      ChannelConfigPtr to access the Configuration of Channel passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2283    ChannelConfigPtr = &(Uart_kConfigPtr->ChannelConfigPtr[Channel]);
	ld.a	a2,Uart_kConfigPtr
.L1015:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2284  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2285    /* Local fnt to read the Data from Rx FIFO */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2286    Uart_lRead(HwModulePtr,Channel);
	sha	d15,d9,#5
	mov.aa	a4,a15
.L844:
	mov	d4,d9
.L843:
	ld.a	a2,[a2]
.L1016:
	addsc.a	a12,a2,d15,#0
.L850:
	call	Uart_lRead
.L845:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2287  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2288    if (Uart_ChannelInfo[Channel].Uart_RxDataLeft == UART_ZERO_U)
	mul	d15,d9,#20
	fcall	.cocofun_20
.L1017:
	addsc.a	a13,a2,d15,#0
.L1018:
	ld.hu	d15,[a13]12
.L1019:
	jne	d15,#0,.L72
.L1020:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2289    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2290      /*Flush RxFIFO*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2291      HwModulePtr->RXFIFOCON.U = ((HwModulePtr->RXFIFOCON.U &\ 
	ld.w	d15,[a15]16
.L1021:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2292                              UART_RXFIFOCON_FLUSH_CLEARMASK) | UART_ENABLE_BIT);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2293  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2294      /*Clear Rx Overflow and Level Interrupts*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2295      Uart_lClearReadInterrupts(HwModulePtr, UART_ISR_ACCESS);
	mov	d4,#0
	mov.aa	a4,a15
.L846:
	or	d15,#1
	st.w	[a15]16,d15
.L1022:
	call	Uart_lClearReadInterrupts
.L847:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2296  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2297      /*Disable Rx FIFO*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2298      HwModulePtr->RXFIFOCON.U = ((HwModulePtr->RXFIFOCON.U &\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2299                              UART_RXFIFOCON_ENI_CLEARMASK) | UART_DISABLE_BIT);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2300  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2301      /*Disable Rx Interrupt*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2302      Uart_lHwDisableAscLinRxIntr(HwUnit, UART_ISR_ACCESS);
	mov	d4,d8
	ld.w	d15,[a15]16
.L848:
	mov	d5,#0
.L1023:
	insert	d15,d15,#0,#1,#1
	st.w	[a15]16,d15
.L1024:
	call	Uart_lHwDisableAscLinRxIntr
.L1025:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2303  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2304      /* Release the lock so that other Uart Read Operation can be started*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2305      Mcal_UnlockResource(&Uart_ChLock[UART_RX_LOCK_IDX][Channel]);
	fcall	.cocofun_14
.L849:
	addsc.a	a15,a2,d9,#2
.L851:
	lea	a4,[a15]12
	call	Mcal_UnlockResource
.L1026:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2306  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2307      Uart_ChannelInfo[Channel].Uart_RxBuffPtr = NULL_PTR;
	mov.a	a15,#0
.L1027:
	st.a	[a13],a15
.L1028:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2308      Uart_ChannelInfo[Channel].Uart_RxState = UART_INITIALISED;
	mov	d15,#1
	st.b	[a13]9,d15
.L1029:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2309  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2310      if(ChannelConfigPtr->UartNotif.UartReceiveNotifPtr != NULL_PTR)
	ld.a	a15,[a12]4
.L1030:
	jz.a	a15,.L73
.L1031:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2311      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2312        /*Call the Receive Notification Function*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2313        ChannelConfigPtr->UartNotif.UartReceiveNotifPtr(UART_NO_ERR);
	mov	d4,#0
	ji	a15
.L73:
.L72:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2314      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2315      else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2316      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2317       /* Do Nothing */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2318      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2319    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2320    return ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2321  }
	ret
.L514:
	
__Uart_IsrReceive_function_end:
	.size	Uart_IsrReceive,__Uart_IsrReceive_function_end-Uart_IsrReceive
.L221:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_13')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_13
.L160:
.cocofun_13:	.type	func
; Function body .cocofun_13, coco_iter:0
	mov	d8,d4
	lea	a2,Uart_BusChannelMap
.L839:
	addsc.a	a2,a2,d8,#0
.L1295:
	sha	d15,d8,#8
	lea	a15,0xf0000600
.L1296:
	addsc.a	a15,a15,d15,#0
.L840:
	ld.bu	d9,[a2]
.L841:
	fret
.L336:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_IsrTransmit')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	
	.global	Uart_IsrTransmit

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2322  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2323  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2324  ** Syntax :          void Uart_IsrTransmit( uint8  HwUnit)                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2325  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2326  ** Service ID:       NA                                                       **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2327  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2328  ** Sync/Async:       Asynchronous                                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2329  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2330  ** Reentrancy:  Reentrant  (Not for the same HW Unit)                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2331  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2332  ** Parameters (in):  HwUnit : Represents Hw Module number                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2333  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2334  ** Parameters (out): none                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2335  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2336  ** Return value:     none                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2337  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2338  ** Description :     This ISR will be called whenever the data                **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2339  **                   is successfully transmitted by the ASCLIN w/o any errors **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2340  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2341  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2342  void Uart_IsrTransmit(uint8  HwUnit)
; Function Uart_IsrTransmit
.L162:
Uart_IsrTransmit:	.type	func
	fcall	.cocofun_13
.L854:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2343  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2344    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2345     UART_HW_MODULE to access the SFRs of a particular HW Unit*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2346    Ifx_ASCLIN* HwModulePtr = &(UART_HW_MODULE[HwUnit]);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2347    uint16 Tempsum;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2348    Uart_ChannelIdType Channel;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2349  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2350    /* Extract the Channel */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2351    Channel = Uart_BusChannelMap[HwUnit];
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2352    Tempsum = (uint16)(Uart_ChannelInfo[Channel].Uart_TxDataCopyCntr -\ 
	mul	d15,d9,#20
	fcall	.cocofun_20
.L1036:
	addsc.a	a12,a2,d15,#0
.L1037:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2353       ((uint16) ((HwModulePtr->TXFIFOCON.U & UART_TXFIFOCON_FILL_MASK) >>\ 
	ld.w	d15,[a15]12
.L1038:
	lea	a13,[a12]19
.L1039:
	extr.u	d1,d15,#16,#5
	ld.bu	d0,[a13]
.L852:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2354                                                    UART_TXFIFOCON_FILL_BITPOS)));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2355  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2356    Uart_ChannelInfo[Channel].Uart_TotalDataTxd += Tempsum;
	sub	d0,d1
	ld.hu	d1,[a12]14
.L1040:
	add	d1,d0
	st.h	[a12]14,d1
.L1041:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2357  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2358    if ( Uart_ChannelInfo[Channel].Uart_TxDataLeft == UART_ZERO_U)
	ld.hu	d0,[a12]10
.L853:
	jne	d0,#0,.L74
.L1042:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2359     {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2360       /*Clear the transmission complete flag*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2361       HwModulePtr->FLAGSCLEAR.U = (unsigned_int)((HwModulePtr->FLAGSCLEAR.U &
	fcall	.cocofun_24
.L1043:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2362              UART_FLAGSCLEAR_TCC_MASK) | ((unsigned_int)UART_ENABLE_BIT <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2363                                                     UART_FLAGSCLEAR_TCC_BITPOS));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2364  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2365       /*Clear all write interrupts */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2366       Uart_lClearWriteInterrupts(HwModulePtr, UART_ISR_ACCESS);
	mov	d4,#0
	mov.aa	a4,a15
.L856:
	call	Uart_lClearWriteInterrupts
.L857:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2367  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2368       /*Disable the Tx Overflow and Level Interrupt*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2369       HwModulePtr->FLAGSENABLE.U = ((HwModulePtr->FLAGSENABLE.U &\ 
	ld.w	d15,[a15]64
.L1044:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2370                              UART_FLAGSENABLE_TFLE_MASK) | UART_DISABLE_BIT);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2371  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2372       HwModulePtr->FLAGSENABLE.U = ((HwModulePtr->FLAGSENABLE.U\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2373                              & UART_FLAGSENABLE_TFOE_MASK) | UART_DISABLE_BIT);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2374  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2375       /*Disable Tx Interrupts*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2376       Uart_lHwDisableAscLinTxIntr(HwUnit, UART_ISR_ACCESS);
	mov	d4,d8
.L858:
	insert	d15,d15,#0,#31,#1
	st.w	[a15]64,d15
.L1045:
	mov	d5,#0
.L1046:
	ld.w	d15,[a15]64
.L1047:
	insert	d15,d15,#0,#30,#1
	st.w	[a15]64,d15
.L1048:
	call	Uart_lHwDisableAscLinTxIntr
.L859:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2377  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2378       Uart_ChannelInfo[Channel].Uart_TxBuffPtr = NULL_PTR;
	mov.a	a15,#0
.L855:
	st.a	[a12]4,a15
.L1049:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2379       Uart_ChannelInfo[Channel].Uart_TxDataCopyCntr = UART_ZERO_U;
	mov	d15,#0
	st.b	[a13],d15
.L1050:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2380     }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2381     else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2382     {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2383       /*Clear the transmission complete flag*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2384       HwModulePtr->FLAGSCLEAR.U = (unsigned_int)((HwModulePtr->FLAGSCLEAR.U &
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2385              UART_FLAGSCLEAR_TCC_MASK) | ((unsigned_int)UART_ENABLE_BIT <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2386                                                     UART_FLAGSCLEAR_TCC_BITPOS));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2387  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2388       if(Uart_ChannelInfo[Channel].Uart_TxDataLeft == UART_STEPSIZE)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2389       {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2390         /* Enable the transmission complete interrupt
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2391         for the last data transmission*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2392         HwModulePtr->FLAGSENABLE.U = (unsigned_int)((HwModulePtr->FLAGSENABLE.U &
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2393             UART_FLAGSENABLE_TCE_MASK) | ((unsigned_int)UART_ENABLE_BIT <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2394                                                     UART_FLAGSCLEAR_TCC_BITPOS));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2395       }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2396  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2397       /*Disable TxFIFO*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2398       HwModulePtr->TXFIFOCON.U = ((HwModulePtr->TXFIFOCON.U &\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2399                                   UART_TXFIFOCON_ENO_MASK) | UART_DISABLE_BIT);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2400  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2401       /*Clear Tx Overflow and Level Interrupt*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2402       Uart_lClearWriteInterrupts(HwModulePtr, UART_ISR_ACCESS);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2403  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2404       /* Write the Data to Tx FIFO */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2405       Uart_lWrite(HwModulePtr,Channel);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2406  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2407       /*Enable the Tx Overflow and Level Interrupt*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2408       Uart_lEnableWriteInterrupts(HwModulePtr, UART_ISR_ACCESS);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2409  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2410       /*Enable TxFIFO*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2411       HwModulePtr->TXFIFOCON.U = (unsigned_int)((HwModulePtr->TXFIFOCON.U &\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2412                UART_TXFIFOCON_ENO_MASK) | ((unsigned_int)UART_ENABLE_BIT <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2413                                                      UART_TXFIFOCON_ENO_BITPOS));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2414     }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2415    return ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2416  }
	ret
.L74:
	fcall	.cocofun_24
.L1051:
	jne	d0,#1,.L76
.L1052:
	ld.w	d15,[a15]64
.L1053:
	insert	d15,d15,#1,#17,#1
	st.w	[a15]64,d15
.L76:
	ld.w	d15,[a15]12
.L1054:
	mov	d4,#0
	mov.aa	a4,a15
.L860:
	insert	d15,d15,#0,#1,#1
	st.w	[a15]12,d15
.L1055:
	call	Uart_lClearWriteInterrupts
.L861:
	mov.aa	a4,a15
.L862:
	mov	d4,d9
	call	Uart_lWrite
.L863:
	mov	d4,#0
	mov.aa	a4,a15
.L864:
	call	Uart_lEnableWriteInterrupts
.L865:
	ld.w	d15,[a15]12
.L1056:
	or	d15,#2
	st.w	[a15]12,d15
.L1057:
	ret
.L520:
	
__Uart_IsrTransmit_function_end:
	.size	Uart_IsrTransmit,__Uart_IsrTransmit_function_end-Uart_IsrTransmit
.L226:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_IsrError')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	
	.global	Uart_IsrError

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2417  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2418  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2419  ** Syntax :          void Uart_IsrError( uint8  HwUnit)                       **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2420  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2421  ** Service ID:       NA                                                       **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2422  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2423  ** Sync/Async:       Asynchronous                                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2424  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2425  ** Reentrancy:  Reentrant  (Not for the same HW Unit)                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2426  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2427  ** Parameters (in):  HwUnit : Represents Hw Module number                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2428  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2429  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2430  ** Parameters (out): none                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2431  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2432  ** Return value:     none                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2433  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2434  ** Description :     This ISR will be called whenever there is data           **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2435  **                   transmission or reception error on ASCLINx HW Unit       **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2436  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2437  void Uart_IsrError(uint8 HwUnit)
; Function Uart_IsrError
.L164:
Uart_IsrError:	.type	func

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2438  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2439    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2440     UART_HW_MODULE to access the SFRs of a particular HW Unit*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2441    Ifx_ASCLIN* HwModulePtr= &(UART_HW_MODULE[HwUnit]);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2442    const Uart_ChannelType *ChannelConfigPtr;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2443    Uart_ErrorIdType ErrId = UART_NO_ERR;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2444    uint8 Channel = Uart_BusChannelMap[HwUnit];
	lea	a2,Uart_BusChannelMap
.L1062:
	addsc.a	a2,a2,d4,#0
.L1063:
	sha	d15,d4,#8
	lea	a15,0xf0000600
.L1064:
	addsc.a	a15,a15,d15,#0
.L867:
	ld.bu	d8,[a2]
.L868:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2445  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2446    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2447      ChannelConfigPtr to access the Configuration of Channel passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2448    ChannelConfigPtr = &(Uart_kConfigPtr->ChannelConfigPtr[Channel]);
	ld.a	a2,Uart_kConfigPtr
.L1065:
	sha	d15,d8,#5
.L1066:
	mov	d9,#0
.L869:
	ld.a	a2,[a2]
.L1067:
	addsc.a	a12,a2,d15,#0
.L870:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2449  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2450    /* Check parity error*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2451    if (((HwModulePtr->FLAGS.U & UART_FLAGS_PE_MASK) >> UART_FLAGS_PE_BITPOS) ==\ 
	ld.w	d15,[a15]52
.L1068:
	jz.t	d15:16,.L77
.L1069:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2452                                                                      UART_ONE_U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2453    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2454      HwModulePtr->FLAGSCLEAR.U = (unsigned_int)((HwModulePtr->FLAGSCLEAR.U &\ 
	ld.w	d15,[a15]60
.L1070:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2455                   UART_FLAGSCLEAR_PEC_MASK) | ((unsigned_int)UART_ONE_U <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2456                                                     UART_FLAGSCLEAR_PEC_BITPOS));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2457      ErrId = UART_PARITY_ERR;
	mov	d9,#1
.L1071:
	insert	d15,d15,#1,#16,#1
	st.w	[a15]60,d15
.L1072:
	j	.L78
.L77:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2458    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2459    /* Check framing error*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2460    else if(((HwModulePtr->FLAGS.U & UART_FLAGS_FE_MASK) >> UART_FLAGS_FE_BITPOS)\ 
	ld.w	d15,[a15]52
.L1073:
	jz.t	d15:18,.L79
.L1074:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2461                                                                    == UART_ONE_U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2462    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2463      HwModulePtr->FLAGSCLEAR.U = (unsigned_int)((HwModulePtr->FLAGSCLEAR.U &\ 
	ld.w	d15,[a15]60
.L1075:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2464                   UART_FLAGSCLEAR_FEC_MASK) | ((unsigned_int)UART_ONE_U <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2465                                                     UART_FLAGSCLEAR_FEC_BITPOS));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2466      ErrId = UART_FRAME_ERR;
	mov	d9,#2
.L1076:
	insert	d15,d15,#1,#18,#1
	st.w	[a15]60,d15
.L1077:
	j	.L80
.L79:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2467    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2468     /* Check TxFIFO Overflow error*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2469    else if(((HwModulePtr->FLAGS.U & UART_FLAGS_TFO_MASK) >>\ 
	ld.w	d15,[a15]52
.L1078:
	jz.t	d15:30,.L81
.L1079:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2470                                             UART_FLAGS_TFO_BITPOS) == UART_ONE_U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2471    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2472      HwModulePtr->FLAGSCLEAR.U = (unsigned_int)((HwModulePtr->FLAGSCLEAR.U &\ 
	ld.w	d15,[a15]60
.L1080:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2473                  UART_FLAGSCLEAR_TFOC_MASK) | ((unsigned_int)UART_ONE_U <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2474                                                  UART_FLAGSCLEAR_TFOC_BITPOS));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2475      ErrId = UART_TXOVERFLOW_ERR;
	mov	d9,#3
.L1081:
	insert	d15,d15,#1,#30,#1
	st.w	[a15]60,d15
.L1082:
	j	.L82
.L81:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2476    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2477      /* Check RxFIFO Overflow error*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2478    else if(((HwModulePtr->FLAGS.U & UART_FLAGS_RFO_MASK) >>\ 
	ld.w	d15,[a15]52
.L1083:
	jz.t	d15:26,.L83
.L1084:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2479                                             UART_FLAGS_RFO_BITPOS) == UART_ONE_U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2480    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2481      HwModulePtr->FLAGSCLEAR.U = (unsigned_int)((HwModulePtr->FLAGSCLEAR.U &\ 
	ld.w	d15,[a15]60
.L1085:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2482                  UART_FLAGSCLEAR_RFOC_MASK) | ((unsigned_int)UART_ONE_U <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2483                                                    UART_FLAGSCLEAR_RFOC_BITPOS));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2484      ErrId = UART_RXOVERFLOW_ERR;
	mov	d9,#4
.L1086:
	insert	d15,d15,#1,#26,#1
	st.w	[a15]60,d15
.L1087:
	j	.L84
.L83:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2485    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2486     /* Check RxFIFO Underflow error*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2487    else if(((HwModulePtr->FLAGS.U & UART_FLAGS_RFU_MASK) >> \ 
	ld.w	d15,[a15]52
.L1088:
	jz.t	d15:27,.L85
.L1089:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2488                                             UART_FLAGS_RFU_BITPOS) == UART_ONE_U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2489    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2490      HwModulePtr->FLAGSCLEAR.U = (unsigned_int)((HwModulePtr->FLAGSCLEAR.U &\ 
	ld.w	d15,[a15]60
.L1090:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2491                  UART_FLAGSCLEAR_RFUC_MASK) | ((unsigned_int)UART_ONE_U <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2492                                                    UART_FLAGSCLEAR_RFUC_BITPOS));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2493      ErrId = UART_RXUNDERFLOW_ERR;
	mov	d9,#5
.L1091:
	insert	d15,d15,#1,#27,#1
	st.w	[a15]60,d15
.L1092:
	j	.L86
.L85:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2494    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2495      /* Check Tx Complete */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2496    else if(((HwModulePtr->FLAGS.U & UART_FLAGS_TC_MASK) >> UART_FLAGS_TC_BITPOS)\ 
	ld.w	d15,[a15]52
.L1093:
	jz.t	d15:17,.L87
.L1094:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2497                                                                  == UART_ONE_U)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2498    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2499      /* Disable TxFIFO */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2500      HwModulePtr->TXFIFOCON.U = ((HwModulePtr->TXFIFOCON.U &\ 
	ld.w	d15,[a15]12
.L1095:
	insert	d15,d15,#0,#1,#1
	st.w	[a15]12,d15
.L866:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2501                                  UART_TXFIFOCON_ENO_MASK) | UART_DISABLE_BIT);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2502  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2503      /* Clear Transmit complete */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2504      HwModulePtr->FLAGSCLEAR.U = (unsigned_int)((HwModulePtr->FLAGSCLEAR.U &\ 
	fcall	.cocofun_18
.L871:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2505              UART_FLAGSCLEAR_TCC_MASK) | ((unsigned_int)UART_ENABLE_BIT <<\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2506                                                     UART_FLAGSCLEAR_TCC_BITPOS));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2507  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2508      ErrId = UART_NO_ERR;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2509  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2510      /* Disable Tx complete interrupt */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2511      HwModulePtr->FLAGSENABLE.U = ((HwModulePtr->FLAGSENABLE.U &\ 
	insert	d15,d15,#0,#17,#1
	st.w	[a15]64,d15
.L1096:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2512                                 UART_FLAGSENABLE_TCE_MASK) | UART_DISABLE_BIT);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2513  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2514      /* Flush TxFIFO */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2515      HwModulePtr->TXFIFOCON.U = ((HwModulePtr->TXFIFOCON.U &\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2516                                 UART_TXFIFOCON_FLUSH_MASK) | UART_ENABLE_BIT);
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2517  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2518      /* Disable Err interrupts */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2519      Uart_lHwDisableAscLinErrIntr(HwUnit, UART_ISR_ACCESS);
	mov	d5,d9
.L872:
	ld.w	d15,[a15]12
.L1097:
	or	d15,#1
	st.w	[a15]12,d15
.L1098:
	call	Uart_lHwDisableAscLinErrIntr
.L87:
.L86:
.L84:
.L82:
.L80:
.L78:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2520    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2521    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2522    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2523       /* Do Nothing */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2524    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2525  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2526    /*Call Notification fnt*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2527    if ((ErrId == UART_PARITY_ERR)||(ErrId == UART_FRAME_ERR)\ 
	jeq	d9,#1,.L88
.L1099:
	jeq	d9,#2,.L89
.L1100:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2528     ||(ErrId == UART_RXOVERFLOW_ERR)||(ErrId == UART_RXUNDERFLOW_ERR))
	jeq	d9,#4,.L90
.L1101:
	jne	d9,#5,.L91
.L90:
.L89:
.L88:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2529    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2530      /* Release the lock so that other Uart Read Operation can be started*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2531      Mcal_UnlockResource(&Uart_ChLock[UART_RX_LOCK_IDX][Channel]);
	fcall	.cocofun_14
.L1102:
	addsc.a	a2,a2,d8,#2
	lea	a4,[a2]12
	call	Mcal_UnlockResource
.L1103:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2532  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2533      Uart_ChannelInfo[Channel].Uart_RxState = UART_INITIALISED;
	fcall	.cocofun_16
.L873:
	st.b	[a15]9,d15
.L875:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2534  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2535      if(ChannelConfigPtr->UartNotif.UartReceiveNotifPtr != NULL_PTR)
	ld.a	a15,[a12]4
.L1104:
	jz.a	a15,.L92
.L1105:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2536      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2537        /*Call Receive Notification Function*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2538        ChannelConfigPtr->UartNotif.UartReceiveNotifPtr(ErrId);
	mov	d4,d9
	calli	a15
.L92:
.L91:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2539      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2540    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2541    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2542    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2543       /* Do Nothing */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2544    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2545  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2546    if ((ErrId == UART_TXOVERFLOW_ERR)||(ErrId == UART_NO_ERR))
	jeq	d9,#3,.L93
.L1106:
	jne	d9,#0,.L94
.L93:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2547    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2548      /* Release the lock so that other Uart Write Operation can be started*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2549      Mcal_UnlockResource(&Uart_ChLock[UART_TX_LOCK_IDX][Channel]);
	fcall	.cocofun_19
.L1107:
	call	Mcal_UnlockResource
.L1108:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2550  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2551      Uart_ChannelInfo[Channel].Uart_TxState = UART_INITIALISED;
	fcall	.cocofun_16
.L1109:
	st.b	[a15]8,d15
.L1110:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2552  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2553      if(ChannelConfigPtr->UartNotif.UartTransmitNotifPtr != NULL_PTR)
	ld.a	a15,[a12]
.L1111:
	jz.a	a15,.L95
.L1112:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2554      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2555         /*Call Transmit Notification Function*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2556        ChannelConfigPtr->UartNotif.UartTransmitNotifPtr(ErrId);
	mov	d4,d9
.L876:
	ji	a15
.L95:
.L94:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2557      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2558    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2559    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2560    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2561       /* Do Nothing */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2562    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2563  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2564  }
	ret
.L525:
	
__Uart_IsrError_function_end:
	.size	Uart_IsrError,__Uart_IsrError_function_end-Uart_IsrError
.L231:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_16')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_16
.L166:
.cocofun_16:	.type	func
; Function body .cocofun_16, coco_iter:0
	mul	d15,d8,#20
.L1312:
	fcall	.cocofun_21
.L874:
	mov	d15,#1
	fret
.L351:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_lHwDisableAscLinErrIntr')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2565  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2566  ** Syntax : static Uart_ReturnType Uart_lChannelCheck                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2567  **  (                                                                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2568  **    Uart_ChannelIdType Channel,uint8 ApiId                                  **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2569  **  )                                                                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2570  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2571  ** Service ID:    NA                                                          **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2572  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2573  ** Sync/Async:  Synchronous                                                   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2574  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2575  ** Reentrancy:      reentrant                                                 **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2576  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2577  ** Parameters (in): Channel - Uart channel to be addressed                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2578  **                  ApiId - Service id of the Api which calls this function   **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2579  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2580  ** Parameters (out): None                                                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2581  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2582  ** Return value    : UART_OK / UART_NOT_OK                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2583  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2584  ** Description : Local function to check whether channel is valid or not      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2585  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2586  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2587  #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2588  static Uart_ReturnType Uart_lChannelCheck(\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2589                                         Uart_ChannelIdType Channel,uint8 ApiId)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2590  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2591    uint8 MaxChannel;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2592    Uart_ReturnType Retvalue;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2593  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2594    MaxChannel = Uart_kConfigPtr->NoOfChannels;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2595  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2596    if(Channel < MaxChannel)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2597    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2598      Retvalue = UART_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2599    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2600    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2601    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2602      /* If the channelid is invalid Report to  DET */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2603  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2604      Det_ReportError(
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2605                      UART_MODULE_ID,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2606                      UART_MODULE_INSTANCE,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2607                      ApiId,
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2608                      UART_E_INVALID_CHANNEL
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2609                     );
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2610  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2611      Retvalue = UART_NOT_OK;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2612    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2613  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2614    return Retvalue;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2615  }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2616  #endif
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2617  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2618  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2619  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2620  ** Syntax           :  static void Uart_lHwDisableAscLinErrIntr               **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2621  **                      (uint8 HwUnit, uint8 ApiAccessId)                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2622  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2623  ** Service ID       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2624  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2625  ** Sync/Async       : Synchronous                                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2626  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2627  ** Reentrancy       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2628  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2629  ** Parameters (in)  : HwUnit        : ASCLIN Hardware module no               **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2630                      : ApiAccessId   : API access type                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2631  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2632  ** Parameters (out) : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2633  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2634  ** Return value     : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2635  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2636  ** Description      : This function clears and disables the  Err              **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2637  **                    interrupts in SRC registers.                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2638  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2639  static void Uart_lHwDisableAscLinErrIntr(volatile uint8 HwUnit,\ 
; Function Uart_lHwDisableAscLinErrIntr
.L168:
Uart_lHwDisableAscLinErrIntr:	.type	func

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2640                                                                uint8 ApiAccessId)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2641  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2642    /* Ifx_SRC_SRCR_Bits IntrSrc; */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2643    uint32 Offset,IntrSrc;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2644  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2645    Offset = (uint32)HwUnit * UART_SRC_ADDROFFSET ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2646    #if (UART_RUNNING_IN_USER_0_MODE_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2647    #if (UART_USER_MODE_RUNTIME_API_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2648    if (ApiAccessId == UART_RUNTIME_ACCESS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2649    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2650      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2651      UART_SRC_ASCLIN0ERRADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2652      IntrSrc = UART_SFR_RUNTIME_USER_MODE_READ32\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2653                                            (*(UART_SRC_ASCLIN0ERRADDR + Offset));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2654    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2655    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2656    #endif /*(UART_USER_MODE_RUNTIME_API_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2657    #if (UART_USER_MODE_DEINIT_API_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2658    if (ApiAccessId == UART_DEINIT_ACCESS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2659    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2660      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2661      UART_SRC_ASCLIN0ERRADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2662      IntrSrc = UART_SFR_DEINIT_USER_MODE_READ32\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2663                                            (*(UART_SRC_ASCLIN0ERRADDR + Offset));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2664    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2665    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2666    #endif /*(UART_USER_MODE_DEINIT_API_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2667    #endif /*(UART_RUNNING_IN_USER_0_MODE_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2668    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2669      /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2670        UART_SRC_ASCLINxERRADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2671      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2672      UART_SRC_ASCLIN0ERRADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2673      IntrSrc = (*((volatile uint32 *)(void *)\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2674                                           (UART_SRC_ASCLIN0ERRADDR  + Offset)));
	mul	d15,d4,#3
	ld.w	d0,.2.cnt
.L877:
	fcall	.cocofun_9
.L880:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2675    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2676  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2677    if (((IntrSrc & UART_SET_MASK_ENABLE_INTR)>>10U) == UART_BIT_SET)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2678    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2679      #if (UART_USER_MODE_RUNTIME_API_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2680      if (ApiAccessId == UART_RUNTIME_ACCESS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2681      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2682        /*Reserve bit access is ensured for SRC_ASCLIN0ERR register*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2683        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2684        UART_SRC_ASCLIN0ERRADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2685        /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2686        UART_SRC_ASCLINxERRADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2687        UART_SFR_RUNTIME_MODIFY32(*((volatile uint32 *)\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2688        (void *)(UART_SRC_ASCLIN0ERRADDR + Offset)), ~UART_CLR_MASK_DISABLE_INTR,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2689                                                 UART_SET_MASK_DISABLE_INTR)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2690      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2691      else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2692      #endif /*(UART_USER_MODE_RUNTIME_API_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2693      #if (UART_USER_MODE_DEINIT_API_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2694      if (ApiAccessId == UART_DEINIT_ACCESS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2695      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2696        /*Reserve bit access is ensured for SRC_ASCLIN0ERR register*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2697        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2698        UART_SRC_ASCLIN0ERRADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2699        /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2700        UART_SRC_ASCLINxERRADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2701        UART_SFR_DEINIT_MODIFY32(*((volatile uint32 *)\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2702        (void *)(UART_SRC_ASCLIN0ERRADDR + Offset)), ~UART_CLR_MASK_DISABLE_INTR,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2703                                                 UART_SET_MASK_DISABLE_INTR)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2704      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2705      else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2706      #endif /*(UART_USER_MODE_DEINIT_API_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2707      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2708        /*Reserve bit access is ensured for SRC_ASCLIN0ERR register*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2709        /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2710        UART_SRC_ASCLINxERRADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2711        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2712        UART_SRC_ASCLIN0ERRADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2713        /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2714        UART_SRC_ASCLINxERRADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2715        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2716        UART_SRC_ASCLIN0ERRADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2717        *((volatile uint32 *)(void *)(UART_SRC_ASCLIN0ERRADDR + Offset)) = \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2718          (*((volatile uint32 *)(void *)(UART_SRC_ASCLIN0ERRADDR + Offset)) & \ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2719                     (~UART_CLR_MASK_DISABLE_INTR)) | UART_SET_MASK_DISABLE_INTR;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2720  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2721        UNUSED_PARAMETER(ApiAccessId)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2722      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2723    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2724  }
	ret
.L629:
	
__Uart_lHwDisableAscLinErrIntr_function_end:
	.size	Uart_lHwDisableAscLinErrIntr,__Uart_lHwDisableAscLinErrIntr_function_end-Uart_lHwDisableAscLinErrIntr
.L301:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_9')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_9
.L170:
.cocofun_9:	.type	func
; Function body .cocofun_9, coco_iter:0
	mov.a	a15,d0
.L1271:
	addsc.a	a15,a15,d15,#2
.L1272:
	ld.w	d15,[a15]
.L878:
	jz.t	d15:10,.L96
.L1273:
	ld.w	d15,[a15]
.L879:
	ld.w	d0,.3.cnt
.L1274:
	and	d15,d0
.L1275:
	insert	d15,d15,#1,#25,#1
	st.w	[a15],d15
.L96:
	fret
.L316:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_lHwDisableAscLinRxIntr')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2725  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2726  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2727  ** Syntax           :    static void Uart_lHwDisableAscLinRxIntr              **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2728  **                      (uint8 HwUnit, uint8 ApiAccessId)                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2729  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2730  ** Service ID       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2731  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2732  ** Sync/Async       : Synchronous                                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2733  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2734  ** Reentrancy       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2735  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2736  ** Parameters (in)  : HwUnit        : ASCLIN Hardware module no               **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2737  **                  : ApiAccessId   : API access type                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2738  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2739  ** Parameters (out) : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2740  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2741  ** Return value     : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2742  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2743  ** Description      : This function clears and disables the   RX              **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2744  **                    interrupts in SRC registers.                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2745  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2746  static void Uart_lHwDisableAscLinRxIntr(volatile uint8 HwUnit,\ 
; Function Uart_lHwDisableAscLinRxIntr
.L172:
Uart_lHwDisableAscLinRxIntr:	.type	func

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2747                                                                uint8 ApiAccessId)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2748  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2749    /*Ifx_SRC_SRCR_Bits IntrSrc;*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2750    uint32 Offset,IntrSrc;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2751  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2752    Offset = (uint32)HwUnit * UART_SRC_ADDROFFSET ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2753    #if (UART_RUNNING_IN_USER_0_MODE_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2754    #if (UART_USER_MODE_RUNTIME_API_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2755    if (ApiAccessId == UART_RUNTIME_ACCESS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2756    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2757      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2758      UART_SRC_ASCLIN0RXADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2759      IntrSrc = UART_SFR_RUNTIME_USER_MODE_READ32\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2760                                            (*(UART_SRC_ASCLIN0RXADDR + Offset));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2761    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2762    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2763    #endif /*(UART_USER_MODE_RUNTIME_API_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2764    #if (UART_USER_MODE_DEINIT_API_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2765    if (ApiAccessId == UART_DEINIT_ACCESS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2766    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2767      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2768      UART_SRC_ASCLIN0RXADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2769      IntrSrc = UART_SFR_DEINIT_USER_MODE_READ32\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2770                                      (*(UART_SRC_ASCLIN0RXADDR + Offset));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2771    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2772    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2773    #endif /*(UART_USER_MODE_DEINIT_API_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2774    #endif /*(UART_RUNNING_IN_USER_0_MODE_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2775    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2776      /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2777        UART_SRC_ASCLINxERRADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2778      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2779      UART_SRC_ASCLIN0RXADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2780      IntrSrc =(*((volatile uint32 *)(void *)(UART_SRC_ASCLIN0RXADDR  + Offset)));
	mul	d15,d4,#3
	ld.w	d0,.4.cnt
.L881:
	fcall	.cocofun_9
.L882:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2781    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2782  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2783    if (((IntrSrc & UART_SET_MASK_ENABLE_INTR)>>10U) == UART_BIT_SET)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2784    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2785      #if (UART_USER_MODE_RUNTIME_API_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2786      if (ApiAccessId == UART_RUNTIME_ACCESS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2787      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2788        /*Reserve bit access is ensured for SRC_ASCLIN0ERR register*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2789        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2790        UART_SRC_ASCLIN0RXADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2791        /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2792        UART_SRC_ASCLINxRXADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2793        UART_SFR_RUNTIME_MODIFY32(*((volatile uint32 *)\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2794        (void *)(UART_SRC_ASCLIN0RXADDR + Offset)), ~UART_CLR_MASK_DISABLE_INTR,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2795                                                 UART_SET_MASK_DISABLE_INTR)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2796      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2797      else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2798      #endif /*(UART_USER_MODE_RUNTIME_API_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2799      #if (UART_USER_MODE_DEINIT_API_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2800      if (ApiAccessId == UART_DEINIT_ACCESS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2801      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2802        /*Reserve bit access is ensured for SRC_ASCLIN0ERR register*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2803        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2804        UART_SRC_ASCLIN0RXADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2805        /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2806        UART_SRC_ASCLINxRXADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2807        UART_SFR_DEINIT_MODIFY32(*((volatile uint32 *)\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2808        (void *)(UART_SRC_ASCLIN0RXADDR + Offset)), ~UART_CLR_MASK_DISABLE_INTR,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2809                                                 UART_SET_MASK_DISABLE_INTR)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2810      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2811      else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2812      #endif /*(UART_USER_MODE_DEINIT_API_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2813      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2814        /*Reserve bit access is ensured for SRC_ASCLIN0ERR register*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2815        /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2816        UART_SRC_ASCLINxRXADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2817        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2818        UART_SRC_ASCLIN0RXADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2819        /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2820        UART_SRC_ASCLINxRXADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2821        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2822        UART_SRC_ASCLIN0RXADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2823        *((volatile uint32 *)\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2824         (void *)(UART_SRC_ASCLIN0RXADDR + Offset)) = (*((volatile uint32 *)\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2825         (void *)(UART_SRC_ASCLIN0RXADDR + Offset)) &\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2826                      (~UART_CLR_MASK_DISABLE_INTR)) | UART_SET_MASK_DISABLE_INTR;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2827  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2828        UNUSED_PARAMETER(ApiAccessId)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2829      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2830    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2831  }
	ret
.L623:
	
__Uart_lHwDisableAscLinRxIntr_function_end:
	.size	Uart_lHwDisableAscLinRxIntr,__Uart_lHwDisableAscLinRxIntr_function_end-Uart_lHwDisableAscLinRxIntr
.L296:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_lHwDisableAscLinTxIntr')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2832  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2833  ** Syntax           :  static void Uart_lHwDisableAscLinTxIntr                **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2834  **                      (uint8 HwUnit, uint8 ApiAccessId)                     **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2835  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2836  ** Service ID       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2837  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2838  ** Sync/Async       : Synchronous                                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2839  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2840  ** Reentrancy       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2841  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2842  ** Parameters (in)  : HwUnit        : ASCLIN Hardware module no               **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2843  **                  : ApiAccessId   : API access type                         **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2844  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2845  ** Parameters (out) : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2846  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2847  ** Return value     : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2848  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2849  ** Description      : This function clears and disables the TX                **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2850  **                    interrupts in SRC registers.                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2851  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2852  static void Uart_lHwDisableAscLinTxIntr(volatile uint8 HwUnit,uint8 ApiAccessId)
; Function Uart_lHwDisableAscLinTxIntr
.L174:
Uart_lHwDisableAscLinTxIntr:	.type	func

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2853  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2854    /*Ifx_SRC_SRCR_Bits IntrSrc;*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2855    uint32 Offset,IntrSrc;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2856  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2857    Offset = (uint32)HwUnit * UART_SRC_ADDROFFSET ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2858    #if (UART_RUNNING_IN_USER_0_MODE_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2859    #if (UART_USER_MODE_RUNTIME_API_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2860    if (ApiAccessId == UART_RUNTIME_ACCESS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2861    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2862      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2863       UART_SRC_ASCLIN0TXADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2864      IntrSrc = UART_SFR_RUNTIME_USER_MODE_READ32\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2865                                      (*(UART_SRC_ASCLIN0TXADDR + Offset));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2866    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2867    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2868    #endif /*(UART_USER_MODE_RUNTIME_API_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2869    #if (UART_USER_MODE_DEINIT_API_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2870    if (ApiAccessId == UART_DEINIT_ACCESS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2871    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2872      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2873      UART_SRC_ASCLIN0TXADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2874      IntrSrc = UART_SFR_DEINIT_USER_MODE_READ32\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2875                                            (*(UART_SRC_ASCLIN0TXADDR + Offset));
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2876    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2877    else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2878    #endif /*(UART_USER_MODE_DEINIT_API_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2879    #endif /*(UART_RUNNING_IN_USER_0_MODE_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2880    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2881      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2882      UART_SRC_ASCLIN0ERRADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2883      /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2884      UART_SRC_ASCLINxRXADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2885      IntrSrc = (*((volatile uint32 *)(void *)(UART_SRC_ASCLIN0TXADDR + Offset)));
	mul	d15,d4,#3
	ld.w	d0,.5.cnt
.L883:
	fcall	.cocofun_9
.L884:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2886    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2887  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2888  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2889    if (((IntrSrc & UART_SET_MASK_ENABLE_INTR)>>10U) == UART_BIT_SET)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2890    {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2891      #if (UART_USER_MODE_RUNTIME_API_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2892      if (ApiAccessId == UART_RUNTIME_ACCESS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2893      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2894        /*Reserve bit access is ensured for SRC_ASCLIN0TX register*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2895        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2896        UART_SRC_ASCLIN0TXADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2897        /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2898        UART_SRC_ASCLINxTXADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2899        UART_SFR_RUNTIME_MODIFY32(*((volatile uint32 *)(void *)\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2900                  (UART_SRC_ASCLIN0TXADDR + Offset)),~UART_CLR_MASK_DISABLE_INTR,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2901                                                       UART_SET_MASK_DISABLE_INTR)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2902      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2903      else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2904      #endif /*(UART_USER_MODE_RUNTIME_API_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2905      #if (UART_USER_MODE_DEINIT_API_ENABLE == STD_ON)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2906      if (ApiAccessId == UART_DEINIT_ACCESS)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2907      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2908        /*Reserve bit access is ensured for SRC_ASCLIN0TX register*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2909        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2910        UART_SRC_ASCLIN0TXADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2911        /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2912        UART_SRC_ASCLINxTXADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2913        UART_SFR_DEINIT_MODIFY32(*((volatile uint32 *)(void *)\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2914                  (UART_SRC_ASCLIN0TXADDR + Offset)),~UART_CLR_MASK_DISABLE_INTR,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2915                                                       UART_SET_MASK_DISABLE_INTR)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2916      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2917      else
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2918      #endif /*(UART_USER_MODE_DEINIT_API_ENABLE == STD_ON)*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2919      {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2920        /*Reserve bit access is ensured for SRC_ASCLIN0TX register*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2921        /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2922        UART_SRC_ASCLINxTXADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2923        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2924        UART_SRC_ASCLIN0TXADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2925        /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2926        UART_SRC_ASCLINxTXADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2927        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2928        UART_SRC_ASCLIN0TXADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2929        *((volatile uint32 *)\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2930         (void *)(UART_SRC_ASCLIN0TXADDR + Offset)) = (*((volatile uint32 *)\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2931         (void *)(UART_SRC_ASCLIN0TXADDR + Offset)) &\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2932                      (~UART_CLR_MASK_DISABLE_INTR)) | UART_SET_MASK_DISABLE_INTR;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2933  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2934        UNUSED_PARAMETER(ApiAccessId)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2935      }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2936    }
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2937  }
	ret
.L617:
	
__Uart_lHwDisableAscLinTxIntr_function_end:
	.size	Uart_lHwDisableAscLinTxIntr,__Uart_lHwDisableAscLinTxIntr_function_end-Uart_lHwDisableAscLinTxIntr
.L291:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_lHwEnableAscLinErrIntr')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2938  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2939  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2940  ** Syntax           : static void Uart_lHwEnableAscLinErrIntr                 **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2941  **                      (uint8 HwUnit)                                        **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2942  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2943  ** Service ID       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2944  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2945  ** Sync/Async       : Synchronous                                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2946  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2947  ** Reentrancy       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2948  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2949  ** Parameters (in)  : HwUnit   : ASCLIN Hardware module no                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2950  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2951  ** Parameters (out) : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2952  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2953  ** Return value     : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2954  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2955  ** Description      : This function clears and enables the  Err               **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2956  **                    interrupts in SRC registers.                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2957  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2958  static void Uart_lHwEnableAscLinErrIntr(volatile uint8 HwUnit)
; Function Uart_lHwEnableAscLinErrIntr
.L176:
Uart_lHwEnableAscLinErrIntr:	.type	func

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2959  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2960    uint32 Offset;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2961  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2962    Offset = (uint32)HwUnit * UART_SRC_ADDROFFSET ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2963  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2964    /*Reserve bit access is ensured for SRC_ASCLIN0ERR register*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2965    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2966    UART_SRC_ASCLIN0ERRADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2967    /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2968    UART_SRC_ASCLINxERRADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2969    UART_SFR_RUNTIME_MODIFY32(*((volatile uint32 *)(void *)\ 
	mul	d15,d4,#3
	ld.w	d0,.2.cnt
.L614:
	fcall	.cocofun_8
.L615:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2970                   (UART_SRC_ASCLIN0ERRADDR + Offset)), ~UART_CLR_MASK_CLR_INTR,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2971                                                      UART_SET_MASK_CLR_INTR)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2972  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2973    /*Reserve bit access is ensured for SRC_ASCLIN0ERR register*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2974    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2975    UART_SRC_ASCLIN0ERRADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2976    /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2977    UART_SRC_ASCLINxERRADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2978    UART_SFR_RUNTIME_MODIFY32(*((volatile uint32 *)(void *)\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2979                 (UART_SRC_ASCLIN0ERRADDR + Offset)), ~UART_CLR_MASK_ENABLE_INTR,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2980                                                      UART_SET_MASK_ENABLE_INTR)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2981  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2982  }
	ret
.L609:
	
__Uart_lHwEnableAscLinErrIntr_function_end:
	.size	Uart_lHwEnableAscLinErrIntr,__Uart_lHwEnableAscLinErrIntr_function_end-Uart_lHwEnableAscLinErrIntr
.L286:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('.cocofun_8')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
; Function .cocofun_8
.L178:
.cocofun_8:	.type	func
; Function body .cocofun_8, coco_iter:0
	mov.a	a15,d0
	addsc.a	a15,a15,d15,#2
	ld.w	d15,[a15]
.L886:
	insert	d15,d15,#0,#31,#1
	movh	d0,#20992
.L887:
	or	d15,d0
	st.w	[a15],d15
.L1266:
	ld.w	d15,[a15]
.L888:
	insert	d15,d15,#0,#31,#1
.L891:
	insert	d15,d15,#1,#10,#1
	st.w	[a15],d15
.L885:
	fret
.L311:
	; End of function
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_lHwEnableAscLinRxIntr')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2983  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2984  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2985  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2986  ** Syntax           : static void Uart_lHwEnableAscLinRxIntr                  **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2987  **                      (uint8 HwUnit)                                        **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2988  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2989  ** Service ID       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2990  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2991  ** Sync/Async       : Synchronous                                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2992  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2993  ** Reentrancy       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2994  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2995  ** Parameters (in)  : HwUnit   : ASCLIN Hardware module no                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2996  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2997  ** Parameters (out) : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2998  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  2999  ** Return value     : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3000  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3001  ** Description      : This function clears and enables the  RX                **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3002  **                    interrupts in SRC registers.                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3003  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3004  static void Uart_lHwEnableAscLinRxIntr(volatile uint8 HwUnit)
; Function Uart_lHwEnableAscLinRxIntr
.L180:
Uart_lHwEnableAscLinRxIntr:	.type	func

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3005  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3006    uint32 Offset;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3007  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3008    Offset = (uint32)HwUnit * UART_SRC_ADDROFFSET ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3009  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3010    /*Reserve bit access is ensured for SRC_ASCLIN0RX register*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3011    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3012    UART_SRC_ASCLIN0RXADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3013    /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3014    UART_SRC_ASCLINxRXADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3015    UART_SFR_RUNTIME_MODIFY32(*((volatile uint32 *)(void *)\ 
	mul	d15,d4,#3
	ld.w	d0,.4.cnt
.L606:
	fcall	.cocofun_8
.L607:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3016                   (UART_SRC_ASCLIN0RXADDR + Offset)), ~UART_CLR_MASK_CLR_INTR,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3017                                                       UART_SET_MASK_CLR_INTR)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3018  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3019  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3020    /*Reserve bit access is ensured for SRC_ASCLIN0RX register*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3021    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3022    UART_SRC_ASCLIN0RXADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3023    /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3024    UART_SRC_ASCLINxRXADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3025    UART_SFR_RUNTIME_MODIFY32(*((volatile uint32 *)(void *)\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3026                (UART_SRC_ASCLIN0RXADDR + Offset)), ~UART_CLR_MASK_ENABLE_INTR,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3027                                                       UART_SET_MASK_ENABLE_INTR)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3028  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3029  }
	ret
.L602:
	
__Uart_lHwEnableAscLinRxIntr_function_end:
	.size	Uart_lHwEnableAscLinRxIntr,__Uart_lHwEnableAscLinRxIntr_function_end-Uart_lHwEnableAscLinRxIntr
.L281:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Uart_lHwEnableAscLinTxIntr')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3030  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3031  ** Syntax           : static void Uart_lHwEnableAscLinTxIntr                  **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3032  **                      (uint8 HwUnit)                                        **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3033  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3034  ** Service ID       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3035  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3036  ** Sync/Async       : Synchronous                                             **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3037  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3038  ** Reentrancy       : NA                                                      **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3039  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3040  ** Parameters (in)  : HwUnit   : ASCLIN Hardware module no                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3041  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3042  ** Parameters (out) : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3043  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3044  ** Return value     : None                                                    **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3045  **                                                                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3046  ** Description      : This function clears and enables the  TX                **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3047  **                    interrupts in SRC registers.                            **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3048  *******************************************************************************/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3049  static void Uart_lHwEnableAscLinTxIntr(volatile uint8 HwUnit)
; Function Uart_lHwEnableAscLinTxIntr
.L182:
Uart_lHwEnableAscLinTxIntr:	.type	func

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3050  {
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3051    uint32 Offset;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3052  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3053    Offset = (uint32)HwUnit * UART_SRC_ADDROFFSET ;
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3054  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3055    /*Reserve bit access is ensured for SRC_ASCLIN0TX register*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3056    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3057     UART_SRC_ASCLIN0TXADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3058    /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3059      UART_SRC_ASCLINxTXADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3060    UART_SFR_RUNTIME_MODIFY32(*((volatile uint32 *)(void *)\ 
	mul	d15,d4,#3
	ld.w	d0,.5.cnt
.L599:
	fcall	.cocofun_8
.L600:

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3061                 (UART_SRC_ASCLIN0TXADDR + Offset)), ~UART_CLR_MASK_CLR_INTR,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3062                                                          UART_SET_MASK_CLR_INTR)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3063  
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3064    /*Reserve bit access is ensured for SRC_ASCLIN0TX register*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3065    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is done on
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3066     UART_SRC_ASCLIN0TXADDR to access the SRC register for HW Unit passed*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3067    /*IFX_MISRA_RULE_11_05_STATUS=Attempts to cast away volatile from
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3068     UART_SRC_ASCLINxTXADDR to cast it for SFR access*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3069    UART_SFR_RUNTIME_MODIFY32(*((volatile uint32 *)(void *)\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3070                (UART_SRC_ASCLIN0TXADDR + Offset)), ~UART_CLR_MASK_ENABLE_INTR,\ 
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3071                                                      UART_SET_MASK_ENABLE_INTR)
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3072  }
	ret
.L595:
	
__Uart_lHwEnableAscLinTxIntr_function_end:
	.size	Uart_lHwEnableAscLinTxIntr,__Uart_lHwEnableAscLinTxIntr_function_end-Uart_lHwEnableAscLinTxIntr
.L276:
	; End of function
	
	.sdecl	'.zbss.Uart.Uart_kConfigPtr',data,cluster('Uart_kConfigPtr')
	.sect	'.zbss.Uart.Uart_kConfigPtr'
	.align	4
Uart_kConfigPtr:	.type	object
	.size	Uart_kConfigPtr,4
	.space	4
	.sdecl	'.zdata.Uart.Uart_BusChannelMap',data,cluster('Uart_BusChannelMap')
	.sect	'.zdata.Uart.Uart_BusChannelMap'
Uart_BusChannelMap:	.type	object
	.size	Uart_BusChannelMap,4
	.byte	255
	.space	3
	.sdecl	'.bss.Shared.DEFAULT_RAM_UNSPECIFIED',data,cluster('Uart_ChannelInfo')
	.sect	'.bss.Shared.DEFAULT_RAM_UNSPECIFIED'
	.align	4
Uart_ChannelInfo:	.type	object
	.size	Uart_ChannelInfo,60
	.space	60
	.sdecl	'.bss.Shared.DEFAULT_RAM_32BIT',data,cluster('Uart_ChLock')
	.sect	'.bss.Shared.DEFAULT_RAM_32BIT'
	.align	4
Uart_ChLock:	.type	object
	.size	Uart_ChLock,24
	.space	24
	.calls	'Uart_Init','Mcal_ResetENDINIT'
	.calls	'Uart_Init','Mcal_SetENDINIT'
	.calls	'Uart_Init','Uart_lHwInit'
	.calls	'Uart_Read','Mcal_LockResource'
	.calls	'Uart_Read','Uart_lEnableReadInterrupts'
	.calls	'Uart_Read','Uart_lHwEnableAscLinRxIntr'
	.calls	'Uart_Read','Uart_lHwEnableAscLinErrIntr'
	.calls	'Uart_Write','Mcal_LockResource'
	.calls	'Uart_Write','Uart_lWrite'
	.calls	'Uart_Write','Uart_lEnableWriteInterrupts'
	.calls	'Uart_Write','Uart_lHwEnableAscLinTxIntr'
	.calls	'Uart_Write','Uart_lHwEnableAscLinErrIntr'
	.calls	'Uart_AbortRead','Mcal_UnlockResource'
	.calls	'Uart_AbortRead','Uart_lClearReadInterrupts'
	.calls	'Uart_AbortRead','Uart_lHwDisableAscLinRxIntr'
	.calls	'Uart_AbortRead','Uart_lHwDisableAscLinErrIntr'
	.calls	'Uart_AbortRead','Uart_lHwInitRuntime'
	.calls	'Uart_AbortRead','__INDIRECT__'
	.calls	'Uart_AbortWrite','Mcal_UnlockResource'
	.calls	'Uart_AbortWrite','Uart_lClearWriteInterrupts'
	.calls	'Uart_AbortWrite','Uart_lHwDisableAscLinTxIntr'
	.calls	'Uart_AbortWrite','Uart_lHwDisableAscLinErrIntr'
	.calls	'Uart_AbortWrite','Uart_lHwInitRuntime'
	.calls	'Uart_AbortWrite','__INDIRECT__'
	.calls	'Uart_IsrReceive','Uart_lRead'
	.calls	'Uart_IsrReceive','Uart_lClearReadInterrupts'
	.calls	'Uart_IsrReceive','Uart_lHwDisableAscLinRxIntr'
	.calls	'Uart_IsrReceive','Mcal_UnlockResource'
	.calls	'Uart_IsrReceive','__INDIRECT__'
	.calls	'Uart_IsrTransmit','Uart_lClearWriteInterrupts'
	.calls	'Uart_IsrTransmit','Uart_lHwDisableAscLinTxIntr'
	.calls	'Uart_IsrTransmit','Uart_lWrite'
	.calls	'Uart_IsrTransmit','Uart_lEnableWriteInterrupts'
	.calls	'Uart_IsrError','Uart_lHwDisableAscLinErrIntr'
	.calls	'Uart_IsrError','Mcal_UnlockResource'
	.calls	'Uart_IsrError','__INDIRECT__'
	.calls	'Uart_Init','.cocofun_25'
	.calls	'Uart_Init','.cocofun_14'
	.calls	'Uart_lHwInit','.cocofun_10'
	.calls	'Uart_lHwInit','.cocofun_11'
	.calls	'Uart_lHwInit','.cocofun_17'
	.calls	'Uart_lHwInit','.cocofun_7'
	.calls	'.cocofun_11','.cocofun_22'
	.calls	'.cocofun_7','.cocofun_22'
	.calls	'Uart_lHwInitRuntime','.cocofun_10'
	.calls	'Uart_lHwInitRuntime','.cocofun_11'
	.calls	'Uart_lHwInitRuntime','.cocofun_17'
	.calls	'Uart_lHwInitRuntime','.cocofun_7'
	.calls	'Uart_Read','.cocofun_23'
	.calls	'Uart_Read','.cocofun_25'
	.calls	'Uart_lRead','.cocofun_12'
	.calls	'.cocofun_12','.cocofun_21'
	.calls	'.cocofun_21','.cocofun_25'
	.calls	'Uart_lEnableReadInterrupts','.cocofun_15'
	.calls	'Uart_Write','.cocofun_14'
	.calls	'Uart_Write','.cocofun_25'
	.calls	'Uart_Write','.cocofun_18'
	.calls	'.cocofun_18','.cocofun_24'
	.calls	'Uart_lWrite','.cocofun_12'
	.calls	'Uart_lEnableWriteInterrupts','.cocofun_15'
	.calls	'Uart_AbortRead','.cocofun_23'
	.calls	'Uart_AbortRead','.cocofun_21'
	.calls	'Uart_AbortWrite','.cocofun_19'
	.calls	'Uart_AbortWrite','.cocofun_20'
	.calls	'.cocofun_19','.cocofun_23'
	.calls	'Uart_GetStatus','.cocofun_12'
	.calls	'Uart_IsrReceive','.cocofun_13'
	.calls	'Uart_IsrReceive','.cocofun_20'
	.calls	'Uart_IsrReceive','.cocofun_14'
	.calls	'Uart_IsrTransmit','.cocofun_13'
	.calls	'Uart_IsrTransmit','.cocofun_20'
	.calls	'Uart_IsrTransmit','.cocofun_24'
	.calls	'Uart_IsrError','.cocofun_18'
	.calls	'Uart_IsrError','.cocofun_14'
	.calls	'Uart_IsrError','.cocofun_16'
	.calls	'Uart_IsrError','.cocofun_19'
	.calls	'.cocofun_16','.cocofun_21'
	.calls	'Uart_lHwDisableAscLinErrIntr','.cocofun_9'
	.calls	'Uart_lHwDisableAscLinRxIntr','.cocofun_9'
	.calls	'Uart_lHwDisableAscLinTxIntr','.cocofun_9'
	.calls	'Uart_lHwEnableAscLinErrIntr','.cocofun_8'
	.calls	'Uart_lHwEnableAscLinRxIntr','.cocofun_8'
	.calls	'Uart_lHwEnableAscLinTxIntr','.cocofun_8'
	.calls	'Uart_Init','',16
	.calls	'.cocofun_25','',0
	.calls	'.cocofun_14','',0
	.calls	'Uart_lHwInit','',0
	.calls	'.cocofun_17','',0
	.calls	'.cocofun_11','',0
	.calls	'.cocofun_22','',0
	.calls	'.cocofun_10','',0
	.calls	'.cocofun_7','',0
	.calls	'Uart_lHwInitRuntime','',0
	.calls	'Uart_Read','',0
	.calls	'.cocofun_23','',0
	.calls	'Uart_lRead','',0
	.calls	'.cocofun_12','',0
	.calls	'.cocofun_21','',0
	.calls	'Uart_lEnableReadInterrupts','',0
	.calls	'.cocofun_15','',0
	.calls	'Uart_lClearReadInterrupts','',0
	.calls	'Uart_Write','',0
	.calls	'.cocofun_18','',0
	.calls	'.cocofun_24','',0
	.calls	'Uart_lWrite','',0
	.calls	'Uart_lEnableWriteInterrupts','',0
	.calls	'Uart_lClearWriteInterrupts','',0
	.calls	'Uart_AbortRead','',0
	.calls	'Uart_AbortWrite','',0
	.calls	'.cocofun_20','',0
	.calls	'.cocofun_19','',0
	.calls	'Uart_GetStatus','',0
	.calls	'Uart_IsrReceive','',0
	.calls	'.cocofun_13','',0
	.calls	'Uart_IsrTransmit','',0
	.calls	'Uart_IsrError','',0
	.calls	'.cocofun_16','',0
	.calls	'Uart_lHwDisableAscLinErrIntr','',0
	.calls	'.cocofun_9','',0
	.calls	'Uart_lHwDisableAscLinRxIntr','',0
	.calls	'Uart_lHwDisableAscLinTxIntr','',0
	.calls	'Uart_lHwEnableAscLinErrIntr','',0
	.calls	'.cocofun_8','',0
	.calls	'Uart_lHwEnableAscLinRxIntr','',0
	.extern	Mcal_LockResource
	.extern	Mcal_UnlockResource
	.extern	Mcal_ResetENDINIT
	.extern	Mcal_SetENDINIT
	.extern	__INDIRECT__
	.calls	'Uart_lHwEnableAscLinTxIntr','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L184:
	.word	16934
	.half	3
	.word	.L185
	.byte	4
.L183:
	.byte	1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L186
.L411:
	.byte	2
	.byte	'unsigned char',0,1,8
.L443:
	.byte	2
	.byte	'unsigned long int',0,4,7
.L416:
	.byte	3
	.byte	'Uart_lHwInitClcReg',0,3,1,147,5,24
	.word	204
	.byte	1,1
.L419:
	.byte	4
	.byte	'HwUnit',0,1,147,5,49
	.word	204
.L421:
	.byte	4
	.byte	'Value',0,1,147,5,64
	.word	221
.L423:
	.byte	5,0,6
	.word	221
	.byte	7
	.byte	'Mcal_LockResource',0,2,227,2,15
	.word	221
	.byte	1,1,1,1,4
	.byte	'ResourcePtr',0,2,227,2,41
	.word	306
	.byte	0,8
	.byte	'Mcal_UnlockResource',0,2,246,2,14,1,1,1,1,4
	.byte	'ResourcePtr',0,2,246,2,42
	.word	306
	.byte	0,9
	.byte	'Mcal_ResetENDINIT',0,3,119,13,1,1,1,1,9
	.byte	'Mcal_SetENDINIT',0,3,146,1,13,1,1,1,1
.L530:
	.byte	10
	.byte	'Uart_ErrorIdType',0,4,253,3,14,1,11
	.byte	'UART_NO_ERR',0,0,11
	.byte	'UART_PARITY_ERR',0,1,11
	.byte	'UART_FRAME_ERR',0,2,11
	.byte	'UART_TXOVERFLOW_ERR',0,3,11
	.byte	'UART_RXOVERFLOW_ERR',0,4,11
	.byte	'UART_RXUNDERFLOW_ERR',0,5,0,12,1,1,13
	.word	466
	.byte	0,6
	.word	606
	.byte	14
	.byte	'Uart_NotificationPtrType',0,4,135,4,15
	.word	615
	.byte	15
	.byte	'UartNotifType',0,4,142,4,16,16,16
	.byte	'UartTransmitNotifPtr',0
	.word	620
	.byte	4,2,35,0,16
	.byte	'UartReceiveNotifPtr',0
	.word	620
	.byte	4,2,35,4,16
	.byte	'UartAbortTransmitNotifPtr',0
	.word	620
	.byte	4,2,35,8,16
	.byte	'UartAbortReceiveNotifPtr',0
	.word	620
	.byte	4,2,35,12,0
.L435:
	.byte	2
	.byte	'unsigned short int',0,2,7,15
	.byte	'Uart_ChannelType',0,4,155,4,16,32,16
	.byte	'UartNotif',0
	.word	654
	.byte	16,2,35,0,16
	.byte	'HwBrgNumerator',0
	.word	803
	.byte	2,2,35,16,16
	.byte	'HwBrgDenominator',0
	.word	803
	.byte	2,2,35,18,16
	.byte	'HwBitconPrescalar',0
	.word	803
	.byte	2,2,35,20,16
	.byte	'HwBitconOversampling',0
	.word	204
	.byte	1,2,35,22,16
	.byte	'HwModule',0
	.word	204
	.byte	1,2,35,23,16
	.byte	'StopBits',0
	.word	204
	.byte	1,2,35,24,16
	.byte	'DataLength',0
	.word	204
	.byte	1,2,35,25,16
	.byte	'RxPinSelection',0
	.word	204
	.byte	1,2,35,26,16
	.byte	'ParityEnable',0
	.word	204
	.byte	1,2,35,27,16
	.byte	'Parity',0
	.word	204
	.byte	1,2,35,28,16
	.byte	'CtsEnable',0
	.word	204
	.byte	1,2,35,29,16
	.byte	'CtsPolarity',0
	.word	204
	.byte	1,2,35,30,0,17
	.word	825
.L409:
	.byte	6
	.word	1133
	.byte	15
	.byte	'Uart_ConfigType',0,4,189,4,16,8,16
	.byte	'ChannelConfigPtr',0
	.word	1138
	.byte	4,2,35,0,16
	.byte	'NoOfChannels',0
	.word	204
	.byte	1,2,35,4,0,17
	.word	1143
.L406:
	.byte	6
	.word	1214
	.byte	6
	.word	606
.L430:
	.byte	10
	.byte	'Uart_ReturnType',0,4,203,4,14,1,11
	.byte	'UART_OK',0,0,11
	.byte	'UART_NOT_OK',0,1,11
	.byte	'UART_IS_BUSY',0,2,0,6
	.word	204
	.byte	6
	.word	204
.L433:
	.byte	14
	.byte	'Uart_MemPtrType',0,4,231,3,16
	.word	1296
	.byte	2
	.byte	'unsigned int',0,4,7,2
	.byte	'int',0,4,5,15
	.byte	'_Ifx_ASCLIN_CLC_Bits',0,5,118,16,4,18
	.byte	'DISR',0,1
	.word	204
	.byte	1,7,2,35,0,18
	.byte	'DISS',0,1
	.word	204
	.byte	1,6,2,35,0,18
	.byte	'reserved_2',0,1
	.word	204
	.byte	1,5,2,35,0,18
	.byte	'EDIS',0,1
	.word	204
	.byte	1,4,2,35,0,18
	.byte	'reserved_4',0,4
	.word	1326
	.byte	28,0,2,35,0,0,19,5,207,3,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	1349
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_IOCR_Bits',0,5,169,2,16,4,18
	.byte	'ALTI',0,1
	.word	204
	.byte	3,5,2,35,0,18
	.byte	'reserved_3',0,1
	.word	204
	.byte	1,4,2,35,0,18
	.byte	'DEPTH',0,2
	.word	803
	.byte	6,6,2,35,0,18
	.byte	'reserved_10',0,1
	.word	204
	.byte	6,0,2,35,1,18
	.byte	'CTS',0,1
	.word	204
	.byte	2,6,2,35,2,18
	.byte	'reserved_18',0,2
	.word	803
	.byte	7,7,2,35,2,18
	.byte	'RCPOL',0,1
	.word	204
	.byte	1,6,2,35,3,18
	.byte	'CPOL',0,1
	.word	204
	.byte	1,5,2,35,3,18
	.byte	'SPOL',0,1
	.word	204
	.byte	1,4,2,35,3,18
	.byte	'LB',0,1
	.word	204
	.byte	1,3,2,35,3,18
	.byte	'CTSEN',0,1
	.word	204
	.byte	1,2,2,35,3,18
	.byte	'RXM',0,1
	.word	204
	.byte	1,1,2,35,3,18
	.byte	'TXM',0,1
	.word	204
	.byte	1,0,2,35,3,0,19,5,151,4,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	1508
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_ID_Bits',0,5,161,2,16,4,18
	.byte	'MODREV',0,1
	.word	204
	.byte	8,0,2,35,0,18
	.byte	'MODTYPE',0,1
	.word	204
	.byte	8,0,2,35,1,18
	.byte	'MODNUMBER',0,2
	.word	803
	.byte	16,0,2,35,2,0,19,5,143,4,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	1803
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_TXFIFOCON_Bits',0,5,149,3,16,4,18
	.byte	'FLUSH',0,1
	.word	204
	.byte	1,7,2,35,0,18
	.byte	'ENO',0,1
	.word	204
	.byte	1,6,2,35,0,18
	.byte	'reserved_2',0,1
	.word	204
	.byte	4,2,2,35,0,18
	.byte	'INW',0,1
	.word	204
	.byte	2,0,2,35,0,18
	.byte	'INTLEVEL',0,1
	.word	204
	.byte	4,4,2,35,1,18
	.byte	'reserved_12',0,1
	.word	204
	.byte	4,0,2,35,1,18
	.byte	'FILL',0,1
	.word	204
	.byte	5,3,2,35,2,18
	.byte	'reserved_21',0,2
	.word	803
	.byte	11,0,2,35,2,0,19,5,247,4,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	1928
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_RXFIFOCON_Bits',0,5,129,3,16,4,18
	.byte	'FLUSH',0,1
	.word	204
	.byte	1,7,2,35,0,18
	.byte	'ENI',0,1
	.word	204
	.byte	1,6,2,35,0,18
	.byte	'reserved_2',0,1
	.word	204
	.byte	4,2,2,35,0,18
	.byte	'OUTW',0,1
	.word	204
	.byte	2,0,2,35,0,18
	.byte	'INTLEVEL',0,1
	.word	204
	.byte	4,4,2,35,1,18
	.byte	'reserved_12',0,1
	.word	204
	.byte	4,0,2,35,1,18
	.byte	'FILL',0,1
	.word	204
	.byte	5,3,2,35,2,18
	.byte	'reserved_21',0,2
	.word	803
	.byte	10,1,2,35,2,18
	.byte	'BUF',0,1
	.word	204
	.byte	1,0,2,35,3,0,19,5,231,4,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	2153
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_BITCON_Bits',0,5,88,16,4,18
	.byte	'PRESCALER',0,2
	.word	803
	.byte	12,4,2,35,0,18
	.byte	'reserved_12',0,1
	.word	204
	.byte	4,0,2,35,1,18
	.byte	'OVERSAMPLING',0,1
	.word	204
	.byte	4,4,2,35,2,18
	.byte	'reserved_20',0,1
	.word	204
	.byte	4,0,2,35,2,18
	.byte	'SAMPLEPOINT',0,1
	.word	204
	.byte	4,4,2,35,3,18
	.byte	'reserved_28',0,1
	.word	204
	.byte	3,1,2,35,3,18
	.byte	'SM',0,1
	.word	204
	.byte	1,0,2,35,3,0,19,5,183,3,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	2394
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_FRAMECON_Bits',0,5,145,2,16,4,18
	.byte	'reserved_0',0,1
	.word	204
	.byte	6,2,2,35,0,18
	.byte	'IDLE',0,2
	.word	803
	.byte	3,7,2,35,0,18
	.byte	'STOP',0,1
	.word	204
	.byte	3,4,2,35,1,18
	.byte	'LEAD',0,1
	.word	204
	.byte	3,1,2,35,1,18
	.byte	'reserved_15',0,1
	.word	204
	.byte	1,0,2,35,1,18
	.byte	'MODE',0,1
	.word	204
	.byte	2,6,2,35,2,18
	.byte	'reserved_18',0,2
	.word	803
	.byte	10,4,2,35,2,18
	.byte	'MSB',0,1
	.word	204
	.byte	1,3,2,35,3,18
	.byte	'CEN',0,1
	.word	204
	.byte	1,2,2,35,3,18
	.byte	'PEN',0,1
	.word	204
	.byte	1,1,2,35,3,18
	.byte	'ODD',0,1
	.word	204
	.byte	1,0,2,35,3,0,19,5,135,4,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	2615
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_DATCON_Bits',0,5,136,1,16,4,18
	.byte	'DATLEN',0,1
	.word	204
	.byte	4,4,2,35,0,18
	.byte	'reserved_4',0,2
	.word	803
	.byte	9,3,2,35,0,18
	.byte	'HO',0,1
	.word	204
	.byte	1,2,2,35,1,18
	.byte	'RM',0,1
	.word	204
	.byte	1,1,2,35,1,18
	.byte	'CSM',0,1
	.word	204
	.byte	1,0,2,35,1,18
	.byte	'RESPONSE',0,1
	.word	204
	.byte	8,0,2,35,2,18
	.byte	'reserved_24',0,1
	.word	204
	.byte	8,0,2,35,3,0,19,5,223,3,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	2880
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_BRG_Bits',0,5,109,16,4,18
	.byte	'DENOMINATOR',0,2
	.word	803
	.byte	12,4,2,35,0,18
	.byte	'reserved_12',0,1
	.word	204
	.byte	4,0,2,35,1,18
	.byte	'NUMERATOR',0,2
	.word	803
	.byte	12,4,2,35,2,18
	.byte	'reserved_28',0,1
	.word	204
	.byte	4,0,2,35,3,0,19,5,199,3,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	3077
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_BRD_Bits',0,5,100,16,4,18
	.byte	'LOWERLIMIT',0,1
	.word	204
	.byte	8,0,2,35,0,18
	.byte	'UPPERLIMIT',0,1
	.word	204
	.byte	8,0,2,35,1,18
	.byte	'MEASURED',0,2
	.word	803
	.byte	12,4,2,35,2,18
	.byte	'reserved_28',0,1
	.word	204
	.byte	4,0,2,35,3,0,19,5,191,3,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	3234
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_LIN_CON_Bits',0,5,216,2,16,4,18
	.byte	'reserved_0',0,4
	.word	1326
	.byte	23,9,2,35,0,18
	.byte	'CSI',0,1
	.word	204
	.byte	1,0,2,35,2,18
	.byte	'reserved_24',0,1
	.word	204
	.byte	1,7,2,35,3,18
	.byte	'CSEN',0,1
	.word	204
	.byte	1,6,2,35,3,18
	.byte	'MS',0,1
	.word	204
	.byte	1,5,2,35,3,18
	.byte	'ABD',0,1
	.word	204
	.byte	1,4,2,35,3,18
	.byte	'reserved_28',0,1
	.word	204
	.byte	4,0,2,35,3,0,19,5,191,4,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	3388
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_LIN_BTIMER_Bits',0,5,209,2,16,4,18
	.byte	'BREAK',0,1
	.word	204
	.byte	6,2,2,35,0,18
	.byte	'reserved_6',0,4
	.word	1326
	.byte	26,0,2,35,0,0,19,5,183,4,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	3588
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_LIN_HTIMER_Bits',0,5,228,2,16,4,18
	.byte	'HEADER',0,1
	.word	204
	.byte	8,0,2,35,0,18
	.byte	'reserved_8',0,4
	.word	1326
	.byte	24,0,2,35,0,0,19,5,199,4,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	3702
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_LIN',0,5,135,5,25,12,16
	.byte	'CON',0
	.word	3548
	.byte	4,2,35,0,16
	.byte	'BTIMER',0
	.word	3662
	.byte	4,2,35,4,16
	.byte	'HTIMER',0
	.word	3777
	.byte	4,2,35,8,0,20
	.word	3817
	.byte	15
	.byte	'_Ifx_ASCLIN_FLAGS_Bits',0,5,148,1,16,4,18
	.byte	'TH',0,1
	.word	204
	.byte	1,7,2,35,0,18
	.byte	'TR',0,1
	.word	204
	.byte	1,6,2,35,0,18
	.byte	'RH',0,1
	.word	204
	.byte	1,5,2,35,0,18
	.byte	'RR',0,1
	.word	204
	.byte	1,4,2,35,0,18
	.byte	'reserved_4',0,1
	.word	204
	.byte	1,3,2,35,0,18
	.byte	'FED',0,1
	.word	204
	.byte	1,2,2,35,0,18
	.byte	'RED',0,1
	.word	204
	.byte	1,1,2,35,0,18
	.byte	'reserved_7',0,2
	.word	803
	.byte	6,3,2,35,0,18
	.byte	'TWRQ',0,1
	.word	204
	.byte	1,2,2,35,1,18
	.byte	'THRQ',0,1
	.word	204
	.byte	1,1,2,35,1,18
	.byte	'TRRQ',0,1
	.word	204
	.byte	1,0,2,35,1,18
	.byte	'PE',0,1
	.word	204
	.byte	1,7,2,35,2,18
	.byte	'TC',0,1
	.word	204
	.byte	1,6,2,35,2,18
	.byte	'FE',0,1
	.word	204
	.byte	1,5,2,35,2,18
	.byte	'HT',0,1
	.word	204
	.byte	1,4,2,35,2,18
	.byte	'RT',0,1
	.word	204
	.byte	1,3,2,35,2,18
	.byte	'BD',0,1
	.word	204
	.byte	1,2,2,35,2,18
	.byte	'LP',0,1
	.word	204
	.byte	1,1,2,35,2,18
	.byte	'LA',0,1
	.word	204
	.byte	1,0,2,35,2,18
	.byte	'LC',0,1
	.word	204
	.byte	1,7,2,35,3,18
	.byte	'CE',0,1
	.word	204
	.byte	1,6,2,35,3,18
	.byte	'RFO',0,1
	.word	204
	.byte	1,5,2,35,3,18
	.byte	'RFU',0,1
	.word	204
	.byte	1,4,2,35,3,18
	.byte	'RFL',0,1
	.word	204
	.byte	1,3,2,35,3,18
	.byte	'reserved_29',0,1
	.word	204
	.byte	1,2,2,35,3,18
	.byte	'TFO',0,1
	.word	204
	.byte	1,1,2,35,3,18
	.byte	'TFL',0,1
	.word	204
	.byte	1,0,2,35,3,0,19,5,231,3,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	3890
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_FLAGSSET_Bits',0,5,241,1,16,4,18
	.byte	'THS',0,1
	.word	204
	.byte	1,7,2,35,0,18
	.byte	'TRS',0,1
	.word	204
	.byte	1,6,2,35,0,18
	.byte	'RHS',0,1
	.word	204
	.byte	1,5,2,35,0,18
	.byte	'RRS',0,1
	.word	204
	.byte	1,4,2,35,0,18
	.byte	'reserved_4',0,1
	.word	204
	.byte	1,3,2,35,0,18
	.byte	'FEDS',0,1
	.word	204
	.byte	1,2,2,35,0,18
	.byte	'REDS',0,1
	.word	204
	.byte	1,1,2,35,0,18
	.byte	'reserved_7',0,2
	.word	803
	.byte	6,3,2,35,0,18
	.byte	'TWRQS',0,1
	.word	204
	.byte	1,2,2,35,1,18
	.byte	'THRQS',0,1
	.word	204
	.byte	1,1,2,35,1,18
	.byte	'TRRQS',0,1
	.word	204
	.byte	1,0,2,35,1,18
	.byte	'PES',0,1
	.word	204
	.byte	1,7,2,35,2,18
	.byte	'TCS',0,1
	.word	204
	.byte	1,6,2,35,2,18
	.byte	'FES',0,1
	.word	204
	.byte	1,5,2,35,2,18
	.byte	'HTS',0,1
	.word	204
	.byte	1,4,2,35,2,18
	.byte	'RTS',0,1
	.word	204
	.byte	1,3,2,35,2,18
	.byte	'BDS',0,1
	.word	204
	.byte	1,2,2,35,2,18
	.byte	'LPS',0,1
	.word	204
	.byte	1,1,2,35,2,18
	.byte	'LAS',0,1
	.word	204
	.byte	1,0,2,35,2,18
	.byte	'LCS',0,1
	.word	204
	.byte	1,7,2,35,3,18
	.byte	'CES',0,1
	.word	204
	.byte	1,6,2,35,3,18
	.byte	'RFOS',0,1
	.word	204
	.byte	1,5,2,35,3,18
	.byte	'RFUS',0,1
	.word	204
	.byte	1,4,2,35,3,18
	.byte	'RFLS',0,1
	.word	204
	.byte	1,3,2,35,3,18
	.byte	'reserved_29',0,1
	.word	204
	.byte	1,2,2,35,3,18
	.byte	'TFOS',0,1
	.word	204
	.byte	1,1,2,35,3,18
	.byte	'TFLS',0,1
	.word	204
	.byte	1,0,2,35,3,0,19,5,255,3,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	4376
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_FLAGSCLEAR_Bits',0,5,180,1,16,4,18
	.byte	'THC',0,1
	.word	204
	.byte	1,7,2,35,0,18
	.byte	'TRC',0,1
	.word	204
	.byte	1,6,2,35,0,18
	.byte	'RHC',0,1
	.word	204
	.byte	1,5,2,35,0,18
	.byte	'RRC',0,1
	.word	204
	.byte	1,4,2,35,0,18
	.byte	'reserved_4',0,1
	.word	204
	.byte	1,3,2,35,0,18
	.byte	'FEDC',0,1
	.word	204
	.byte	1,2,2,35,0,18
	.byte	'REDC',0,1
	.word	204
	.byte	1,1,2,35,0,18
	.byte	'reserved_7',0,2
	.word	803
	.byte	6,3,2,35,0,18
	.byte	'TWRQC',0,1
	.word	204
	.byte	1,2,2,35,1,18
	.byte	'THRQC',0,1
	.word	204
	.byte	1,1,2,35,1,18
	.byte	'TRRQC',0,1
	.word	204
	.byte	1,0,2,35,1,18
	.byte	'PEC',0,1
	.word	204
	.byte	1,7,2,35,2,18
	.byte	'TCC',0,1
	.word	204
	.byte	1,6,2,35,2,18
	.byte	'FEC',0,1
	.word	204
	.byte	1,5,2,35,2,18
	.byte	'HTC',0,1
	.word	204
	.byte	1,4,2,35,2,18
	.byte	'RTC',0,1
	.word	204
	.byte	1,3,2,35,2,18
	.byte	'BDC',0,1
	.word	204
	.byte	1,2,2,35,2,18
	.byte	'LPC',0,1
	.word	204
	.byte	1,1,2,35,2,18
	.byte	'LAC',0,1
	.word	204
	.byte	1,0,2,35,2,18
	.byte	'LCC',0,1
	.word	204
	.byte	1,7,2,35,3,18
	.byte	'CEC',0,1
	.word	204
	.byte	1,6,2,35,3,18
	.byte	'RFOC',0,1
	.word	204
	.byte	1,5,2,35,3,18
	.byte	'RFUC',0,1
	.word	204
	.byte	1,4,2,35,3,18
	.byte	'RFLC',0,1
	.word	204
	.byte	1,3,2,35,3,18
	.byte	'reserved_29',0,1
	.word	204
	.byte	1,2,2,35,3,18
	.byte	'TFOC',0,1
	.word	204
	.byte	1,1,2,35,3,18
	.byte	'TFLC',0,1
	.word	204
	.byte	1,0,2,35,3,0,19,5,239,3,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	4889
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_FLAGSENABLE_Bits',0,5,212,1,16,4,18
	.byte	'THE',0,1
	.word	204
	.byte	1,7,2,35,0,18
	.byte	'TRE',0,1
	.word	204
	.byte	1,6,2,35,0,18
	.byte	'RHE',0,1
	.word	204
	.byte	1,5,2,35,0,18
	.byte	'RRE',0,1
	.word	204
	.byte	1,4,2,35,0,18
	.byte	'reserved_4',0,1
	.word	204
	.byte	1,3,2,35,0,18
	.byte	'FEDE',0,1
	.word	204
	.byte	1,2,2,35,0,18
	.byte	'REDE',0,1
	.word	204
	.byte	1,1,2,35,0,18
	.byte	'reserved_7',0,2
	.word	803
	.byte	9,0,2,35,0,18
	.byte	'PEE',0,1
	.word	204
	.byte	1,7,2,35,2,18
	.byte	'TCE',0,1
	.word	204
	.byte	1,6,2,35,2,18
	.byte	'FEE',0,1
	.word	204
	.byte	1,5,2,35,2,18
	.byte	'HTE',0,1
	.word	204
	.byte	1,4,2,35,2,18
	.byte	'RTE',0,1
	.word	204
	.byte	1,3,2,35,2,18
	.byte	'BDE',0,1
	.word	204
	.byte	1,2,2,35,2,18
	.byte	'LPE',0,1
	.word	204
	.byte	1,1,2,35,2,18
	.byte	'ABE',0,1
	.word	204
	.byte	1,0,2,35,2,18
	.byte	'LCE',0,1
	.word	204
	.byte	1,7,2,35,3,18
	.byte	'CEE',0,1
	.word	204
	.byte	1,6,2,35,3,18
	.byte	'RFOE',0,1
	.word	204
	.byte	1,5,2,35,3,18
	.byte	'RFUE',0,1
	.word	204
	.byte	1,4,2,35,3,18
	.byte	'RFLE',0,1
	.word	204
	.byte	1,3,2,35,3,18
	.byte	'reserved_29',0,1
	.word	204
	.byte	1,2,2,35,3,18
	.byte	'TFOE',0,1
	.word	204
	.byte	1,1,2,35,3,18
	.byte	'TFLE',0,1
	.word	204
	.byte	1,0,2,35,3,0,19,5,247,3,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	5404
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_TXDATA_Bits',0,5,143,3,16,4,18
	.byte	'DATA',0,4
	.word	1326
	.byte	32,0,2,35,0,0,19,5,239,4,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	5869
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_RXDATA_Bits',0,5,245,2,16,4,18
	.byte	'DATA',0,4
	.word	1326
	.byte	32,0,2,35,0,0,19,5,215,4,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	5956
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_CSR_Bits',0,5,128,1,16,4,18
	.byte	'CLKSEL',0,1
	.word	204
	.byte	5,3,2,35,0,18
	.byte	'reserved_5',0,4
	.word	1326
	.byte	26,1,2,35,0,18
	.byte	'CON',0,1
	.word	204
	.byte	1,0,2,35,3,0,19,5,215,3,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	6043
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_RXDATAD_Bits',0,5,251,2,16,4,18
	.byte	'DATA',0,4
	.word	1326
	.byte	32,0,2,35,0,0,19,5,223,4,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	6166
	.byte	4,2,35,0,0,21,148,1
	.word	204
	.byte	22,147,1,0,15
	.byte	'_Ifx_ASCLIN_OCS_Bits',0,5,235,2,16,4,18
	.byte	'reserved_0',0,4
	.word	1326
	.byte	24,8,2,35,0,18
	.byte	'SUS',0,1
	.word	204
	.byte	4,4,2,35,3,18
	.byte	'SUS_P',0,1
	.word	204
	.byte	1,3,2,35,3,18
	.byte	'SUSSTA',0,1
	.word	204
	.byte	1,2,2,35,3,18
	.byte	'reserved_30',0,1
	.word	204
	.byte	2,0,2,35,3,0,19,5,207,4,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	6265
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_KRSTCLR_Bits',0,5,202,2,16,4,18
	.byte	'CLR',0,1
	.word	204
	.byte	1,7,2,35,0,18
	.byte	'reserved_1',0,4
	.word	1326
	.byte	31,0,2,35,0,0,19,5,175,4,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	6428
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_KRST1_Bits',0,5,195,2,16,4,18
	.byte	'RST',0,1
	.word	204
	.byte	1,7,2,35,0,18
	.byte	'reserved_1',0,4
	.word	1326
	.byte	31,0,2,35,0,0,19,5,167,4,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	6537
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_KRST0_Bits',0,5,187,2,16,4,18
	.byte	'RST',0,1
	.word	204
	.byte	1,7,2,35,0,18
	.byte	'RSTSTAT',0,1
	.word	204
	.byte	1,6,2,35,0,18
	.byte	'reserved_2',0,4
	.word	1326
	.byte	30,0,2,35,0,0,19,5,159,4,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	6644
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_ACCEN1_Bits',0,5,82,16,4,18
	.byte	'reserved_0',0,4
	.word	1326
	.byte	32,0,2,35,0,0,19,5,175,3,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	6770
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN_ACCEN0_Bits',0,5,45,16,4,18
	.byte	'EN0',0,1
	.word	204
	.byte	1,7,2,35,0,18
	.byte	'EN1',0,1
	.word	204
	.byte	1,6,2,35,0,18
	.byte	'EN2',0,1
	.word	204
	.byte	1,5,2,35,0,18
	.byte	'EN3',0,1
	.word	204
	.byte	1,4,2,35,0,18
	.byte	'EN4',0,1
	.word	204
	.byte	1,3,2,35,0,18
	.byte	'EN5',0,1
	.word	204
	.byte	1,2,2,35,0,18
	.byte	'EN6',0,1
	.word	204
	.byte	1,1,2,35,0,18
	.byte	'EN7',0,1
	.word	204
	.byte	1,0,2,35,0,18
	.byte	'EN8',0,1
	.word	204
	.byte	1,7,2,35,1,18
	.byte	'EN9',0,1
	.word	204
	.byte	1,6,2,35,1,18
	.byte	'EN10',0,1
	.word	204
	.byte	1,5,2,35,1,18
	.byte	'EN11',0,1
	.word	204
	.byte	1,4,2,35,1,18
	.byte	'EN12',0,1
	.word	204
	.byte	1,3,2,35,1,18
	.byte	'EN13',0,1
	.word	204
	.byte	1,2,2,35,1,18
	.byte	'EN14',0,1
	.word	204
	.byte	1,1,2,35,1,18
	.byte	'EN15',0,1
	.word	204
	.byte	1,0,2,35,1,18
	.byte	'EN16',0,1
	.word	204
	.byte	1,7,2,35,2,18
	.byte	'EN17',0,1
	.word	204
	.byte	1,6,2,35,2,18
	.byte	'EN18',0,1
	.word	204
	.byte	1,5,2,35,2,18
	.byte	'EN19',0,1
	.word	204
	.byte	1,4,2,35,2,18
	.byte	'EN20',0,1
	.word	204
	.byte	1,3,2,35,2,18
	.byte	'EN21',0,1
	.word	204
	.byte	1,2,2,35,2,18
	.byte	'EN22',0,1
	.word	204
	.byte	1,1,2,35,2,18
	.byte	'EN23',0,1
	.word	204
	.byte	1,0,2,35,2,18
	.byte	'EN24',0,1
	.word	204
	.byte	1,7,2,35,3,18
	.byte	'EN25',0,1
	.word	204
	.byte	1,6,2,35,3,18
	.byte	'EN26',0,1
	.word	204
	.byte	1,5,2,35,3,18
	.byte	'EN27',0,1
	.word	204
	.byte	1,4,2,35,3,18
	.byte	'EN28',0,1
	.word	204
	.byte	1,3,2,35,3,18
	.byte	'EN29',0,1
	.word	204
	.byte	1,2,2,35,3,18
	.byte	'EN30',0,1
	.word	204
	.byte	1,1,2,35,3,18
	.byte	'EN31',0,1
	.word	204
	.byte	1,0,2,35,3,0,19,5,167,3,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	6862
	.byte	4,2,35,0,0,15
	.byte	'_Ifx_ASCLIN',0,5,153,5,25,128,2,16
	.byte	'CLC',0
	.word	1468
	.byte	4,2,35,0,16
	.byte	'IOCR',0
	.word	1763
	.byte	4,2,35,4,16
	.byte	'ID',0
	.word	1888
	.byte	4,2,35,8,16
	.byte	'TXFIFOCON',0
	.word	2113
	.byte	4,2,35,12,16
	.byte	'RXFIFOCON',0
	.word	2354
	.byte	4,2,35,16,16
	.byte	'BITCON',0
	.word	2575
	.byte	4,2,35,20,16
	.byte	'FRAMECON',0
	.word	2840
	.byte	4,2,35,24,16
	.byte	'DATCON',0
	.word	3037
	.byte	4,2,35,28,16
	.byte	'BRG',0
	.word	3194
	.byte	4,2,35,32,16
	.byte	'BRD',0
	.word	3348
	.byte	4,2,35,36,16
	.byte	'LIN',0
	.word	3885
	.byte	12,2,35,40,16
	.byte	'FLAGS',0
	.word	4336
	.byte	4,2,35,52,16
	.byte	'FLAGSSET',0
	.word	4849
	.byte	4,2,35,56,16
	.byte	'FLAGSCLEAR',0
	.word	5364
	.byte	4,2,35,60,16
	.byte	'FLAGSENABLE',0
	.word	5829
	.byte	4,2,35,64,16
	.byte	'TXDATA',0
	.word	5916
	.byte	4,2,35,68,16
	.byte	'RXDATA',0
	.word	6003
	.byte	4,2,35,72,16
	.byte	'CSR',0
	.word	6126
	.byte	4,2,35,76,16
	.byte	'RXDATAD',0
	.word	6214
	.byte	4,2,35,80,16
	.byte	'reserved_54',0
	.word	6254
	.byte	148,1,2,35,84,16
	.byte	'OCS',0
	.word	6388
	.byte	4,3,35,232,1,16
	.byte	'KRSTCLR',0
	.word	6497
	.byte	4,3,35,236,1,16
	.byte	'KRST1',0
	.word	6604
	.byte	4,3,35,240,1,16
	.byte	'KRST0',0
	.word	6730
	.byte	4,3,35,244,1,16
	.byte	'ACCEN1',0
	.word	6822
	.byte	4,3,35,248,1,16
	.byte	'ACCEN0',0
	.word	7394
	.byte	4,3,35,252,1,0,20
	.word	7434
.L438:
	.byte	6
	.word	7876
.L510:
	.byte	10
	.byte	'Uart_StatusType',0,4,215,4,14,1,11
	.byte	'UART_IDLE',0,0,11
	.byte	'UART_UNINIT',0,1,11
	.byte	'UART_BUSY',0,2,0,23
	.word	242
	.byte	24
	.word	273
	.byte	24
	.word	289
	.byte	5,0
.L596:
	.byte	20
	.word	204
.L603:
	.byte	20
	.word	204
.L610:
	.byte	20
	.word	204
.L618:
	.byte	20
	.word	204
.L624:
	.byte	20
	.word	204
.L630:
	.byte	20
	.word	204
	.byte	25
	.byte	'__INDIRECT__',0,1,1,1,1,1,1,26,1,6
	.word	8014
	.byte	14
	.byte	'__codeptr',0,1,1,1
	.word	8016
	.byte	14
	.byte	'Ifx_ASCLIN_ACCEN0_Bits',0,5,79,3
	.word	6862
	.byte	14
	.byte	'Ifx_ASCLIN_ACCEN1_Bits',0,5,85,3
	.word	6770
	.byte	14
	.byte	'Ifx_ASCLIN_BITCON_Bits',0,5,97,3
	.word	2394
	.byte	14
	.byte	'Ifx_ASCLIN_BRD_Bits',0,5,106,3
	.word	3234
	.byte	14
	.byte	'Ifx_ASCLIN_BRG_Bits',0,5,115,3
	.word	3077
	.byte	14
	.byte	'Ifx_ASCLIN_CLC_Bits',0,5,125,3
	.word	1349
	.byte	14
	.byte	'Ifx_ASCLIN_CSR_Bits',0,5,133,1,3
	.word	6043
	.byte	14
	.byte	'Ifx_ASCLIN_DATCON_Bits',0,5,145,1,3
	.word	2880
	.byte	14
	.byte	'Ifx_ASCLIN_FLAGS_Bits',0,5,177,1,3
	.word	3890
	.byte	14
	.byte	'Ifx_ASCLIN_FLAGSCLEAR_Bits',0,5,209,1,3
	.word	4889
	.byte	14
	.byte	'Ifx_ASCLIN_FLAGSENABLE_Bits',0,5,238,1,3
	.word	5404
	.byte	14
	.byte	'Ifx_ASCLIN_FLAGSSET_Bits',0,5,142,2,3
	.word	4376
	.byte	14
	.byte	'Ifx_ASCLIN_FRAMECON_Bits',0,5,158,2,3
	.word	2615
	.byte	14
	.byte	'Ifx_ASCLIN_ID_Bits',0,5,166,2,3
	.word	1803
	.byte	14
	.byte	'Ifx_ASCLIN_IOCR_Bits',0,5,184,2,3
	.word	1508
	.byte	14
	.byte	'Ifx_ASCLIN_KRST0_Bits',0,5,192,2,3
	.word	6644
	.byte	14
	.byte	'Ifx_ASCLIN_KRST1_Bits',0,5,199,2,3
	.word	6537
	.byte	14
	.byte	'Ifx_ASCLIN_KRSTCLR_Bits',0,5,206,2,3
	.word	6428
	.byte	14
	.byte	'Ifx_ASCLIN_LIN_BTIMER_Bits',0,5,213,2,3
	.word	3588
	.byte	14
	.byte	'Ifx_ASCLIN_LIN_CON_Bits',0,5,225,2,3
	.word	3388
	.byte	14
	.byte	'Ifx_ASCLIN_LIN_HTIMER_Bits',0,5,232,2,3
	.word	3702
	.byte	14
	.byte	'Ifx_ASCLIN_OCS_Bits',0,5,242,2,3
	.word	6265
	.byte	14
	.byte	'Ifx_ASCLIN_RXDATA_Bits',0,5,248,2,3
	.word	5956
	.byte	14
	.byte	'Ifx_ASCLIN_RXDATAD_Bits',0,5,254,2,3
	.word	6166
	.byte	14
	.byte	'Ifx_ASCLIN_RXFIFOCON_Bits',0,5,140,3,3
	.word	2153
	.byte	14
	.byte	'Ifx_ASCLIN_TXDATA_Bits',0,5,146,3,3
	.word	5869
	.byte	14
	.byte	'Ifx_ASCLIN_TXFIFOCON_Bits',0,5,159,3,3
	.word	1928
	.byte	14
	.byte	'Ifx_ASCLIN_ACCEN0',0,5,172,3,3
	.word	7394
	.byte	14
	.byte	'Ifx_ASCLIN_ACCEN1',0,5,180,3,3
	.word	6822
	.byte	14
	.byte	'Ifx_ASCLIN_BITCON',0,5,188,3,3
	.word	2575
	.byte	14
	.byte	'Ifx_ASCLIN_BRD',0,5,196,3,3
	.word	3348
	.byte	14
	.byte	'Ifx_ASCLIN_BRG',0,5,204,3,3
	.word	3194
	.byte	14
	.byte	'Ifx_ASCLIN_CLC',0,5,212,3,3
	.word	1468
	.byte	14
	.byte	'Ifx_ASCLIN_CSR',0,5,220,3,3
	.word	6126
	.byte	14
	.byte	'Ifx_ASCLIN_DATCON',0,5,228,3,3
	.word	3037
	.byte	14
	.byte	'Ifx_ASCLIN_FLAGS',0,5,236,3,3
	.word	4336
	.byte	14
	.byte	'Ifx_ASCLIN_FLAGSCLEAR',0,5,244,3,3
	.word	5364
	.byte	14
	.byte	'Ifx_ASCLIN_FLAGSENABLE',0,5,252,3,3
	.word	5829
	.byte	14
	.byte	'Ifx_ASCLIN_FLAGSSET',0,5,132,4,3
	.word	4849
	.byte	14
	.byte	'Ifx_ASCLIN_FRAMECON',0,5,140,4,3
	.word	2840
	.byte	14
	.byte	'Ifx_ASCLIN_ID',0,5,148,4,3
	.word	1888
	.byte	14
	.byte	'Ifx_ASCLIN_IOCR',0,5,156,4,3
	.word	1763
	.byte	14
	.byte	'Ifx_ASCLIN_KRST0',0,5,164,4,3
	.word	6730
	.byte	14
	.byte	'Ifx_ASCLIN_KRST1',0,5,172,4,3
	.word	6604
	.byte	14
	.byte	'Ifx_ASCLIN_KRSTCLR',0,5,180,4,3
	.word	6497
	.byte	14
	.byte	'Ifx_ASCLIN_LIN_BTIMER',0,5,188,4,3
	.word	3662
	.byte	14
	.byte	'Ifx_ASCLIN_LIN_CON',0,5,196,4,3
	.word	3548
	.byte	14
	.byte	'Ifx_ASCLIN_LIN_HTIMER',0,5,204,4,3
	.word	3777
	.byte	14
	.byte	'Ifx_ASCLIN_OCS',0,5,212,4,3
	.word	6388
	.byte	14
	.byte	'Ifx_ASCLIN_RXDATA',0,5,220,4,3
	.word	6003
	.byte	14
	.byte	'Ifx_ASCLIN_RXDATAD',0,5,228,4,3
	.word	6214
	.byte	14
	.byte	'Ifx_ASCLIN_RXFIFOCON',0,5,236,4,3
	.word	2354
	.byte	14
	.byte	'Ifx_ASCLIN_TXDATA',0,5,244,4,3
	.word	5916
	.byte	14
	.byte	'Ifx_ASCLIN_TXFIFOCON',0,5,252,4,3
	.word	2113
	.byte	20
	.word	3817
	.byte	14
	.byte	'Ifx_ASCLIN_LIN',0,5,140,5,3
	.word	9638
	.byte	20
	.word	7434
	.byte	14
	.byte	'Ifx_ASCLIN',0,5,181,5,3
	.word	9667
	.byte	15
	.byte	'_Ifx_SRC_SRCR_Bits',0,6,45,16,4,18
	.byte	'SRPN',0,1
	.word	204
	.byte	8,0,2,35,0,18
	.byte	'reserved_8',0,1
	.word	204
	.byte	2,6,2,35,1,18
	.byte	'SRE',0,1
	.word	204
	.byte	1,5,2,35,1,18
	.byte	'TOS',0,1
	.word	204
	.byte	2,3,2,35,1,18
	.byte	'reserved_13',0,1
	.word	204
	.byte	3,0,2,35,1,18
	.byte	'ECC',0,1
	.word	204
	.byte	6,2,2,35,2,18
	.byte	'reserved_22',0,1
	.word	204
	.byte	2,0,2,35,2,18
	.byte	'SRR',0,1
	.word	204
	.byte	1,7,2,35,3,18
	.byte	'CLRR',0,1
	.word	204
	.byte	1,6,2,35,3,18
	.byte	'SETR',0,1
	.word	204
	.byte	1,5,2,35,3,18
	.byte	'IOV',0,1
	.word	204
	.byte	1,4,2,35,3,18
	.byte	'IOVCLR',0,1
	.word	204
	.byte	1,3,2,35,3,18
	.byte	'SWS',0,1
	.word	204
	.byte	1,2,2,35,3,18
	.byte	'SWSCLR',0,1
	.word	204
	.byte	1,1,2,35,3,18
	.byte	'reserved_31',0,1
	.word	204
	.byte	1,0,2,35,3,0,14
	.byte	'Ifx_SRC_SRCR_Bits',0,6,62,3
	.word	9692
	.byte	19,6,70,9,4,16
	.byte	'U',0
	.word	1326
	.byte	4,2,35,0,16
	.byte	'I',0
	.word	1342
	.byte	4,2,35,0,16
	.byte	'B',0
	.word	9692
	.byte	4,2,35,0,0,14
	.byte	'Ifx_SRC_SRCR',0,6,75,3
	.word	10008
	.byte	15
	.byte	'_Ifx_SRC_AGBT',0,6,86,25,4,16
	.byte	'SR',0
	.word	10008
	.byte	4,2,35,0,0,20
	.word	10068
	.byte	14
	.byte	'Ifx_SRC_AGBT',0,6,89,3
	.word	10100
	.byte	15
	.byte	'_Ifx_SRC_ASCLIN',0,6,92,25,12,16
	.byte	'TX',0
	.word	10008
	.byte	4,2,35,0,16
	.byte	'RX',0
	.word	10008
	.byte	4,2,35,4,16
	.byte	'ERR',0
	.word	10008
	.byte	4,2,35,8,0,20
	.word	10126
	.byte	14
	.byte	'Ifx_SRC_ASCLIN',0,6,97,3
	.word	10185
	.byte	15
	.byte	'_Ifx_SRC_BCUSPB',0,6,100,25,4,16
	.byte	'SBSRC',0
	.word	10008
	.byte	4,2,35,0,0,20
	.word	10213
	.byte	14
	.byte	'Ifx_SRC_BCUSPB',0,6,103,3
	.word	10250
	.byte	21,64
	.word	10008
	.byte	22,15,0,15
	.byte	'_Ifx_SRC_CAN',0,6,106,25,64,16
	.byte	'INT',0
	.word	10278
	.byte	64,2,35,0,0,20
	.word	10287
	.byte	14
	.byte	'Ifx_SRC_CAN',0,6,109,3
	.word	10319
	.byte	15
	.byte	'_Ifx_SRC_CCU6',0,6,112,25,16,16
	.byte	'SR0',0
	.word	10008
	.byte	4,2,35,0,16
	.byte	'SR1',0
	.word	10008
	.byte	4,2,35,4,16
	.byte	'SR2',0
	.word	10008
	.byte	4,2,35,8,16
	.byte	'SR3',0
	.word	10008
	.byte	4,2,35,12,0,20
	.word	10344
	.byte	14
	.byte	'Ifx_SRC_CCU6',0,6,118,3
	.word	10416
	.byte	21,8
	.word	10008
	.byte	22,1,0,15
	.byte	'_Ifx_SRC_CERBERUS',0,6,121,25,8,16
	.byte	'SR',0
	.word	10442
	.byte	8,2,35,0,0,20
	.word	10451
	.byte	14
	.byte	'Ifx_SRC_CERBERUS',0,6,124,3
	.word	10487
	.byte	15
	.byte	'_Ifx_SRC_CIF',0,6,127,25,16,16
	.byte	'MI',0
	.word	10008
	.byte	4,2,35,0,16
	.byte	'MIEP',0
	.word	10008
	.byte	4,2,35,4,16
	.byte	'ISP',0
	.word	10008
	.byte	4,2,35,8,16
	.byte	'MJPEG',0
	.word	10008
	.byte	4,2,35,12,0,20
	.word	10517
	.byte	14
	.byte	'Ifx_SRC_CIF',0,6,133,1,3
	.word	10590
	.byte	15
	.byte	'_Ifx_SRC_CPU',0,6,136,1,25,4,16
	.byte	'SBSRC',0
	.word	10008
	.byte	4,2,35,0,0,20
	.word	10616
	.byte	14
	.byte	'Ifx_SRC_CPU',0,6,139,1,3
	.word	10651
	.byte	21,24
	.word	10008
	.byte	22,5,0,15
	.byte	'_Ifx_SRC_DAM',0,6,142,1,25,24,16
	.byte	'SR',0
	.word	10677
	.byte	24,2,35,0,0,20
	.word	10686
	.byte	14
	.byte	'Ifx_SRC_DAM',0,6,145,1,3
	.word	10718
	.byte	21,12
	.word	204
	.byte	22,11,0,21,128,2
	.word	10008
	.byte	22,63,0,15
	.byte	'_Ifx_SRC_DMA',0,6,148,1,25,144,2,16
	.byte	'ERR',0
	.word	10008
	.byte	4,2,35,0,16
	.byte	'reserved_4',0
	.word	10744
	.byte	12,2,35,4,16
	.byte	'CH',0
	.word	10753
	.byte	128,2,2,35,16,0,20
	.word	10763
	.byte	14
	.byte	'Ifx_SRC_DMA',0,6,153,1,3
	.word	10830
	.byte	15
	.byte	'_Ifx_SRC_DSADC',0,6,156,1,25,8,16
	.byte	'SRM',0
	.word	10008
	.byte	4,2,35,0,16
	.byte	'SRA',0
	.word	10008
	.byte	4,2,35,4,0,20
	.word	10856
	.byte	14
	.byte	'Ifx_SRC_DSADC',0,6,160,1,3
	.word	10904
	.byte	15
	.byte	'_Ifx_SRC_EMEM',0,6,163,1,25,4,16
	.byte	'SR',0
	.word	10008
	.byte	4,2,35,0,0,20
	.word	10932
	.byte	14
	.byte	'Ifx_SRC_EMEM',0,6,166,1,3
	.word	10965
	.byte	21,40
	.word	204
	.byte	22,39,0,15
	.byte	'_Ifx_SRC_ERAY',0,6,169,1,25,80,16
	.byte	'INT',0
	.word	10442
	.byte	8,2,35,0,16
	.byte	'TINT',0
	.word	10442
	.byte	8,2,35,8,16
	.byte	'NDAT',0
	.word	10442
	.byte	8,2,35,16,16
	.byte	'MBSC',0
	.word	10442
	.byte	8,2,35,24,16
	.byte	'OBUSY',0
	.word	10008
	.byte	4,2,35,32,16
	.byte	'IBUSY',0
	.word	10008
	.byte	4,2,35,36,16
	.byte	'reserved_28',0
	.word	10992
	.byte	40,2,35,40,0,20
	.word	11001
	.byte	14
	.byte	'Ifx_SRC_ERAY',0,6,178,1,3
	.word	11128
	.byte	15
	.byte	'_Ifx_SRC_ETH',0,6,181,1,25,4,16
	.byte	'SR',0
	.word	10008
	.byte	4,2,35,0,0,20
	.word	11155
	.byte	14
	.byte	'Ifx_SRC_ETH',0,6,184,1,3
	.word	11187
	.byte	15
	.byte	'_Ifx_SRC_FCE',0,6,187,1,25,4,16
	.byte	'SR',0
	.word	10008
	.byte	4,2,35,0,0,20
	.word	11213
	.byte	14
	.byte	'Ifx_SRC_FCE',0,6,190,1,3
	.word	11245
	.byte	21,16
	.word	204
	.byte	22,15,0,15
	.byte	'_Ifx_SRC_GPSR',0,6,193,1,25,32,16
	.byte	'SR0',0
	.word	10008
	.byte	4,2,35,0,16
	.byte	'SR1',0
	.word	10008
	.byte	4,2,35,4,16
	.byte	'SR2',0
	.word	10008
	.byte	4,2,35,8,16
	.byte	'SR3',0
	.word	10008
	.byte	4,2,35,12,16
	.byte	'reserved_10',0
	.word	11271
	.byte	16,2,35,16,0,20
	.word	11280
	.byte	14
	.byte	'Ifx_SRC_GPSR',0,6,200,1,3
	.word	11374
	.byte	21,24
	.word	204
	.byte	22,23,0,15
	.byte	'_Ifx_SRC_GPT12',0,6,203,1,25,48,16
	.byte	'CIRQ',0
	.word	10008
	.byte	4,2,35,0,16
	.byte	'T2',0
	.word	10008
	.byte	4,2,35,4,16
	.byte	'T3',0
	.word	10008
	.byte	4,2,35,8,16
	.byte	'T4',0
	.word	10008
	.byte	4,2,35,12,16
	.byte	'T5',0
	.word	10008
	.byte	4,2,35,16,16
	.byte	'T6',0
	.word	10008
	.byte	4,2,35,20,16
	.byte	'reserved_18',0
	.word	11401
	.byte	24,2,35,24,0,20
	.word	11410
	.byte	14
	.byte	'Ifx_SRC_GPT12',0,6,212,1,3
	.word	11527
	.byte	21,12
	.word	10008
	.byte	22,2,0,21,4
	.word	204
	.byte	22,3,0,21,8
	.word	204
	.byte	22,7,0,21,32
	.word	10008
	.byte	22,7,0,21,32
	.word	11582
	.byte	22,0,0,21,88
	.word	204
	.byte	22,87,0,21,108
	.word	10008
	.byte	22,26,0,21,96
	.word	204
	.byte	22,95,0,21,128,1
	.word	11582
	.byte	22,3,0,21,128,3
	.word	204
	.byte	22,255,2,0,21,96
	.word	11582
	.byte	22,2,0,21,160,3
	.word	204
	.byte	22,159,3,0,21,16
	.word	10008
	.byte	22,3,0,21,80
	.word	11668
	.byte	22,4,0,21,176,2
	.word	204
	.byte	22,175,2,0,21,48
	.word	204
	.byte	22,47,0,15
	.byte	'_Ifx_SRC_GTM',0,6,215,1,25,208,18,16
	.byte	'AEIIRQ',0
	.word	10008
	.byte	4,2,35,0,16
	.byte	'ARUIRQ',0
	.word	11555
	.byte	12,2,35,4,16
	.byte	'reserved_10',0
	.word	11564
	.byte	4,2,35,16,16
	.byte	'BRCIRQ',0
	.word	10008
	.byte	4,2,35,20,16
	.byte	'CMPIRQ',0
	.word	10008
	.byte	4,2,35,24,16
	.byte	'SPEIRQ',0
	.word	10442
	.byte	8,2,35,28,16
	.byte	'reserved_24',0
	.word	11573
	.byte	8,2,35,36,16
	.byte	'PSM',0
	.word	11591
	.byte	32,2,35,44,16
	.byte	'reserved_4C',0
	.word	11600
	.byte	88,2,35,76,16
	.byte	'DPLL',0
	.word	11609
	.byte	108,3,35,164,1,16
	.byte	'reserved_110',0
	.word	11618
	.byte	96,3,35,144,2,16
	.byte	'ERR',0
	.word	10008
	.byte	4,3,35,240,2,16
	.byte	'reserved_174',0
	.word	10744
	.byte	12,3,35,244,2,16
	.byte	'TIM',0
	.word	11627
	.byte	128,1,3,35,128,3,16
	.byte	'reserved_200',0
	.word	11637
	.byte	128,3,3,35,128,4,16
	.byte	'MCS',0
	.word	11627
	.byte	128,1,3,35,128,7,16
	.byte	'reserved_400',0
	.word	11637
	.byte	128,3,3,35,128,8,16
	.byte	'TOM',0
	.word	11648
	.byte	96,3,35,128,11,16
	.byte	'reserved_5E0',0
	.word	11657
	.byte	160,3,3,35,224,11,16
	.byte	'ATOM',0
	.word	11677
	.byte	80,3,35,128,15,16
	.byte	'reserved_7D0',0
	.word	11686
	.byte	176,2,3,35,208,15,16
	.byte	'MCSW0',0
	.word	11668
	.byte	16,3,35,128,18,16
	.byte	'reserved_910',0
	.word	11697
	.byte	48,3,35,144,18,16
	.byte	'MCSW1',0
	.word	11668
	.byte	16,3,35,192,18,0,20
	.word	11706
	.byte	14
	.byte	'Ifx_SRC_GTM',0,6,241,1,3
	.word	12168
	.byte	15
	.byte	'_Ifx_SRC_HSCT',0,6,244,1,25,4,16
	.byte	'SR',0
	.word	10008
	.byte	4,2,35,0,0,20
	.word	12194
	.byte	14
	.byte	'Ifx_SRC_HSCT',0,6,247,1,3
	.word	12227
	.byte	15
	.byte	'_Ifx_SRC_HSM',0,6,250,1,25,8,16
	.byte	'HSM',0
	.word	10442
	.byte	8,2,35,0,0,20
	.word	12254
	.byte	14
	.byte	'Ifx_SRC_HSM',0,6,253,1,3
	.word	12287
	.byte	15
	.byte	'_Ifx_SRC_HSSL',0,6,128,2,25,16,16
	.byte	'COK',0
	.word	10008
	.byte	4,2,35,0,16
	.byte	'RDI',0
	.word	10008
	.byte	4,2,35,4,16
	.byte	'ERR',0
	.word	10008
	.byte	4,2,35,8,16
	.byte	'TRG',0
	.word	10008
	.byte	4,2,35,12,0,20
	.word	12313
	.byte	14
	.byte	'Ifx_SRC_HSSL',0,6,134,2,3
	.word	12386
	.byte	21,56
	.word	204
	.byte	22,55,0,15
	.byte	'_Ifx_SRC_I2C',0,6,137,2,25,80,16
	.byte	'BREQ',0
	.word	10008
	.byte	4,2,35,0,16
	.byte	'LBREQ',0
	.word	10008
	.byte	4,2,35,4,16
	.byte	'SREQ',0
	.word	10008
	.byte	4,2,35,8,16
	.byte	'LSREQ',0
	.word	10008
	.byte	4,2,35,12,16
	.byte	'ERR',0
	.word	10008
	.byte	4,2,35,16,16
	.byte	'P',0
	.word	10008
	.byte	4,2,35,20,16
	.byte	'reserved_18',0
	.word	12413
	.byte	56,2,35,24,0,20
	.word	12422
	.byte	14
	.byte	'Ifx_SRC_I2C',0,6,146,2,3
	.word	12545
	.byte	15
	.byte	'_Ifx_SRC_LMU',0,6,149,2,25,4,16
	.byte	'SR',0
	.word	10008
	.byte	4,2,35,0,0,20
	.word	12571
	.byte	14
	.byte	'Ifx_SRC_LMU',0,6,152,2,3
	.word	12603
	.byte	15
	.byte	'_Ifx_SRC_MSC',0,6,155,2,25,20,16
	.byte	'SR0',0
	.word	10008
	.byte	4,2,35,0,16
	.byte	'SR1',0
	.word	10008
	.byte	4,2,35,4,16
	.byte	'SR2',0
	.word	10008
	.byte	4,2,35,8,16
	.byte	'SR3',0
	.word	10008
	.byte	4,2,35,12,16
	.byte	'SR4',0
	.word	10008
	.byte	4,2,35,16,0,20
	.word	12629
	.byte	14
	.byte	'Ifx_SRC_MSC',0,6,162,2,3
	.word	12714
	.byte	15
	.byte	'_Ifx_SRC_PMU',0,6,165,2,25,4,16
	.byte	'SR',0
	.word	10008
	.byte	4,2,35,0,0,20
	.word	12740
	.byte	14
	.byte	'Ifx_SRC_PMU',0,6,168,2,3
	.word	12772
	.byte	15
	.byte	'_Ifx_SRC_PSI5',0,6,171,2,25,32,16
	.byte	'SR',0
	.word	11582
	.byte	32,2,35,0,0,20
	.word	12798
	.byte	14
	.byte	'Ifx_SRC_PSI5',0,6,174,2,3
	.word	12831
	.byte	15
	.byte	'_Ifx_SRC_PSI5S',0,6,177,2,25,32,16
	.byte	'SR',0
	.word	11582
	.byte	32,2,35,0,0,20
	.word	12858
	.byte	14
	.byte	'Ifx_SRC_PSI5S',0,6,180,2,3
	.word	12892
	.byte	15
	.byte	'_Ifx_SRC_QSPI',0,6,183,2,25,24,16
	.byte	'TX',0
	.word	10008
	.byte	4,2,35,0,16
	.byte	'RX',0
	.word	10008
	.byte	4,2,35,4,16
	.byte	'ERR',0
	.word	10008
	.byte	4,2,35,8,16
	.byte	'PT',0
	.word	10008
	.byte	4,2,35,12,16
	.byte	'reserved_10',0
	.word	11564
	.byte	4,2,35,16,16
	.byte	'U',0
	.word	10008
	.byte	4,2,35,20,0,20
	.word	12920
	.byte	14
	.byte	'Ifx_SRC_QSPI',0,6,191,2,3
	.word	13022
	.byte	15
	.byte	'_Ifx_SRC_SCU',0,6,194,2,25,20,16
	.byte	'DTS',0
	.word	10008
	.byte	4,2,35,0,16
	.byte	'ERU',0
	.word	11668
	.byte	16,2,35,4,0,20
	.word	13049
	.byte	14
	.byte	'Ifx_SRC_SCU',0,6,198,2,3
	.word	13095
	.byte	21,40
	.word	10008
	.byte	22,9,0,15
	.byte	'_Ifx_SRC_SENT',0,6,201,2,25,40,16
	.byte	'SR',0
	.word	13121
	.byte	40,2,35,0,0,20
	.word	13130
	.byte	14
	.byte	'Ifx_SRC_SENT',0,6,204,2,3
	.word	13163
	.byte	15
	.byte	'_Ifx_SRC_SMU',0,6,207,2,25,12,16
	.byte	'SR',0
	.word	11555
	.byte	12,2,35,0,0,20
	.word	13190
	.byte	14
	.byte	'Ifx_SRC_SMU',0,6,210,2,3
	.word	13222
	.byte	15
	.byte	'_Ifx_SRC_STM',0,6,213,2,25,8,16
	.byte	'SR0',0
	.word	10008
	.byte	4,2,35,0,16
	.byte	'SR1',0
	.word	10008
	.byte	4,2,35,4,0,20
	.word	13248
	.byte	14
	.byte	'Ifx_SRC_STM',0,6,217,2,3
	.word	13294
	.byte	15
	.byte	'_Ifx_SRC_VADCCG',0,6,220,2,25,16,16
	.byte	'SR0',0
	.word	10008
	.byte	4,2,35,0,16
	.byte	'SR1',0
	.word	10008
	.byte	4,2,35,4,16
	.byte	'SR2',0
	.word	10008
	.byte	4,2,35,8,16
	.byte	'SR3',0
	.word	10008
	.byte	4,2,35,12,0,20
	.word	13320
	.byte	14
	.byte	'Ifx_SRC_VADCCG',0,6,226,2,3
	.word	13395
	.byte	15
	.byte	'_Ifx_SRC_VADCG',0,6,229,2,25,16,16
	.byte	'SR0',0
	.word	10008
	.byte	4,2,35,0,16
	.byte	'SR1',0
	.word	10008
	.byte	4,2,35,4,16
	.byte	'SR2',0
	.word	10008
	.byte	4,2,35,8,16
	.byte	'SR3',0
	.word	10008
	.byte	4,2,35,12,0,20
	.word	13424
	.byte	14
	.byte	'Ifx_SRC_VADCG',0,6,235,2,3
	.word	13498
	.byte	15
	.byte	'_Ifx_SRC_XBAR',0,6,238,2,25,4,16
	.byte	'SRC',0
	.word	10008
	.byte	4,2,35,0,0,20
	.word	13526
	.byte	14
	.byte	'Ifx_SRC_XBAR',0,6,241,2,3
	.word	13560
	.byte	21,4
	.word	10068
	.byte	22,0,0,20
	.word	13587
	.byte	15
	.byte	'_Ifx_SRC_GAGBT',0,6,254,2,25,4,16
	.byte	'AGBT',0
	.word	13596
	.byte	4,2,35,0,0,20
	.word	13601
	.byte	14
	.byte	'Ifx_SRC_GAGBT',0,6,129,3,3
	.word	13637
	.byte	21,48
	.word	10126
	.byte	22,3,0,20
	.word	13665
	.byte	15
	.byte	'_Ifx_SRC_GASCLIN',0,6,132,3,25,48,16
	.byte	'ASCLIN',0
	.word	13674
	.byte	48,2,35,0,0,20
	.word	13679
	.byte	14
	.byte	'Ifx_SRC_GASCLIN',0,6,135,3,3
	.word	13719
	.byte	20
	.word	10213
	.byte	15
	.byte	'_Ifx_SRC_GBCU',0,6,138,3,25,4,16
	.byte	'SPB',0
	.word	13749
	.byte	4,2,35,0,0,20
	.word	13754
	.byte	14
	.byte	'Ifx_SRC_GBCU',0,6,141,3,3
	.word	13788
	.byte	21,64
	.word	10287
	.byte	22,0,0,20
	.word	13815
	.byte	15
	.byte	'_Ifx_SRC_GCAN',0,6,144,3,25,64,16
	.byte	'CAN',0
	.word	13824
	.byte	64,2,35,0,0,20
	.word	13829
	.byte	14
	.byte	'Ifx_SRC_GCAN',0,6,147,3,3
	.word	13863
	.byte	21,32
	.word	10344
	.byte	22,1,0,20
	.word	13890
	.byte	15
	.byte	'_Ifx_SRC_GCCU6',0,6,150,3,25,32,16
	.byte	'CCU6',0
	.word	13899
	.byte	32,2,35,0,0,20
	.word	13904
	.byte	14
	.byte	'Ifx_SRC_GCCU6',0,6,153,3,3
	.word	13940
	.byte	20
	.word	10451
	.byte	15
	.byte	'_Ifx_SRC_GCERBERUS',0,6,156,3,25,8,16
	.byte	'CERBERUS',0
	.word	13968
	.byte	8,2,35,0,0,20
	.word	13973
	.byte	14
	.byte	'Ifx_SRC_GCERBERUS',0,6,159,3,3
	.word	14017
	.byte	21,16
	.word	10517
	.byte	22,0,0,20
	.word	14049
	.byte	15
	.byte	'_Ifx_SRC_GCIF',0,6,162,3,25,16,16
	.byte	'CIF',0
	.word	14058
	.byte	16,2,35,0,0,20
	.word	14063
	.byte	14
	.byte	'Ifx_SRC_GCIF',0,6,165,3,3
	.word	14097
	.byte	21,12
	.word	10616
	.byte	22,2,0,20
	.word	14124
	.byte	15
	.byte	'_Ifx_SRC_GCPU',0,6,168,3,25,12,16
	.byte	'CPU',0
	.word	14133
	.byte	12,2,35,0,0,20
	.word	14138
	.byte	14
	.byte	'Ifx_SRC_GCPU',0,6,171,3,3
	.word	14172
	.byte	21,24
	.word	10686
	.byte	22,0,0,20
	.word	14199
	.byte	15
	.byte	'_Ifx_SRC_GDAM',0,6,174,3,25,24,16
	.byte	'DAM',0
	.word	14208
	.byte	24,2,35,0,0,20
	.word	14213
	.byte	14
	.byte	'Ifx_SRC_GDAM',0,6,177,3,3
	.word	14247
	.byte	21,144,2
	.word	10763
	.byte	22,0,0,20
	.word	14274
	.byte	15
	.byte	'_Ifx_SRC_GDMA',0,6,180,3,25,144,2,16
	.byte	'DMA',0
	.word	14284
	.byte	144,2,2,35,0,0,20
	.word	14289
	.byte	14
	.byte	'Ifx_SRC_GDMA',0,6,183,3,3
	.word	14325
	.byte	21,48
	.word	10856
	.byte	22,5,0,20
	.word	14352
	.byte	15
	.byte	'_Ifx_SRC_GDSADC',0,6,186,3,25,48,16
	.byte	'DSADC',0
	.word	14361
	.byte	48,2,35,0,0,20
	.word	14366
	.byte	14
	.byte	'Ifx_SRC_GDSADC',0,6,189,3,3
	.word	14404
	.byte	21,4
	.word	10932
	.byte	22,0,0,20
	.word	14433
	.byte	15
	.byte	'_Ifx_SRC_GEMEM',0,6,192,3,25,4,16
	.byte	'EMEM',0
	.word	14442
	.byte	4,2,35,0,0,20
	.word	14447
	.byte	14
	.byte	'Ifx_SRC_GEMEM',0,6,195,3,3
	.word	14483
	.byte	21,80
	.word	11001
	.byte	22,0,0,20
	.word	14511
	.byte	15
	.byte	'_Ifx_SRC_GERAY',0,6,198,3,25,80,16
	.byte	'ERAY',0
	.word	14520
	.byte	80,2,35,0,0,20
	.word	14525
	.byte	14
	.byte	'Ifx_SRC_GERAY',0,6,201,3,3
	.word	14561
	.byte	21,4
	.word	11155
	.byte	22,0,0,20
	.word	14589
	.byte	15
	.byte	'_Ifx_SRC_GETH',0,6,204,3,25,4,16
	.byte	'ETH',0
	.word	14598
	.byte	4,2,35,0,0,20
	.word	14603
	.byte	14
	.byte	'Ifx_SRC_GETH',0,6,207,3,3
	.word	14637
	.byte	21,4
	.word	11213
	.byte	22,0,0,20
	.word	14664
	.byte	15
	.byte	'_Ifx_SRC_GFCE',0,6,210,3,25,4,16
	.byte	'FCE',0
	.word	14673
	.byte	4,2,35,0,0,20
	.word	14678
	.byte	14
	.byte	'Ifx_SRC_GFCE',0,6,213,3,3
	.word	14712
	.byte	21,96
	.word	11280
	.byte	22,2,0,20
	.word	14739
	.byte	15
	.byte	'_Ifx_SRC_GGPSR',0,6,216,3,25,96,16
	.byte	'GPSR',0
	.word	14748
	.byte	96,2,35,0,0,20
	.word	14753
	.byte	14
	.byte	'Ifx_SRC_GGPSR',0,6,219,3,3
	.word	14789
	.byte	21,48
	.word	11410
	.byte	22,0,0,20
	.word	14817
	.byte	15
	.byte	'_Ifx_SRC_GGPT12',0,6,222,3,25,48,16
	.byte	'GPT12',0
	.word	14826
	.byte	48,2,35,0,0,20
	.word	14831
	.byte	14
	.byte	'Ifx_SRC_GGPT12',0,6,225,3,3
	.word	14869
	.byte	21,208,18
	.word	11706
	.byte	22,0,0,20
	.word	14898
	.byte	15
	.byte	'_Ifx_SRC_GGTM',0,6,228,3,25,208,18,16
	.byte	'GTM',0
	.word	14908
	.byte	208,18,2,35,0,0,20
	.word	14913
	.byte	14
	.byte	'Ifx_SRC_GGTM',0,6,231,3,3
	.word	14949
	.byte	21,4
	.word	12194
	.byte	22,0,0,20
	.word	14976
	.byte	15
	.byte	'_Ifx_SRC_GHSCT',0,6,234,3,25,4,16
	.byte	'HSCT',0
	.word	14985
	.byte	4,2,35,0,0,20
	.word	14990
	.byte	14
	.byte	'Ifx_SRC_GHSCT',0,6,237,3,3
	.word	15026
	.byte	21,8
	.word	12254
	.byte	22,0,0,20
	.word	15054
	.byte	15
	.byte	'_Ifx_SRC_GHSM',0,6,240,3,25,8,16
	.byte	'HSM',0
	.word	15063
	.byte	8,2,35,0,0,20
	.word	15068
	.byte	14
	.byte	'Ifx_SRC_GHSM',0,6,243,3,3
	.word	15102
	.byte	21,64
	.word	12313
	.byte	22,3,0,20
	.word	15129
	.byte	15
	.byte	'_Ifx_SRC_GHSSL',0,6,246,3,25,68,16
	.byte	'HSSL',0
	.word	15138
	.byte	64,2,35,0,16
	.byte	'EXI',0
	.word	10008
	.byte	4,2,35,64,0,20
	.word	15143
	.byte	14
	.byte	'Ifx_SRC_GHSSL',0,6,250,3,3
	.word	15192
	.byte	21,80
	.word	12422
	.byte	22,0,0,20
	.word	15220
	.byte	15
	.byte	'_Ifx_SRC_GI2C',0,6,253,3,25,80,16
	.byte	'I2C',0
	.word	15229
	.byte	80,2,35,0,0,20
	.word	15234
	.byte	14
	.byte	'Ifx_SRC_GI2C',0,6,128,4,3
	.word	15268
	.byte	21,4
	.word	12571
	.byte	22,0,0,20
	.word	15295
	.byte	15
	.byte	'_Ifx_SRC_GLMU',0,6,131,4,25,4,16
	.byte	'LMU',0
	.word	15304
	.byte	4,2,35,0,0,20
	.word	15309
	.byte	14
	.byte	'Ifx_SRC_GLMU',0,6,134,4,3
	.word	15343
	.byte	21,40
	.word	12629
	.byte	22,1,0,20
	.word	15370
	.byte	15
	.byte	'_Ifx_SRC_GMSC',0,6,137,4,25,40,16
	.byte	'MSC',0
	.word	15379
	.byte	40,2,35,0,0,20
	.word	15384
	.byte	14
	.byte	'Ifx_SRC_GMSC',0,6,140,4,3
	.word	15418
	.byte	21,8
	.word	12740
	.byte	22,1,0,20
	.word	15445
	.byte	15
	.byte	'_Ifx_SRC_GPMU',0,6,143,4,25,8,16
	.byte	'PMU',0
	.word	15454
	.byte	8,2,35,0,0,20
	.word	15459
	.byte	14
	.byte	'Ifx_SRC_GPMU',0,6,146,4,3
	.word	15493
	.byte	21,32
	.word	12798
	.byte	22,0,0,20
	.word	15520
	.byte	15
	.byte	'_Ifx_SRC_GPSI5',0,6,149,4,25,32,16
	.byte	'PSI5',0
	.word	15529
	.byte	32,2,35,0,0,20
	.word	15534
	.byte	14
	.byte	'Ifx_SRC_GPSI5',0,6,152,4,3
	.word	15570
	.byte	21,32
	.word	12858
	.byte	22,0,0,20
	.word	15598
	.byte	15
	.byte	'_Ifx_SRC_GPSI5S',0,6,155,4,25,32,16
	.byte	'PSI5S',0
	.word	15607
	.byte	32,2,35,0,0,20
	.word	15612
	.byte	14
	.byte	'Ifx_SRC_GPSI5S',0,6,158,4,3
	.word	15650
	.byte	21,96
	.word	12920
	.byte	22,3,0,20
	.word	15679
	.byte	15
	.byte	'_Ifx_SRC_GQSPI',0,6,161,4,25,96,16
	.byte	'QSPI',0
	.word	15688
	.byte	96,2,35,0,0,20
	.word	15693
	.byte	14
	.byte	'Ifx_SRC_GQSPI',0,6,164,4,3
	.word	15729
	.byte	20
	.word	13049
	.byte	15
	.byte	'_Ifx_SRC_GSCU',0,6,167,4,25,20,16
	.byte	'SCU',0
	.word	15757
	.byte	20,2,35,0,0,20
	.word	15762
	.byte	14
	.byte	'Ifx_SRC_GSCU',0,6,170,4,3
	.word	15796
	.byte	21,40
	.word	13130
	.byte	22,0,0,20
	.word	15823
	.byte	15
	.byte	'_Ifx_SRC_GSENT',0,6,173,4,25,40,16
	.byte	'SENT',0
	.word	15832
	.byte	40,2,35,0,0,20
	.word	15837
	.byte	14
	.byte	'Ifx_SRC_GSENT',0,6,176,4,3
	.word	15873
	.byte	21,12
	.word	13190
	.byte	22,0,0,20
	.word	15901
	.byte	15
	.byte	'_Ifx_SRC_GSMU',0,6,179,4,25,12,16
	.byte	'SMU',0
	.word	15910
	.byte	12,2,35,0,0,20
	.word	15915
	.byte	14
	.byte	'Ifx_SRC_GSMU',0,6,182,4,3
	.word	15949
	.byte	21,24
	.word	13248
	.byte	22,2,0,20
	.word	15976
	.byte	15
	.byte	'_Ifx_SRC_GSTM',0,6,185,4,25,24,16
	.byte	'STM',0
	.word	15985
	.byte	24,2,35,0,0,20
	.word	15990
	.byte	14
	.byte	'Ifx_SRC_GSTM',0,6,188,4,3
	.word	16024
	.byte	21,128,1
	.word	13424
	.byte	22,7,0,20
	.word	16051
	.byte	21,160,1
	.word	204
	.byte	22,159,1,0,21,32
	.word	13320
	.byte	22,1,0,20
	.word	16077
	.byte	15
	.byte	'_Ifx_SRC_GVADC',0,6,191,4,25,192,2,16
	.byte	'G',0
	.word	16061
	.byte	128,1,2,35,0,16
	.byte	'reserved_80',0
	.word	16066
	.byte	160,1,3,35,128,1,16
	.byte	'CG',0
	.word	16086
	.byte	32,3,35,160,2,0,20
	.word	16091
	.byte	14
	.byte	'Ifx_SRC_GVADC',0,6,196,4,3
	.word	16162
	.byte	20
	.word	13526
	.byte	15
	.byte	'_Ifx_SRC_GXBAR',0,6,199,4,25,4,16
	.byte	'XBAR',0
	.word	16190
	.byte	4,2,35,0,0,20
	.word	16195
	.byte	14
	.byte	'Ifx_SRC_GXBAR',0,6,202,4,3
	.word	16231
	.byte	14
	.byte	'uint8',0,7,90,29
	.word	204
	.byte	14
	.byte	'uint16',0,7,92,29
	.word	803
	.byte	14
	.byte	'uint32',0,7,94,29
	.word	221
	.byte	14
	.byte	'Uart_SizeType',0,4,240,3,16
	.word	803
	.byte	14
	.byte	'Uart_ChannelIdType',0,4,246,3,15
	.word	204
	.byte	14
	.byte	'UartNotifType',0,4,148,4,2
	.word	654
	.byte	14
	.byte	'Uart_ChannelType',0,4,183,4,2
	.word	825
	.byte	14
	.byte	'Uart_ConfigType',0,4,195,4,2
	.word	1143
	.byte	14
	.byte	'Uart_ReturnType',0,4,208,4,2
	.word	1229
	.byte	14
	.byte	'Uart_StatusType',0,4,220,4,2
	.word	7886
	.byte	10
	.byte	'Uart_StateType',0,4,228,4,14,1,11
	.byte	'UART_UNINITIALISED',0,0,11
	.byte	'UART_INITIALISED',0,1,11
	.byte	'UART_OPERATION_IN_PROGRESS',0,2,0,14
	.byte	'Uart_StateType',0,4,233,4,2
	.word	16478
	.byte	15
	.byte	'Uart_ChannelInfoType',0,4,240,4,16,20,16
	.byte	'Uart_RxBuffPtr',0
	.word	1301
	.byte	4,2,35,0,16
	.byte	'Uart_TxBuffPtr',0
	.word	1301
	.byte	4,2,35,4,16
	.byte	'Uart_TxState',0
	.word	16478
	.byte	1,2,35,8,16
	.byte	'Uart_RxState',0
	.word	16478
	.byte	1,2,35,9,16
	.byte	'Uart_TxDataLeft',0
	.word	803
	.byte	2,2,35,10,16
	.byte	'Uart_RxDataLeft',0
	.word	803
	.byte	2,2,35,12,16
	.byte	'Uart_TotalDataTxd',0
	.word	803
	.byte	2,2,35,14,16
	.byte	'Uart_TotalDataRxd',0
	.word	803
	.byte	2,2,35,16,16
	.byte	'Uart_AssignedHW',0
	.word	204
	.byte	1,2,35,18,16
	.byte	'Uart_TxDataCopyCntr',0
	.word	204
	.byte	1,2,35,19,0,14
	.byte	'Uart_ChannelInfoType',0,4,252,4,3
	.word	16593
.L637:
	.byte	21,4
	.word	204
	.byte	22,3,0
.L638:
	.byte	21,60
	.word	16593
	.byte	22,2,0,21,12
	.word	221
	.byte	22,2,0
.L639:
	.byte	21,24
	.word	16919
	.byte	22,1,0,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L185:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,0,0,0,6,15,0,73,19,0,0,7,46,1,3
	.byte	8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,8,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60
	.byte	12,0,0,9,46,0,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,10,4,1,3,8,58,15,59,15,57,15,11,15,0,0
	.byte	11,40,0,3,8,28,13,0,0,12,21,1,54,15,39,12,0,0,13,5,0,73,19,0,0,14,22,0,3,8,58,15,59,15,57,15,73,19,0,0
	.byte	15,19,1,3,8,58,15,59,15,57,15,11,15,0,0,16,13,0,3,8,73,19,11,15,56,9,0,0,17,38,0,73,19,0,0,18,13,0,3,8
	.byte	11,15,73,19,13,15,12,15,56,9,0,0,19,23,1,58,15,59,15,57,15,11,15,0,0,20,53,0,73,19,0,0,21,1,1,11,15,73
	.byte	19,0,0,22,33,0,47,15,0,0,23,46,1,49,19,0,0,24,5,0,49,19,0,0,25,46,0,3,8,58,15,59,15,57,15,54,15,63,12
	.byte	60,12,0,0,26,21,0,54,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L186:
	.word	.L894-.L893
.L893:
	.half	3
	.word	.L896-.L895
.L895:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\tricore_general\\ssc\\inc',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\inc',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\general\\tricore\\inc\\TC27xC',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Aurix_MC-ISAR\\general\\tricore\\inc',0
	.byte	0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0
	.byte	'Mcal_TcLib.h',0,1,0,0
	.byte	'Mcal_WdgLib.h',0,1,0,0
	.byte	'Uart.h',0,2,0,0
	.byte	'IfxAsclin_regdef.h',0,3,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'Platform_Types.h',0,4,0,0,0
.L896:
.L894:
	.sdecl	'.debug_info',debug,cluster('Uart_Init')
	.sect	'.debug_info'
.L187:
	.word	523
	.half	3
	.word	.L188
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L190,.L189
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_Init',0,1,225,2,6,1,1,1
	.word	.L100,.L405,.L99
	.byte	4
	.byte	'ConfigPtr',0,1,225,2,39
	.word	.L406,.L407
	.byte	5
	.word	.L408
	.byte	6
	.byte	'ChannelConfigPtr',0,1,227,2,27
	.word	.L409,.L410
	.byte	6
	.byte	'ModuleNo',0,1,228,2,9
	.word	.L411,.L412
	.byte	6
	.byte	'Chan',0,1,228,2,18
	.word	.L411,.L413
	.byte	6
	.byte	'MaxChannel',0,1,229,2,9
	.word	.L411,.L414
	.byte	6
	.byte	'ClkFailureChk',0,1,229,2,34
	.word	.L411,.L415
	.byte	7
	.word	.L416,.L417,.L418
	.byte	8
	.word	.L419,.L420
	.byte	8
	.word	.L421,.L422
	.byte	9
	.word	.L423,.L424
	.byte	6
	.byte	'ModClkStatus',0,1,149,5,9
	.word	.L411,.L429
	.byte	0,0,7
	.word	.L416,.L425,.L426
	.byte	8
	.word	.L419,.L420
	.byte	8
	.word	.L421,.L422
	.byte	0,7
	.word	.L416,.L427,.L428
	.byte	8
	.word	.L419,.L420
	.byte	8
	.word	.L421,.L422
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_Init')
	.sect	'.debug_abbrev'
.L188:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_Init')
	.sect	'.debug_line'
.L189:
	.word	.L898-.L897
.L897:
	.half	3
	.word	.L900-.L899
.L899:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L900:
	.byte	5,19,7,0,5,2
	.word	.L100
	.byte	3,158,3,1,5,6,3,66,1,5,15,9
	.half	.L640-.L100
	.byte	3,193,0,1,5,6,3,191,127,1,5,27,9
	.half	.L642-.L640
	.byte	3,60,1,5,9,9
	.half	.L643-.L642
	.byte	3,27,1,9
	.half	.L641-.L643
	.byte	3,10,1,5,41,9
	.half	.L417-.L641
	.byte	3,91,1,5,9,3,37,1,5,37,9
	.half	.L418-.L417
	.byte	3,96,1,7,9
	.half	.L901-.L418
	.byte	1,5,47,9
	.half	.L647-.L901
	.byte	3,28,1,5,37,9
	.half	.L902-.L647
	.byte	3,100,1,5,47,9
	.half	.L646-.L902
	.byte	3,32,1,9
	.half	.L903-.L646
	.byte	3,14,1,5,50,9
	.half	.L904-.L903
	.byte	3,122,1,5,37,9
	.half	.L3-.L904
	.byte	3,92,1,5,56,9
	.half	.L649-.L3
	.byte	1,5,55,9
	.half	.L905-.L649
	.byte	1,5,34,9
	.half	.L650-.L905
	.byte	3,2,1,5,3,9
	.half	.L425-.L650
	.byte	3,240,1,1,9
	.half	.L906-.L425
	.byte	3,4,1,9
	.half	.L907-.L906
	.byte	3,3,1,5,27,9
	.half	.L908-.L907
	.byte	3,12,1,5,56,9
	.half	.L909-.L908
	.byte	3,1,1,5,34,9
	.half	.L910-.L909
	.byte	1,5,27,3,143,126,1,5,9,9
	.half	.L426-.L910
	.byte	1,5,27,9
	.half	.L911-.L426
	.byte	1,5,7,9
	.half	.L427-.L911
	.byte	3,114,1,5,32,7,9
	.half	.L428-.L427
	.byte	3,8,1,5,48,9
	.half	.L653-.L428
	.byte	3,3,1,5,38,9
	.half	.L912-.L653
	.byte	3,3,1,5,45,9
	.half	.L913-.L912
	.byte	3,3,1,9
	.half	.L914-.L913
	.byte	3,1,1,9
	.half	.L915-.L914
	.byte	3,3,1,9
	.half	.L916-.L915
	.byte	3,1,1,5,49,9
	.half	.L917-.L916
	.byte	3,114,1,5,48,9
	.half	.L4-.L917
	.byte	3,21,1,5,38,9
	.half	.L918-.L4
	.byte	3,3,1,5,22,9
	.half	.L919-.L918
	.byte	3,122,1,5,45,3,9,1,5,22,9
	.half	.L645-.L919
	.byte	3,119,1,5,45,3,10,1,5,53,9
	.half	.L5-.L645
	.byte	3,81,1,5,37,9
	.half	.L920-.L5
	.byte	1,5,5,7,9
	.half	.L6-.L920
	.byte	3,51,1,5,23,7,9
	.half	.L921-.L6
	.byte	3,4,1,5,1,9
	.half	.L7-.L921
	.byte	3,17,1,7,9
	.half	.L191-.L7
	.byte	0,1,1
.L898:
	.sdecl	'.debug_ranges',debug,cluster('Uart_Init')
	.sect	'.debug_ranges'
.L190:
	.word	-1,.L100,0,.L191-.L100,0,0
.L408:
	.word	-1,.L100,0,.L405-.L100,-1,.L102,0,.L396-.L102,-1,.L104,0,.L341-.L104,0,0
.L424:
	.word	-1,.L100,.L417-.L100,.L418-.L100,.L425-.L100,.L426-.L100,.L427-.L100,.L428-.L100,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_Read')
	.sect	'.debug_info'
.L192:
	.word	560
	.half	3
	.word	.L193
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L195,.L194
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_Read',0,1,148,9,17
	.word	.L430
	.byte	1,1,1
	.word	.L120,.L431,.L119
	.byte	4
	.byte	'Channel',0,1,149,9,30
	.word	.L411,.L432
	.byte	4
	.byte	'MemPtr',0,1,149,9,54
	.word	.L433,.L434
	.byte	4
	.byte	'Size',0,1,149,9,75
	.word	.L435,.L436
	.byte	5
	.word	.L437
	.byte	6
	.byte	'HwModulePtr',0,1,151,9,16
	.word	.L438,.L439
	.byte	6
	.byte	'Retvalue',0,1,152,9,19
	.word	.L430,.L440
	.byte	6
	.byte	'HwUnit',0,1,153,9,9
	.word	.L411,.L441
	.byte	6
	.byte	'TempIntLevel',0,1,154,9,9
	.word	.L411,.L442
	.byte	6
	.byte	'ChRxLock',0,1,157,9,10
	.word	.L443,.L444
	.byte	7
	.word	.L445,.L446
	.byte	6
	.byte	'val',0,1,244,9,5
	.word	.L443,.L447
	.byte	0,7
	.word	.L448,.L34
	.byte	6
	.byte	'val',0,1,253,9,7
	.word	.L443,.L449
	.byte	0,7
	.word	.L34,.L450
	.byte	6
	.byte	'val',0,1,132,10,7
	.word	.L443,.L451
	.byte	0,7
	.word	.L452,.L453
	.byte	6
	.byte	'val',0,1,138,10,5
	.word	.L443,.L454
	.byte	0,7
	.word	.L455,.L33
	.byte	6
	.byte	'val',0,1,149,10,5
	.word	.L443,.L456
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_Read')
	.sect	'.debug_abbrev'
.L193:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,1,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_Read')
	.sect	'.debug_line'
.L194:
	.word	.L923-.L922
.L922:
	.half	3
	.word	.L925-.L924
.L924:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L925:
	.byte	5,17,7,0,5,2
	.word	.L120
	.byte	3,147,9,1,5,28,9
	.half	.L768-.L120
	.byte	3,4,1,5,34,3,198,0,1,5,63,9
	.half	.L926-.L768
	.byte	1,5,4,9
	.half	.L764-.L926
	.byte	3,3,1,5,18,7,9
	.half	.L927-.L764
	.byte	3,2,1,5,32,1,5,21,9
	.half	.L32-.L927
	.byte	3,6,1,5,5,1,5,21,9
	.half	.L763-.L32
	.byte	1,5,45,9
	.half	.L928-.L763
	.byte	1,5,43,9
	.half	.L929-.L928
	.byte	1,5,45,9
	.half	.L930-.L929
	.byte	3,1,1,5,47,9
	.half	.L931-.L930
	.byte	3,1,1,5,50,9
	.half	.L932-.L931
	.byte	3,1,1,5,49,1,5,39,9
	.half	.L933-.L932
	.byte	3,2,1,5,20,9
	.half	.L769-.L933
	.byte	3,3,1,5,35,9
	.half	.L934-.L769
	.byte	1,5,34,9
	.half	.L935-.L934
	.byte	1,5,5,9
	.half	.L445-.L935
	.byte	3,3,1,5,33,9
	.half	.L446-.L445
	.byte	3,4,1,5,52,9
	.half	.L936-.L446
	.byte	1,5,5,9
	.half	.L770-.L936
	.byte	1,5,35,7,9
	.half	.L937-.L770
	.byte	3,4,1,5,7,9
	.half	.L938-.L937
	.byte	3,1,1,5,56,9
	.half	.L939-.L938
	.byte	3,127,1,5,7,9
	.half	.L34-.L939
	.byte	3,8,1,5,32,9
	.half	.L450-.L34
	.byte	3,10,1,5,5,9
	.half	.L452-.L450
	.byte	3,124,1,5,32,9
	.half	.L453-.L452
	.byte	3,4,1,9
	.half	.L767-.L453
	.byte	3,3,1,5,33,9
	.half	.L940-.L767
	.byte	3,1,1,5,5,9
	.half	.L455-.L940
	.byte	3,3,1,5,3,9
	.half	.L33-.L455
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L196-.L33
	.byte	0,1,1
.L923:
	.sdecl	'.debug_ranges',debug,cluster('Uart_Read')
	.sect	'.debug_ranges'
.L195:
	.word	-1,.L120,0,.L196-.L120,0,0
.L437:
	.word	-1,.L120,0,.L431-.L120,-1,.L122,0,.L386-.L122,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_Write')
	.sect	'.debug_info'
.L197:
	.word	592
	.half	3
	.word	.L198
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L200,.L199
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_Write',0,1,179,12,17
	.word	.L430
	.byte	1,1,1
	.word	.L136,.L457,.L135
	.byte	4
	.byte	'Channel',0,1,180,12,31
	.word	.L411,.L458
	.byte	4
	.byte	'MemPtr',0,1,180,12,55
	.word	.L433,.L459
	.byte	4
	.byte	'Size',0,1,180,12,76
	.word	.L435,.L460
	.byte	5
	.word	.L136,.L457
	.byte	6
	.byte	'ChannelConfigPtr',0,1,182,12,27
	.word	.L409,.L461
	.byte	6
	.byte	'HwModulePtr',0,1,183,12,15
	.word	.L438,.L462
	.byte	6
	.byte	'Retvalue',0,1,184,12,19
	.word	.L430,.L463
	.byte	6
	.byte	'HwUnit',0,1,185,12,9
	.word	.L411,.L464
	.byte	6
	.byte	'ChTxLock',0,1,188,12,10
	.word	.L443,.L465
	.byte	5
	.word	.L466,.L467
	.byte	6
	.byte	'val',0,1,149,13,4
	.word	.L443,.L468
	.byte	0,5
	.word	.L467,.L469
	.byte	6
	.byte	'val',0,1,153,13,4
	.word	.L443,.L470
	.byte	0,5
	.word	.L471,.L472
	.byte	6
	.byte	'val',0,1,163,13,5
	.word	.L443,.L473
	.byte	0,7
	.word	.L474
	.byte	6
	.byte	'val',0,1,173,13,6
	.word	.L443,.L477
	.byte	0,5
	.word	.L476,.L478
	.byte	6
	.byte	'val',0,1,177,13,6
	.word	.L443,.L479
	.byte	0,5
	.word	.L480,.L46
	.byte	6
	.byte	'val',0,1,192,13,4
	.word	.L443,.L481
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_Write')
	.sect	'.debug_abbrev'
.L198:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,1,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_Write')
	.sect	'.debug_line'
.L199:
	.word	.L942-.L941
.L941:
	.half	3
	.word	.L944-.L943
.L943:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L944:
	.byte	5,17,7,0,5,2
	.word	.L136
	.byte	3,178,12,1,5,28,9
	.half	.L803-.L136
	.byte	3,5,1,5,34,3,198,0,1,5,63,9
	.half	.L945-.L803
	.byte	1,5,4,9
	.half	.L788-.L945
	.byte	3,3,1,5,18,7,9
	.half	.L946-.L788
	.byte	3,2,1,5,32,1,5,25,9
	.half	.L45-.L946
	.byte	3,7,1,5,40,9
	.half	.L947-.L45
	.byte	1,5,59,9
	.half	.L948-.L947
	.byte	1,5,58,9
	.half	.L949-.L948
	.byte	1,5,20,9
	.half	.L791-.L949
	.byte	3,2,1,5,4,1,5,20,9
	.half	.L950-.L791
	.byte	1,5,44,9
	.half	.L951-.L950
	.byte	1,5,19,3,6,1,5,42,9
	.half	.L952-.L951
	.byte	3,122,1,5,28,9
	.half	.L953-.L952
	.byte	3,27,1,5,38,9
	.half	.L794-.L953
	.byte	3,104,1,5,34,9
	.half	.L802-.L794
	.byte	3,3,1,5,33,9
	.half	.L954-.L802
	.byte	1,5,4,9
	.half	.L466-.L954
	.byte	3,3,1,9
	.half	.L467-.L466
	.byte	3,4,1,5,44,9
	.half	.L469-.L467
	.byte	3,5,1,5,50,9
	.half	.L955-.L469
	.byte	3,2,1,5,46,3,127,1,5,29,9
	.half	.L797-.L955
	.byte	3,1,1,5,48,9
	.half	.L793-.L797
	.byte	1,5,28,9
	.half	.L956-.L793
	.byte	3,7,1,5,5,9
	.half	.L471-.L956
	.byte	3,124,1,5,28,9
	.half	.L472-.L471
	.byte	3,4,1,5,4,9
	.half	.L790-.L472
	.byte	3,3,1,5,6,7,9
	.half	.L475-.L790
	.byte	3,3,1,9
	.half	.L476-.L475
	.byte	3,4,1,5,52,9
	.half	.L478-.L476
	.byte	3,3,1,5,50,1,5,6,9
	.half	.L804-.L478
	.byte	3,121,1,5,47,9
	.half	.L47-.L804
	.byte	3,12,1,5,33,9
	.half	.L806-.L47
	.byte	3,1,1,5,32,9
	.half	.L48-.L806
	.byte	3,3,1,5,4,9
	.half	.L480-.L48
	.byte	3,3,1,5,3,9
	.half	.L46-.L480
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L201-.L46
	.byte	0,1,1
.L942:
	.sdecl	'.debug_ranges',debug,cluster('Uart_Write')
	.sect	'.debug_ranges'
.L200:
	.word	-1,.L136,0,.L201-.L136,0,0
.L474:
	.word	-1,.L136,.L475-.L136,.L476-.L136,-1,.L138,0,.L361-.L138,-1,.L140,0,.L391-.L140,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_AbortRead')
	.sect	'.debug_info'
.L202:
	.word	435
	.half	3
	.word	.L203
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L205,.L204
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_AbortRead',0,1,185,15,15
	.word	.L435
	.byte	1,1,1
	.word	.L148,.L482,.L147
	.byte	4
	.byte	'Channel',0,1,185,15,50
	.word	.L411,.L483
	.byte	5
	.word	.L148,.L482
	.byte	6
	.byte	'HwModulePtr',0,1,187,15,15
	.word	.L438,.L484
	.byte	6
	.byte	'ChannelConfigPtr',0,1,188,15,27
	.word	.L409,.L485
	.byte	6
	.byte	'UartRetSize',0,1,189,15,17
	.word	.L435,.L486
	.byte	6
	.byte	'HwUnit',0,1,190,15,9
	.word	.L411,.L487
	.byte	5
	.word	.L488,.L489
	.byte	6
	.byte	'val',0,1,228,15,5
	.word	.L443,.L490
	.byte	0,5
	.word	.L489,.L491
	.byte	6
	.byte	'val',0,1,230,15,5
	.word	.L443,.L492
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_AbortRead')
	.sect	'.debug_abbrev'
.L203:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_AbortRead')
	.sect	'.debug_line'
.L204:
	.word	.L958-.L957
.L957:
	.half	3
	.word	.L960-.L959
.L959:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L960:
	.byte	5,15,7,0,5,2
	.word	.L148
	.byte	3,184,15,1,5,24,3,34,1,5,53,9
	.half	.L961-.L148
	.byte	1,5,30,9
	.half	.L815-.L961
	.byte	3,3,1,5,14,9
	.half	.L962-.L815
	.byte	1,5,39,9
	.half	.L963-.L962
	.byte	1,5,20,9
	.half	.L817-.L963
	.byte	3,3,1,5,35,9
	.half	.L964-.L817
	.byte	1,5,34,9
	.half	.L965-.L964
	.byte	1,5,44,9
	.half	.L818-.L965
	.byte	3,9,1,5,5,9
	.half	.L488-.L818
	.byte	3,122,1,9
	.half	.L489-.L488
	.byte	3,2,1,5,44,9
	.half	.L491-.L489
	.byte	3,4,1,5,41,9
	.half	.L819-.L491
	.byte	3,3,1,5,42,9
	.half	.L966-.L819
	.byte	3,1,1,5,26,9
	.half	.L967-.L966
	.byte	3,7,1,5,60,9
	.half	.L968-.L967
	.byte	1,5,44,3,124,1,5,33,9
	.half	.L816-.L968
	.byte	3,6,1,5,41,9
	.half	.L822-.L816
	.byte	3,126,1,5,59,9
	.half	.L969-.L822
	.byte	1,5,33,9
	.half	.L824-.L969
	.byte	3,2,1,5,46,9
	.half	.L823-.L824
	.byte	3,3,1,5,44,1,5,48,9
	.half	.L821-.L823
	.byte	3,1,1,5,46,9
	.half	.L970-.L821
	.byte	1,5,51,9
	.half	.L971-.L970
	.byte	3,3,1,5,49,1,5,35,9
	.half	.L972-.L971
	.byte	3,2,1,5,5,9
	.half	.L973-.L972
	.byte	1,5,60,7,9
	.half	.L974-.L973
	.byte	3,3,1,5,3,9
	.half	.L59-.L974
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L206-.L59
	.byte	0,1,1
.L958:
	.sdecl	'.debug_ranges',debug,cluster('Uart_AbortRead')
	.sect	'.debug_ranges'
.L205:
	.word	-1,.L148,0,.L206-.L148,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_AbortWrite')
	.sect	'.debug_info'
.L207:
	.word	449
	.half	3
	.word	.L208
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L210,.L209
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_AbortWrite',0,1,159,16,15
	.word	.L435
	.byte	1,1,1
	.word	.L150,.L493,.L149
	.byte	4
	.byte	'Channel',0,1,159,16,50
	.word	.L411,.L494
	.byte	5
	.word	.L495
	.byte	6
	.byte	'HwModulePtr',0,1,161,16,15
	.word	.L438,.L496
	.byte	6
	.byte	'ChannelConfigPtr',0,1,162,16,27
	.word	.L409,.L497
	.byte	6
	.byte	'UartRetSize',0,1,163,16,17
	.word	.L435,.L498
	.byte	6
	.byte	'tempsum',0,1,164,16,10
	.word	.L435,.L499
	.byte	6
	.byte	'HwUnit',0,1,165,16,9
	.word	.L411,.L500
	.byte	7
	.word	.L501,.L502
	.byte	6
	.byte	'val',0,1,207,16,5
	.word	.L443,.L503
	.byte	0,5
	.word	.L504
	.byte	6
	.byte	'val',0,1,226,16,5
	.word	.L443,.L509
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_AbortWrite')
	.sect	'.debug_abbrev'
.L208:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,1,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_AbortWrite')
	.sect	'.debug_line'
.L209:
	.word	.L976-.L975
.L975:
	.half	3
	.word	.L978-.L977
.L977:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L978:
	.byte	5,15,7,0,5,2
	.word	.L150
	.byte	3,158,16,1,5,24,9
	.half	.L829-.L150
	.byte	3,35,1,5,53,9
	.half	.L979-.L829
	.byte	1,5,26,9
	.half	.L827-.L979
	.byte	3,6,1,5,41,9
	.half	.L980-.L827
	.byte	1,5,60,9
	.half	.L981-.L980
	.byte	1,5,59,9
	.half	.L982-.L981
	.byte	1,5,30,9
	.half	.L831-.L982
	.byte	3,1,1,5,14,1,5,30,9
	.half	.L983-.L831
	.byte	1,5,39,9
	.half	.L984-.L983
	.byte	1,5,20,9
	.half	.L830-.L984
	.byte	3,3,1,5,35,9
	.half	.L985-.L830
	.byte	1,5,34,9
	.half	.L986-.L985
	.byte	1,5,5,9
	.half	.L501-.L986
	.byte	3,3,1,5,33,9
	.half	.L502-.L501
	.byte	3,3,1,5,7,9
	.half	.L833-.L502
	.byte	1,5,36,7,9
	.half	.L987-.L833
	.byte	3,1,1,5,53,9
	.half	.L988-.L987
	.byte	1,5,54,7,9
	.half	.L989-.L988
	.byte	3,3,1,5,20,9
	.half	.L61-.L989
	.byte	3,5,1,5,47,9
	.half	.L990-.L61
	.byte	3,127,1,5,20,9
	.half	.L991-.L990
	.byte	3,2,1,5,45,9
	.half	.L992-.L991
	.byte	3,10,1,5,68,9
	.half	.L834-.L992
	.byte	3,116,1,5,30,3,3,1,5,49,9
	.half	.L993-.L834
	.byte	1,5,5,9
	.half	.L505-.L993
	.byte	3,5,1,5,44,9
	.half	.L506-.L505
	.byte	3,125,1,5,5,9
	.half	.L507-.L506
	.byte	3,3,1,5,45,9
	.half	.L508-.L507
	.byte	3,4,1,5,41,9
	.half	.L832-.L508
	.byte	3,3,1,5,42,9
	.half	.L994-.L832
	.byte	3,1,1,5,33,9
	.half	.L995-.L994
	.byte	3,3,1,5,48,9
	.half	.L837-.L995
	.byte	3,3,1,5,46,9
	.half	.L996-.L837
	.byte	1,9
	.half	.L997-.L996
	.byte	3,1,1,5,44,1,5,51,9
	.half	.L835-.L997
	.byte	3,1,1,5,49,1,5,51,9
	.half	.L998-.L835
	.byte	3,1,1,5,35,9
	.half	.L999-.L998
	.byte	3,2,1,5,5,9
	.half	.L1000-.L999
	.byte	1,5,61,7,9
	.half	.L1001-.L1000
	.byte	3,3,1,5,3,9
	.half	.L63-.L1001
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L211-.L63
	.byte	0,1,1
.L976:
	.sdecl	'.debug_ranges',debug,cluster('Uart_AbortWrite')
	.sect	'.debug_ranges'
.L210:
	.word	-1,.L150,0,.L211-.L150,0,0
.L495:
	.word	-1,.L150,0,.L493-.L150,-1,.L152,0,.L371-.L152,-1,.L154,0,.L366-.L154,0,0
.L504:
	.word	-1,.L150,.L505-.L150,.L506-.L150,.L507-.L150,.L508-.L150,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_GetStatus')
	.sect	'.debug_info'
.L212:
	.word	310
	.half	3
	.word	.L213
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L215,.L214
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_GetStatus',0,1,151,17,17
	.word	.L510
	.byte	1,1,1
	.word	.L156,.L511,.L155
	.byte	4
	.byte	'Channel',0,1,151,17,51
	.word	.L411,.L512
	.byte	5
	.word	.L156,.L511
	.byte	6
	.byte	'UartDriverState',0,1,153,17,19
	.word	.L510,.L513
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_GetStatus')
	.sect	'.debug_abbrev'
.L213:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_GetStatus')
	.sect	'.debug_line'
.L214:
	.word	.L1003-.L1002
.L1002:
	.half	3
	.word	.L1005-.L1004
.L1004:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1005:
	.byte	5,25,7,0,5,2
	.word	.L156
	.byte	3,184,17,1,5,34,9
	.half	.L838-.L156
	.byte	1,5,8,9
	.half	.L1006-.L838
	.byte	1,5,35,7,9
	.half	.L1007-.L1006
	.byte	3,1,1,5,49,9
	.half	.L1008-.L1007
	.byte	1,5,23,7,9
	.half	.L65-.L1008
	.byte	3,2,1,5,1,3,14,1,5,14,7,9
	.half	.L66-.L65
	.byte	3,116,1,5,49,7,9
	.half	.L1009-.L66
	.byte	3,1,1,5,23,7,9
	.half	.L1010-.L1009
	.byte	3,2,1,5,1,3,9,1,5,23,7,9
	.half	.L68-.L1010
	.byte	3,123,1,5,1,3,5,1,7,9
	.half	.L216-.L68
	.byte	0,1,1
.L1003:
	.sdecl	'.debug_ranges',debug,cluster('Uart_GetStatus')
	.sect	'.debug_ranges'
.L215:
	.word	-1,.L156,0,.L216-.L156,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_IsrReceive')
	.sect	'.debug_info'
.L217:
	.word	349
	.half	3
	.word	.L218
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L220,.L219
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_IsrReceive',0,1,223,17,6,1,1,1
	.word	.L158,.L514,.L157
	.byte	4
	.byte	'HwUnit',0,1,223,17,29
	.word	.L411,.L515
	.byte	5
	.word	.L516
	.byte	6
	.byte	'ChannelConfigPtr',0,1,225,17,27
	.word	.L409,.L517
	.byte	6
	.byte	'HwModulePtr',0,1,228,17,15
	.word	.L438,.L518
	.byte	6
	.byte	'Channel',0,1,229,17,22
	.word	.L411,.L519
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_IsrReceive')
	.sect	'.debug_abbrev'
.L218:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_IsrReceive')
	.sect	'.debug_line'
.L219:
	.word	.L1012-.L1011
.L1011:
	.half	3
	.word	.L1014-.L1013
.L1013:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1014:
	.byte	5,6,7,0,5,2
	.word	.L158
	.byte	3,222,17,1,5,24,9
	.half	.L842-.L158
	.byte	3,12,1,5,58,9
	.half	.L1015-.L842
	.byte	1,5,26,3,3,1,5,39,9
	.half	.L843-.L1015
	.byte	3,125,1,5,57,9
	.half	.L1016-.L843
	.byte	1,5,26,9
	.half	.L850-.L1016
	.byte	3,3,1,5,23,9
	.half	.L845-.L850
	.byte	3,2,1,5,7,1,5,23,9
	.half	.L1017-.L845
	.byte	1,5,32,9
	.half	.L1018-.L1017
	.byte	1,5,3,9
	.half	.L1019-.L1018
	.byte	1,5,56,7,9
	.half	.L1020-.L1019
	.byte	3,3,1,5,44,9
	.half	.L1021-.L1020
	.byte	3,4,1,5,61,9
	.half	.L846-.L1021
	.byte	3,125,1,5,30,3,127,1,5,44,9
	.half	.L1022-.L846
	.byte	3,4,1,5,41,9
	.half	.L847-.L1022
	.byte	3,7,1,5,56,3,124,1,5,41,9
	.half	.L848-.L847
	.byte	3,4,1,5,59,9
	.half	.L1023-.L848
	.byte	3,124,1,5,30,1,5,41,9
	.half	.L1024-.L1023
	.byte	3,4,1,5,26,9
	.half	.L1025-.L1024
	.byte	3,3,1,5,55,9
	.half	.L849-.L1025
	.byte	1,5,48,9
	.half	.L1026-.L849
	.byte	3,2,1,5,46,9
	.half	.L1027-.L1026
	.byte	1,9
	.half	.L1028-.L1027
	.byte	3,1,1,5,44,1,5,35,9
	.half	.L1029-.L1028
	.byte	3,2,1,5,5,9
	.half	.L1030-.L1029
	.byte	1,5,55,7,9
	.half	.L1031-.L1030
	.byte	3,3,1,5,1,9
	.half	.L72-.L1031
	.byte	3,8,1,7,9
	.half	.L221-.L72
	.byte	0,1,1
.L1012:
	.sdecl	'.debug_ranges',debug,cluster('Uart_IsrReceive')
	.sect	'.debug_ranges'
.L220:
	.word	-1,.L158,0,.L221-.L158,0,0
.L516:
	.word	-1,.L158,0,.L514-.L158,-1,.L160,0,.L336-.L160,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_IsrTransmit')
	.sect	'.debug_info'
.L222:
	.word	345
	.half	3
	.word	.L223
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L225,.L224
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_IsrTransmit',0,1,166,18,6,1,1,1
	.word	.L162,.L520,.L161
	.byte	4
	.byte	'HwUnit',0,1,166,18,30
	.word	.L411,.L521
	.byte	5
	.word	.L162,.L520
	.byte	6
	.byte	'HwModulePtr',0,1,170,18,15
	.word	.L438,.L522
	.byte	6
	.byte	'Tempsum',0,1,171,18,10
	.word	.L435,.L523
	.byte	6
	.byte	'Channel',0,1,172,18,22
	.word	.L411,.L524
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_IsrTransmit')
	.sect	'.debug_abbrev'
.L223:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_IsrTransmit')
	.sect	'.debug_line'
.L224:
	.word	.L1033-.L1032
.L1032:
	.half	3
	.word	.L1035-.L1034
.L1034:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1035:
	.byte	5,6,7,0,5,2
	.word	.L162
	.byte	3,165,18,1,5,38,9
	.half	.L854-.L162
	.byte	3,10,1,5,22,1,5,38,9
	.half	.L1036-.L854
	.byte	1,5,40,9
	.half	.L1037-.L1036
	.byte	3,1,1,5,47,9
	.half	.L1038-.L1037
	.byte	3,127,1,5,43,9
	.half	.L1039-.L1038
	.byte	3,1,1,5,47,3,127,1,5,68,9
	.half	.L852-.L1039
	.byte	1,5,28,3,4,1,5,47,9
	.half	.L1040-.L852
	.byte	1,5,33,9
	.half	.L1041-.L1040
	.byte	3,2,1,5,3,9
	.half	.L853-.L1041
	.byte	1,5,73,7,9
	.half	.L1042-.L853
	.byte	3,3,1,5,46,9
	.half	.L1043-.L1042
	.byte	3,5,1,5,61,9
	.half	.L857-.L1043
	.byte	3,3,1,5,42,9
	.half	.L1044-.L857
	.byte	3,7,1,5,64,9
	.half	.L858-.L1044
	.byte	3,121,1,5,33,1,5,42,9
	.half	.L1045-.L858
	.byte	3,7,1,5,61,9
	.half	.L1046-.L1045
	.byte	3,124,1,5,29,9
	.half	.L1047-.L1046
	.byte	3,1,1,5,33,3,127,1,5,42,9
	.half	.L1048-.L1047
	.byte	3,4,1,5,49,9
	.half	.L859-.L1048
	.byte	3,2,1,5,47,9
	.half	.L855-.L859
	.byte	1,5,54,9
	.half	.L1049-.L855
	.byte	3,1,1,5,52,1,5,1,9
	.half	.L1050-.L1049
	.byte	3,37,1,5,73,7,9
	.half	.L74-.L1050
	.byte	3,96,1,5,6,9
	.half	.L1051-.L74
	.byte	3,4,1,5,77,7,9
	.half	.L1052-.L1051
	.byte	3,4,1,5,39,9
	.half	.L1053-.L1052
	.byte	3,1,1,5,35,3,127,1,5,57,9
	.half	.L76-.L1053
	.byte	3,6,1,5,46,9
	.half	.L1054-.L76
	.byte	3,4,1,5,60,9
	.half	.L860-.L1054
	.byte	3,124,1,5,31,1,5,46,9
	.half	.L1055-.L860
	.byte	3,4,1,5,30,9
	.half	.L861-.L1055
	.byte	3,3,1,5,47,9
	.half	.L863-.L861
	.byte	3,3,1,5,71,9
	.half	.L865-.L863
	.byte	3,3,1,5,40,9
	.half	.L1056-.L865
	.byte	3,1,1,5,31,3,127,1,5,1,9
	.half	.L1057-.L1056
	.byte	3,5,1,7,9
	.half	.L226-.L1057
	.byte	0,1,1
.L1033:
	.sdecl	'.debug_ranges',debug,cluster('Uart_IsrTransmit')
	.sect	'.debug_ranges'
.L225:
	.word	-1,.L162,0,.L226-.L162,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_IsrError')
	.sect	'.debug_info'
.L227:
	.word	366
	.half	3
	.word	.L228
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L230,.L229
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_IsrError',0,1,133,19,6,1,1,1
	.word	.L164,.L525,.L163
	.byte	4
	.byte	'HwUnit',0,1,133,19,26
	.word	.L411,.L526
	.byte	5
	.word	.L527
	.byte	6
	.byte	'HwModulePtr',0,1,137,19,15
	.word	.L438,.L528
	.byte	6
	.byte	'ChannelConfigPtr',0,1,138,19,27
	.word	.L409,.L529
	.byte	6
	.byte	'ErrId',0,1,139,19,20
	.word	.L530,.L531
	.byte	6
	.byte	'Channel',0,1,140,19,9
	.word	.L411,.L532
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_IsrError')
	.sect	'.debug_abbrev'
.L228:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_IsrError')
	.sect	'.debug_line'
.L229:
	.word	.L1059-.L1058
.L1058:
	.half	3
	.word	.L1061-.L1060
.L1060:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1061:
	.byte	5,19,7,0,5,2
	.word	.L164
	.byte	3,139,19,1,5,37,9
	.half	.L1062-.L164
	.byte	1,5,45,9
	.half	.L1063-.L1062
	.byte	3,125,1,5,30,1,5,44,9
	.half	.L1064-.L1063
	.byte	1,5,37,9
	.half	.L867-.L1064
	.byte	3,3,1,5,24,9
	.half	.L868-.L867
	.byte	3,4,1,5,58,9
	.half	.L1065-.L868
	.byte	1,5,26,9
	.half	.L1066-.L1065
	.byte	3,123,1,5,39,9
	.half	.L869-.L1066
	.byte	3,5,1,5,57,9
	.half	.L1067-.L869
	.byte	1,5,27,9
	.half	.L870-.L1067
	.byte	3,3,1,5,3,9
	.half	.L1068-.L870
	.byte	1,5,72,7,9
	.half	.L1069-.L1068
	.byte	3,3,1,5,11,9
	.half	.L1070-.L1069
	.byte	3,3,1,5,44,9
	.half	.L1071-.L1070
	.byte	3,126,1,5,31,3,127,1,5,80,9
	.half	.L1072-.L1071
	.byte	3,2,1,5,31,9
	.half	.L77-.L1072
	.byte	3,4,1,5,8,9
	.half	.L1073-.L77
	.byte	1,5,72,7,9
	.half	.L1074-.L1073
	.byte	3,3,1,5,11,9
	.half	.L1075-.L1074
	.byte	3,3,1,5,44,9
	.half	.L1076-.L1075
	.byte	3,126,1,5,31,3,127,1,5,80,9
	.half	.L1077-.L1076
	.byte	3,2,1,5,31,9
	.half	.L79-.L1077
	.byte	3,4,1,5,8,9
	.half	.L1078-.L79
	.byte	1,5,72,7,9
	.half	.L1079-.L1078
	.byte	3,3,1,5,11,9
	.half	.L1080-.L1079
	.byte	3,3,1,5,44,9
	.half	.L1081-.L1080
	.byte	3,126,1,5,31,3,127,1,5,78,9
	.half	.L1082-.L1081
	.byte	3,2,1,5,31,9
	.half	.L81-.L1082
	.byte	3,4,1,5,8,9
	.half	.L1083-.L81
	.byte	1,5,72,7,9
	.half	.L1084-.L1083
	.byte	3,3,1,5,11,9
	.half	.L1085-.L1084
	.byte	3,3,1,5,44,9
	.half	.L1086-.L1085
	.byte	3,126,1,5,31,3,127,1,5,80,9
	.half	.L1087-.L1086
	.byte	3,2,1,5,31,9
	.half	.L83-.L1087
	.byte	3,4,1,5,8,9
	.half	.L1088-.L83
	.byte	1,5,72,7,9
	.half	.L1089-.L1088
	.byte	3,3,1,5,11,9
	.half	.L1090-.L1089
	.byte	3,3,1,5,44,9
	.half	.L1091-.L1090
	.byte	3,126,1,5,31,3,127,1,5,80,9
	.half	.L1092-.L1091
	.byte	3,2,1,5,31,9
	.half	.L85-.L1092
	.byte	3,4,1,5,8,9
	.half	.L1093-.L85
	.byte	1,5,56,7,9
	.half	.L1094-.L1093
	.byte	3,4,1,5,59,9
	.half	.L1095-.L1094
	.byte	1,5,30,1,5,72,9
	.half	.L866-.L1095
	.byte	3,4,1,5,63,9
	.half	.L871-.L866
	.byte	3,7,1,5,32,1,5,42,9
	.half	.L1096-.L871
	.byte	3,8,1,5,56,9
	.half	.L872-.L1096
	.byte	3,124,1,5,59,9
	.half	.L1097-.L872
	.byte	3,1,1,5,30,3,127,1,5,42,9
	.half	.L1098-.L1097
	.byte	3,4,1,5,7,9
	.half	.L78-.L1098
	.byte	3,8,1,5,42,7,9
	.half	.L1099-.L78
	.byte	1,5,13,7,9
	.half	.L1100-.L1099
	.byte	3,1,1,5,45,7,9
	.half	.L1101-.L1100
	.byte	1,5,26,7,9
	.half	.L88-.L1101
	.byte	3,3,1,5,55,9
	.half	.L1102-.L88
	.byte	1,5,21,9
	.half	.L1103-.L1102
	.byte	3,2,1,5,44,9
	.half	.L873-.L1103
	.byte	1,5,35,9
	.half	.L875-.L873
	.byte	3,2,1,5,5,9
	.half	.L1104-.L875
	.byte	1,5,55,7,9
	.half	.L1105-.L1104
	.byte	3,3,1,5,7,9
	.half	.L91-.L1105
	.byte	3,8,1,5,46,7,9
	.half	.L1106-.L91
	.byte	1,5,26,7,9
	.half	.L93-.L1106
	.byte	3,3,1,5,55,9
	.half	.L1107-.L93
	.byte	1,5,21,9
	.half	.L1108-.L1107
	.byte	3,2,1,5,44,9
	.half	.L1109-.L1108
	.byte	1,5,35,9
	.half	.L1110-.L1109
	.byte	3,2,1,5,5,9
	.half	.L1111-.L1110
	.byte	1,5,56,7,9
	.half	.L1112-.L1111
	.byte	3,3,1,5,1,9
	.half	.L94-.L1112
	.byte	3,8,1,7,9
	.half	.L231-.L94
	.byte	0,1,1
.L1059:
	.sdecl	'.debug_ranges',debug,cluster('Uart_IsrError')
	.sect	'.debug_ranges'
.L230:
	.word	-1,.L164,0,.L231-.L164,0,0
.L527:
	.word	-1,.L164,0,.L525-.L164,-1,.L166,0,.L351-.L166,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lHwInit')
	.sect	'.debug_info'
.L232:
	.word	373
	.half	3
	.word	.L233
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L235,.L234
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_lHwInit',0,1,197,5,13,1,1
	.word	.L106,.L533,.L105
	.byte	4
	.byte	'HwUnit',0,1,197,5,32
	.word	.L411,.L534
	.byte	4
	.byte	'ChannelConfigPtr',0,1,197,5,63
	.word	.L409,.L535
	.byte	5
	.word	.L536
	.byte	6
	.byte	'HwModulePtr',0,1,199,5,16
	.word	.L438,.L537
	.byte	6
	.byte	'TimeOutCount',0,1,200,5,10
	.word	.L443,.L538
	.byte	5
	.word	.L539
	.byte	6
	.byte	'val',0,1,246,5,4
	.word	.L443,.L541
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lHwInit')
	.sect	'.debug_abbrev'
.L233:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58,15,59
	.byte	15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_lHwInit')
	.sect	'.debug_line'
.L234:
	.word	.L1114-.L1113
.L1113:
	.half	3
	.word	.L1116-.L1115
.L1115:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1116:
	.byte	5,23,7,0,5,2
	.word	.L106
	.byte	3,199,5,1,5,80,9
	.half	.L661-.L106
	.byte	3,12,1,5,17,9
	.half	.L9-.L661
	.byte	3,2,1,5,13,9
	.half	.L8-.L9
	.byte	3,124,1,5,30,9
	.half	.L1117-.L8
	.byte	3,1,1,5,10,9
	.half	.L1118-.L1117
	.byte	3,127,1,5,75,7,9
	.half	.L1119-.L1118
	.byte	3,2,1,5,16,7,9
	.half	.L10-.L1119
	.byte	3,5,1,5,65,9
	.half	.L668-.L10
	.byte	3,11,1,5,18,9
	.half	.L12-.L668
	.byte	3,2,1,5,13,9
	.half	.L11-.L12
	.byte	3,124,1,5,32,9
	.half	.L1120-.L11
	.byte	3,1,1,5,10,9
	.half	.L1121-.L1120
	.byte	3,127,1,5,60,7,9
	.half	.L1122-.L1121
	.byte	3,2,1,5,16,7,9
	.half	.L13-.L1122
	.byte	3,5,1,5,80,9
	.half	.L666-.L13
	.byte	3,8,1,5,18,9
	.half	.L15-.L666
	.byte	3,2,1,5,13,9
	.half	.L14-.L15
	.byte	3,124,1,5,29,9
	.half	.L1123-.L14
	.byte	3,1,1,5,10,9
	.half	.L1124-.L1123
	.byte	3,127,1,5,75,7,9
	.half	.L1125-.L1124
	.byte	3,2,1,5,4,7,9
	.half	.L16-.L1125
	.byte	3,5,1,5,80,9
	.half	.L540-.L16
	.byte	3,206,0,1,5,18,9
	.half	.L18-.L540
	.byte	3,2,1,5,13,9
	.half	.L17-.L18
	.byte	3,124,1,5,33,9
	.half	.L1126-.L17
	.byte	3,1,1,5,10,9
	.half	.L1127-.L1126
	.byte	3,127,1,5,75,7,9
	.half	.L1128-.L1127
	.byte	3,2,1,5,1,7,9
	.half	.L19-.L1128
	.byte	3,4,1,7,9
	.half	.L236-.L19
	.byte	0,1,1
.L1114:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lHwInit')
	.sect	'.debug_ranges'
.L235:
	.word	-1,.L106,0,.L236-.L106,0,0
.L536:
	.word	-1,.L106,0,.L533-.L106,-1,.L108,0,.L356-.L108,-1,.L110,0,.L326-.L110,-1,.L114,0,.L321-.L114,0,0
.L539:
	.word	-1,.L106,.L16-.L106,.L540-.L106,-1,.L116,0,.L306-.L116,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lHwInitRuntime')
	.sect	'.debug_info'
.L237:
	.word	388
	.half	3
	.word	.L238
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L240,.L239
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_lHwInitRuntime',0,1,222,6,13,1,1
	.word	.L118,.L542,.L117
	.byte	4
	.byte	'HwUnit',0,1,222,6,39
	.word	.L411,.L543
	.byte	4
	.byte	'ChannelConfigPtr',0,1,223,6,64
	.word	.L409,.L544
	.byte	5
	.word	.L118,.L542
	.byte	6
	.byte	'HwModulePtr',0,1,225,6,16
	.word	.L438,.L545
	.byte	6
	.byte	'TimeOutCount',0,1,226,6,10
	.word	.L443,.L546
	.byte	5
	.word	.L28,.L547
	.byte	6
	.byte	'val',0,1,144,7,3
	.word	.L443,.L548
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lHwInitRuntime')
	.sect	'.debug_abbrev'
.L238:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_lHwInitRuntime')
	.sect	'.debug_line'
.L239:
	.word	.L1130-.L1129
.L1129:
	.half	3
	.word	.L1132-.L1131
.L1131:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1132:
	.byte	5,23,7,0,5,2
	.word	.L118
	.byte	3,225,6,1,5,80,9
	.half	.L733-.L118
	.byte	3,12,1,5,19,9
	.half	.L21-.L733
	.byte	3,2,1,5,15,9
	.half	.L20-.L21
	.byte	3,124,1,5,30,9
	.half	.L1133-.L20
	.byte	3,1,1,5,12,9
	.half	.L1134-.L1133
	.byte	3,127,1,5,75,7,9
	.half	.L1135-.L1134
	.byte	3,2,1,5,18,7,9
	.half	.L22-.L1135
	.byte	3,5,1,5,65,9
	.half	.L739-.L22
	.byte	3,11,1,5,18,9
	.half	.L24-.L739
	.byte	3,2,1,5,13,9
	.half	.L23-.L24
	.byte	3,124,1,5,32,9
	.half	.L1136-.L23
	.byte	3,1,1,5,10,9
	.half	.L1137-.L1136
	.byte	3,127,1,5,60,7,9
	.half	.L1138-.L1137
	.byte	3,2,1,5,16,7,9
	.half	.L25-.L1138
	.byte	3,5,1,5,80,9
	.half	.L738-.L25
	.byte	3,8,1,5,18,9
	.half	.L27-.L738
	.byte	3,2,1,5,13,9
	.half	.L26-.L27
	.byte	3,124,1,5,29,9
	.half	.L1139-.L26
	.byte	3,1,1,5,10,9
	.half	.L1140-.L1139
	.byte	3,127,1,5,75,7,9
	.half	.L1141-.L1140
	.byte	3,2,1,5,3,7,9
	.half	.L28-.L1141
	.byte	3,5,1,5,80,9
	.half	.L547-.L28
	.byte	3,206,0,1,5,18,9
	.half	.L30-.L547
	.byte	3,2,1,5,13,9
	.half	.L29-.L30
	.byte	3,124,1,5,33,9
	.half	.L1142-.L29
	.byte	3,1,1,5,10,9
	.half	.L1143-.L1142
	.byte	3,127,1,5,75,7,9
	.half	.L1144-.L1143
	.byte	3,2,1,5,1,7,9
	.half	.L31-.L1144
	.byte	3,4,1,7,9
	.half	.L241-.L31
	.byte	0,1,1
.L1130:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lHwInitRuntime')
	.sect	'.debug_ranges'
.L240:
	.word	-1,.L118,0,.L241-.L118,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lRead')
	.sect	'.debug_info'
.L242:
	.word	497
	.half	3
	.word	.L243
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L245,.L244
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_lRead',0,1,178,10,13,1,1
	.word	.L124,.L549,.L123
	.byte	4
	.byte	'HwModulePtr',0,1,178,10,36
	.word	.L438,.L550
	.byte	4
	.byte	'Channel',0,1,178,10,67
	.word	.L411,.L551
	.byte	5
	.word	.L552
	.byte	6
	.byte	'BuffPtr',0,1,180,10,19
	.word	.L433,.L553
	.byte	6
	.byte	'Read_Count',0,1,181,10,10
	.word	.L435,.L554
	.byte	6
	.byte	'TempIntLevel',0,1,182,10,9
	.word	.L411,.L555
	.byte	6
	.byte	'UartDatalen',0,1,183,10,9
	.word	.L411,.L556
	.byte	7
	.word	.L557,.L558
	.byte	6
	.byte	'val',0,1,207,10,7
	.word	.L443,.L559
	.byte	0,7
	.word	.L560,.L561
	.byte	6
	.byte	'val',0,1,217,10,7
	.word	.L443,.L562
	.byte	0,7
	.word	.L563,.L42
	.byte	6
	.byte	'val',0,1,250,10,7
	.word	.L443,.L564
	.byte	0,7
	.word	.L42,.L43
	.byte	6
	.byte	'val',0,1,134,11,6
	.word	.L443,.L565
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lRead')
	.sect	'.debug_abbrev'
.L243:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58,15,59
	.byte	15,57,15,73,16,2,6,0,0,7,11,1,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_lRead')
	.sect	'.debug_line'
.L244:
	.word	.L1146-.L1145
.L1145:
	.half	3
	.word	.L1148-.L1147
.L1147:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1148:
	.byte	5,30,7,0,5,2
	.word	.L124
	.byte	3,184,10,1,5,32,9
	.half	.L775-.L124
	.byte	3,2,1,5,21,9
	.half	.L1149-.L775
	.byte	3,11,1,5,39,3,115,1,5,49,9
	.half	.L776-.L1149
	.byte	3,2,1,5,45,9
	.half	.L777-.L776
	.byte	3,18,1,5,34,3,121,1,5,27,9
	.half	.L38-.L777
	.byte	3,2,1,5,35,9
	.half	.L1150-.L38
	.byte	3,4,1,5,29,9
	.half	.L1151-.L1150
	.byte	3,125,1,5,56,9
	.half	.L779-.L1151
	.byte	1,5,9,9
	.half	.L1152-.L779
	.byte	3,3,1,5,42,7,9
	.half	.L1153-.L1152
	.byte	3,1,1,5,7,7,9
	.half	.L557-.L1153
	.byte	3,2,1,5,32,9
	.half	.L558-.L557
	.byte	3,3,1,5,16,9
	.half	.L778-.L558
	.byte	1,5,18,9
	.half	.L1154-.L778
	.byte	3,11,1,5,7,9
	.half	.L560-.L1154
	.byte	3,124,1,5,49,9
	.half	.L561-.L560
	.byte	3,6,1,5,7,9
	.half	.L1155-.L561
	.byte	3,112,1,5,32,9
	.half	.L39-.L1155
	.byte	3,21,1,5,16,9
	.half	.L1156-.L39
	.byte	1,5,31,9
	.half	.L1157-.L1156
	.byte	3,7,1,5,32,9
	.half	.L1158-.L1157
	.byte	3,3,1,5,49,9
	.half	.L1159-.L1158
	.byte	1,5,32,9
	.half	.L41-.L1159
	.byte	3,1,1,5,51,9
	.half	.L1160-.L41
	.byte	1,5,34,9
	.half	.L37-.L1160
	.byte	3,87,1,5,31,7,9
	.half	.L1161-.L37
	.byte	3,45,1,5,50,9
	.half	.L1162-.L1161
	.byte	1,5,3,9
	.half	.L782-.L1162
	.byte	1,5,5,7,9
	.half	.L1163-.L782
	.byte	3,2,1,5,51,7,9
	.half	.L1164-.L1163
	.byte	3,4,1,5,7,3,1,1,5,5,9
	.half	.L783-.L1164
	.byte	3,4,1,5,6,9
	.half	.L42-.L783
	.byte	3,8,1,5,44,9
	.half	.L43-.L42
	.byte	3,5,1,5,1,9
	.half	.L1165-.L43
	.byte	3,2,1,7,9
	.half	.L246-.L1165
	.byte	0,1,1
.L1146:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lRead')
	.sect	'.debug_ranges'
.L245:
	.word	-1,.L124,0,.L246-.L124,0,0
.L552:
	.word	-1,.L124,0,.L549-.L124,-1,.L126,0,.L331-.L126,-1,.L128,0,.L376-.L128,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lWrite')
	.sect	'.debug_info'
.L247:
	.word	396
	.half	3
	.word	.L248
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L250,.L249
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_lWrite',0,1,219,13,13,1,1
	.word	.L142,.L566,.L141
	.byte	4
	.byte	'HwModulePtr',0,1,219,13,37
	.word	.L438,.L567
	.byte	4
	.byte	'Channel',0,1,219,13,68
	.word	.L411,.L568
	.byte	5
	.word	.L142,.L566
	.byte	6
	.byte	'BuffPtr',0,1,221,13,19
	.word	.L433,.L569
	.byte	6
	.byte	'Write_Count',0,1,222,13,10
	.word	.L435,.L570
	.byte	6
	.byte	'UartDatalen',0,1,224,13,9
	.word	.L411,.L571
	.byte	5
	.word	.L572,.L573
	.byte	6
	.byte	'val',0,1,255,13,8
	.word	.L443,.L574
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lWrite')
	.sect	'.debug_abbrev'
.L248:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_lWrite')
	.sect	'.debug_line'
.L249:
	.word	.L1167-.L1166
.L1166:
	.half	3
	.word	.L1169-.L1168
.L1168:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1169:
	.byte	5,29,7,0,5,2
	.word	.L142
	.byte	3,225,13,1,5,38,9
	.half	.L808-.L142
	.byte	1,5,51,9
	.half	.L809-.L808
	.byte	3,1,1,5,49,1,5,32,9
	.half	.L1170-.L809
	.byte	3,2,1,5,3,9
	.half	.L1171-.L1170
	.byte	1,5,17,7,9
	.half	.L1172-.L1171
	.byte	3,3,1,5,32,1,5,57,9
	.half	.L50-.L1172
	.byte	3,2,1,5,8,9
	.half	.L1173-.L50
	.byte	1,5,62,7,9
	.half	.L1174-.L1173
	.byte	3,3,1,5,22,9
	.half	.L51-.L1174
	.byte	3,8,1,5,40,9
	.half	.L1175-.L51
	.byte	3,7,1,5,35,3,121,1,5,29,9
	.half	.L55-.L1175
	.byte	3,2,1,5,36,9
	.half	.L1176-.L55
	.byte	3,4,1,5,40,9
	.half	.L1177-.L1176
	.byte	3,125,1,5,67,9
	.half	.L810-.L1177
	.byte	1,5,10,9
	.half	.L1178-.L810
	.byte	3,3,1,5,38,7,9
	.half	.L1179-.L1178
	.byte	3,1,1,5,8,7,9
	.half	.L572-.L1179
	.byte	3,3,1,5,19,9
	.half	.L573-.L572
	.byte	3,4,1,5,8,9
	.half	.L1180-.L573
	.byte	3,1,1,5,50,9
	.half	.L1181-.L1180
	.byte	3,6,1,5,33,9
	.half	.L1182-.L1181
	.byte	3,1,1,5,54,9
	.half	.L1183-.L1182
	.byte	1,5,20,9
	.half	.L1184-.L1183
	.byte	3,3,1,5,8,3,113,1,9
	.half	.L56-.L1184
	.byte	3,20,1,5,34,9
	.half	.L813-.L56
	.byte	3,10,1,5,33,9
	.half	.L1185-.L813
	.byte	3,124,1,5,50,9
	.half	.L1186-.L1185
	.byte	1,5,33,9
	.half	.L812-.L1186
	.byte	3,1,1,5,54,9
	.half	.L1187-.L812
	.byte	1,5,35,9
	.half	.L54-.L1187
	.byte	3,91,1,5,44,7,9
	.half	.L814-.L54
	.byte	3,44,1,5,1,9
	.half	.L1188-.L814
	.byte	3,2,1,7,9
	.half	.L251-.L1188
	.byte	0,1,1
.L1167:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lWrite')
	.sect	'.debug_ranges'
.L250:
	.word	-1,.L142,0,.L251-.L142,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lEnableReadInterrupts')
	.sect	'.debug_info'
.L252:
	.word	396
	.half	3
	.word	.L253
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L255,.L254
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_lEnableReadInterrupts',0,1,162,11,13,1,1
	.word	.L130,.L575,.L129
	.byte	4
	.byte	'HwModulePtr',0,1,162,11,52
	.word	.L438,.L576
	.byte	5
	.word	.L130,.L575
	.byte	6
	.word	.L577
	.byte	7
	.byte	'val',0,1,165,11,3
	.word	.L443,.L579
	.byte	0,5
	.word	.L578,.L580
	.byte	7
	.byte	'val',0,1,169,11,3
	.word	.L443,.L581
	.byte	0,5
	.word	.L580,.L582
	.byte	7
	.byte	'val',0,1,173,11,3
	.word	.L443,.L583
	.byte	0,5
	.word	.L582,.L584
	.byte	7
	.byte	'val',0,1,177,11,3
	.word	.L443,.L585
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lEnableReadInterrupts')
	.sect	'.debug_abbrev'
.L253:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,11,1,85,6,0
	.byte	0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_lEnableReadInterrupts')
	.sect	'.debug_line'
.L254:
	.word	.L1190-.L1189
.L1189:
	.half	3
	.word	.L1192-.L1191
.L1191:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1192:
	.byte	5,3,7,0,5,2
	.word	.L130
	.byte	3,164,11,1,9
	.half	.L578-.L130
	.byte	3,4,1,9
	.half	.L580-.L578
	.byte	3,4,1,9
	.half	.L582-.L580
	.byte	3,4,1,5,1,9
	.half	.L584-.L582
	.byte	3,3,1,7,9
	.half	.L256-.L584
	.byte	0,1,1
.L1190:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lEnableReadInterrupts')
	.sect	'.debug_ranges'
.L255:
	.word	-1,.L130,0,.L256-.L130,0,0
.L577:
	.word	-1,.L130,0,.L578-.L130,-1,.L132,0,.L346-.L132,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lEnableWriteInterrupts')
	.sect	'.debug_info'
.L257:
	.word	317
	.half	3
	.word	.L258
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L260,.L259
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_lEnableWriteInterrupts',0,1,185,14,13,1,1
	.word	.L144,.L586,.L143
	.byte	4
	.byte	'HwModulePtr',0,1,185,14,53
	.word	.L438,.L587
	.byte	4
	.byte	'ApiAccessId',0,1,186,14,68
	.word	.L411,.L588
	.byte	5
	.word	.L144,.L586
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lEnableWriteInterrupts')
	.sect	'.debug_abbrev'
.L258:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_lEnableWriteInterrupts')
	.sect	'.debug_line'
.L259:
	.word	.L1194-.L1193
.L1193:
	.half	3
	.word	.L1196-.L1195
.L1195:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1196:
	.byte	5,70,7,0,5,2
	.word	.L144
	.byte	3,207,14,1,5,73,9
	.half	.L1197-.L144
	.byte	1,5,30,1,5,74,9
	.half	.L1198-.L1197
	.byte	3,3,1,5,73,9
	.half	.L1199-.L1198
	.byte	3,1,1,5,32,9
	.half	.L1200-.L1199
	.byte	3,127,1,5,74,9
	.half	.L1201-.L1200
	.byte	3,5,1,5,32,3,127,1,5,1,9
	.half	.L1202-.L1201
	.byte	3,8,1,7,9
	.half	.L261-.L1202
	.byte	0,1,1
.L1194:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lEnableWriteInterrupts')
	.sect	'.debug_ranges'
.L260:
	.word	-1,.L144,0,.L261-.L144,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lClearWriteInterrupts')
	.sect	'.debug_info'
.L262:
	.word	316
	.half	3
	.word	.L263
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L265,.L264
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_lClearWriteInterrupts',0,1,244,14,13,1,1
	.word	.L146,.L589,.L145
	.byte	4
	.byte	'HwModulePtr',0,1,244,14,52
	.word	.L438,.L590
	.byte	4
	.byte	'ApiAccessId',0,1,245,14,69
	.word	.L411,.L591
	.byte	5
	.word	.L146,.L589
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lClearWriteInterrupts')
	.sect	'.debug_abbrev'
.L263:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_lClearWriteInterrupts')
	.sect	'.debug_line'
.L264:
	.word	.L1204-.L1203
.L1203:
	.half	3
	.word	.L1206-.L1205
.L1205:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1206:
	.byte	5,72,7,0,5,2
	.word	.L146
	.byte	3,149,15,1,5,43,9
	.half	.L1207-.L146
	.byte	3,1,1,5,31,3,127,1,5,72,9
	.half	.L1208-.L1207
	.byte	3,3,1,5,42,9
	.half	.L1209-.L1208
	.byte	3,1,1,5,31,3,127,1,5,1,9
	.half	.L1210-.L1209
	.byte	3,9,1,7,9
	.half	.L266-.L1210
	.byte	0,1,1
.L1204:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lClearWriteInterrupts')
	.sect	'.debug_ranges'
.L265:
	.word	-1,.L146,0,.L266-.L146,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lClearReadInterrupts')
	.sect	'.debug_info'
.L267:
	.word	315
	.half	3
	.word	.L268
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L270,.L269
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_lClearReadInterrupts',0,1,203,11,13,1,1
	.word	.L134,.L592,.L133
	.byte	4
	.byte	'HwModulePtr',0,1,203,11,51
	.word	.L438,.L593
	.byte	4
	.byte	'ApiAccessId',0,1,204,11,69
	.word	.L411,.L594
	.byte	5
	.word	.L134,.L592
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lClearReadInterrupts')
	.sect	'.debug_abbrev'
.L268:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_lClearReadInterrupts')
	.sect	'.debug_line'
.L269:
	.word	.L1212-.L1211
.L1211:
	.half	3
	.word	.L1214-.L1213
.L1213:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1214:
	.byte	5,72,7,0,5,2
	.word	.L134
	.byte	3,253,11,1,5,44,9
	.half	.L1215-.L134
	.byte	3,1,1,5,31,3,127,1,5,72,9
	.half	.L1216-.L1215
	.byte	3,4,1,5,44,9
	.half	.L1217-.L1216
	.byte	3,1,1,5,31,3,127,1,5,72,9
	.half	.L1218-.L1217
	.byte	3,4,1,5,44,9
	.half	.L1219-.L1218
	.byte	3,1,1,5,31,3,127,1,5,72,9
	.half	.L1220-.L1219
	.byte	3,4,1,5,44,9
	.half	.L1221-.L1220
	.byte	3,1,1,5,31,3,127,1,5,1,9
	.half	.L1222-.L1221
	.byte	3,9,1,7,9
	.half	.L271-.L1222
	.byte	0,1,1
.L1212:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lClearReadInterrupts')
	.sect	'.debug_ranges'
.L270:
	.word	-1,.L134,0,.L271-.L134,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lHwEnableAscLinTxIntr')
	.sect	'.debug_info'
.L272:
	.word	334
	.half	3
	.word	.L273
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L275,.L274
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_lHwEnableAscLinTxIntr',0,1,233,23,13,1,1
	.word	.L182,.L595,.L181
	.byte	4
	.byte	'HwUnit',0,1,233,23,55
	.word	.L596,.L597
	.byte	5
	.word	.L182,.L595
	.byte	6
	.byte	'Offset',0,1,235,23,10
	.word	.L443,.L598
	.byte	5
	.word	.L599,.L600
	.byte	6
	.byte	'val',0,1,244,23,3
	.word	.L443,.L601
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lHwEnableAscLinTxIntr')
	.sect	'.debug_abbrev'
.L273:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_lHwEnableAscLinTxIntr')
	.sect	'.debug_line'
.L274:
	.word	.L1224-.L1223
.L1223:
	.half	3
	.word	.L1226-.L1225
.L1225:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1226:
	.byte	5,27,7,0,5,2
	.word	.L182
	.byte	3,236,23,1,5,3,3,7,1,5,1,9
	.half	.L600-.L182
	.byte	3,12,1,7,9
	.half	.L276-.L600
	.byte	0,1,1
.L1224:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lHwEnableAscLinTxIntr')
	.sect	'.debug_ranges'
.L275:
	.word	-1,.L182,0,.L276-.L182,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lHwEnableAscLinRxIntr')
	.sect	'.debug_info'
.L277:
	.word	334
	.half	3
	.word	.L278
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L280,.L279
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_lHwEnableAscLinRxIntr',0,1,188,23,13,1,1
	.word	.L180,.L602,.L179
	.byte	4
	.byte	'HwUnit',0,1,188,23,55
	.word	.L603,.L604
	.byte	5
	.word	.L180,.L602
	.byte	6
	.byte	'Offset',0,1,190,23,10
	.word	.L443,.L605
	.byte	5
	.word	.L606,.L607
	.byte	6
	.byte	'val',0,1,199,23,3
	.word	.L443,.L608
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lHwEnableAscLinRxIntr')
	.sect	'.debug_abbrev'
.L278:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_lHwEnableAscLinRxIntr')
	.sect	'.debug_line'
.L279:
	.word	.L1228-.L1227
.L1227:
	.half	3
	.word	.L1230-.L1229
.L1229:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1230:
	.byte	5,27,7,0,5,2
	.word	.L180
	.byte	3,191,23,1,5,3,3,7,1,5,1,9
	.half	.L607-.L180
	.byte	3,14,1,7,9
	.half	.L281-.L607
	.byte	0,1,1
.L1228:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lHwEnableAscLinRxIntr')
	.sect	'.debug_ranges'
.L280:
	.word	-1,.L180,0,.L281-.L180,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lHwEnableAscLinErrIntr')
	.sect	'.debug_info'
.L282:
	.word	331
	.half	3
	.word	.L283
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L285,.L284
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_lHwEnableAscLinErrIntr',0,1,142,23,13,1,1
	.word	.L176,.L609,.L175
	.byte	4
	.byte	'HwUnit',0,1,142,23,56
	.word	.L610,.L611
	.byte	5
	.word	.L176,.L609
	.byte	6
	.byte	'Offset',0,1,144,23,10
	.word	.L443,.L612
	.byte	7
	.word	.L613
	.byte	6
	.byte	'val',0,1,153,23,3
	.word	.L443,.L616
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lHwEnableAscLinErrIntr')
	.sect	'.debug_abbrev'
.L283:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,11,1,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_lHwEnableAscLinErrIntr')
	.sect	'.debug_line'
.L284:
	.word	.L1232-.L1231
.L1231:
	.half	3
	.word	.L1234-.L1233
.L1233:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1234:
	.byte	5,27,7,0,5,2
	.word	.L176
	.byte	3,145,23,1,5,3,3,7,1,5,1,9
	.half	.L615-.L176
	.byte	3,13,1,7,9
	.half	.L286-.L615
	.byte	0,1,1
.L1232:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lHwEnableAscLinErrIntr')
	.sect	'.debug_ranges'
.L285:
	.word	-1,.L176,0,.L286-.L176,0,0
.L613:
	.word	-1,.L176,.L614-.L176,.L615-.L176,-1,.L178,0,.L311-.L178,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lHwDisableAscLinTxIntr')
	.sect	'.debug_info'
.L287:
	.word	354
	.half	3
	.word	.L288
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L290,.L289
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_lHwDisableAscLinTxIntr',0,1,164,22,13,1,1
	.word	.L174,.L617,.L173
	.byte	4
	.byte	'HwUnit',0,1,164,22,56
	.word	.L618,.L619
	.byte	4
	.byte	'ApiAccessId',0,1,164,22,69
	.word	.L411,.L620
	.byte	5
	.word	.L174,.L617
	.byte	6
	.byte	'Offset',0,1,167,22,10
	.word	.L443,.L621
	.byte	6
	.byte	'IntrSrc',0,1,167,22,17
	.word	.L443,.L622
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lHwDisableAscLinTxIntr')
	.sect	'.debug_abbrev'
.L288:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_lHwDisableAscLinTxIntr')
	.sect	'.debug_line'
.L289:
	.word	.L1236-.L1235
.L1235:
	.half	3
	.word	.L1238-.L1237
.L1237:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1238:
	.byte	5,27,7,0,5,2
	.word	.L174
	.byte	3,168,22,1,5,46,3,28,1,5,1,9
	.half	.L884-.L174
	.byte	3,52,1,7,9
	.half	.L291-.L884
	.byte	0,1,1
.L1236:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lHwDisableAscLinTxIntr')
	.sect	'.debug_ranges'
.L290:
	.word	-1,.L174,0,.L291-.L174,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lHwDisableAscLinRxIntr')
	.sect	'.debug_info'
.L292:
	.word	354
	.half	3
	.word	.L293
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L295,.L294
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_lHwDisableAscLinRxIntr',0,1,186,21,13,1,1
	.word	.L172,.L623,.L171
	.byte	4
	.byte	'HwUnit',0,1,186,21,56
	.word	.L624,.L625
	.byte	4
	.byte	'ApiAccessId',0,1,187,21,69
	.word	.L411,.L626
	.byte	5
	.word	.L172,.L623
	.byte	6
	.byte	'Offset',0,1,190,21,10
	.word	.L443,.L627
	.byte	6
	.byte	'IntrSrc',0,1,190,21,17
	.word	.L443,.L628
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lHwDisableAscLinRxIntr')
	.sect	'.debug_abbrev'
.L293:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_lHwDisableAscLinRxIntr')
	.sect	'.debug_line'
.L294:
	.word	.L1240-.L1239
.L1239:
	.half	3
	.word	.L1242-.L1241
.L1241:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1242:
	.byte	5,27,7,0,5,2
	.word	.L172
	.byte	3,191,21,1,5,45,3,28,1,5,1,9
	.half	.L882-.L172
	.byte	3,51,1,7,9
	.half	.L296-.L882
	.byte	0,1,1
.L1240:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lHwDisableAscLinRxIntr')
	.sect	'.debug_ranges'
.L295:
	.word	-1,.L172,0,.L296-.L172,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lHwDisableAscLinErrIntr')
	.sect	'.debug_info'
.L297:
	.word	351
	.half	3
	.word	.L298
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L300,.L299
	.byte	2
	.word	.L183
	.byte	3
	.byte	'Uart_lHwDisableAscLinErrIntr',0,1,207,20,13,1,1
	.word	.L168,.L629,.L167
	.byte	4
	.byte	'HwUnit',0,1,207,20,57
	.word	.L630,.L631
	.byte	4
	.byte	'ApiAccessId',0,1,208,20,69
	.word	.L411,.L632
	.byte	5
	.word	.L633
	.byte	6
	.byte	'Offset',0,1,211,20,10
	.word	.L443,.L634
	.byte	6
	.byte	'IntrSrc',0,1,211,20,17
	.word	.L443,.L635
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lHwDisableAscLinErrIntr')
	.sect	'.debug_abbrev'
.L298:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58,15,59
	.byte	15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_lHwDisableAscLinErrIntr')
	.sect	'.debug_line'
.L299:
	.word	.L1244-.L1243
.L1243:
	.half	3
	.word	.L1246-.L1245
.L1245:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1246:
	.byte	5,27,7,0,5,2
	.word	.L168
	.byte	3,212,20,1,5,43,3,29,1,5,1,9
	.half	.L880-.L168
	.byte	3,50,1,7,9
	.half	.L301-.L880
	.byte	0,1,1
.L1244:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lHwDisableAscLinErrIntr')
	.sect	'.debug_ranges'
.L300:
	.word	-1,.L168,0,.L301-.L168,0,0
.L633:
	.word	-1,.L168,0,.L629-.L168,-1,.L170,0,.L316-.L170,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_7')
	.sect	'.debug_info'
.L302:
	.word	239
	.half	3
	.word	.L303
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L305,.L304
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_7',0,1,197,5,13,1
	.word	.L116,.L306,.L115
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_7')
	.sect	'.debug_abbrev'
.L303:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_7')
	.sect	'.debug_line'
.L304:
	.word	.L1248-.L1247
.L1247:
	.half	3
	.word	.L1250-.L1249
.L1249:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1250:
	.byte	5,4,7,0,5,2
	.word	.L116
	.byte	3,245,5,1,5,3,9
	.half	.L673-.L116
	.byte	3,33,1,5,4,9
	.half	.L741-.L673
	.byte	3,95,1,5,3,9
	.half	.L674-.L741
	.byte	3,4,1,9
	.half	.L1251-.L674
	.byte	3,3,1,9
	.half	.L1252-.L1251
	.byte	3,3,1,9
	.half	.L1253-.L1252
	.byte	3,3,1,9
	.half	.L1254-.L1253
	.byte	3,5,1,9
	.half	.L689-.L1254
	.byte	3,4,1,9
	.half	.L1255-.L689
	.byte	3,3,1,9
	.half	.L1256-.L1255
	.byte	3,5,1,9
	.half	.L698-.L1256
	.byte	3,3,1,9
	.half	.L1257-.L698
	.byte	3,5,1,9
	.half	.L1258-.L1257
	.byte	3,3,1,9
	.half	.L1259-.L1258
	.byte	3,3,1,9
	.half	.L710-.L1259
	.byte	3,3,1,9
	.half	.L1260-.L710
	.byte	3,5,1,9
	.half	.L716-.L1260
	.byte	3,3,1,9
	.half	.L719-.L716
	.byte	3,5,1,9
	.half	.L1261-.L719
	.byte	3,4,1,9
	.half	.L725-.L1261
	.byte	3,2,1,9
	.half	.L672-.L725
	.byte	3,4,1,5,16,9
	.half	.L730-.L672
	.byte	3,3,1,9
	.half	.L306-.L730
	.byte	0,1,1,5,3,0,5,2
	.word	.L116
	.byte	3,143,7,1,9
	.half	.L673-.L116
	.byte	3,33,1,9
	.half	.L741-.L673
	.byte	3,95,1,9
	.half	.L674-.L741
	.byte	3,4,1,9
	.half	.L1251-.L674
	.byte	3,3,1,9
	.half	.L1252-.L1251
	.byte	3,3,1,9
	.half	.L1253-.L1252
	.byte	3,3,1,9
	.half	.L1254-.L1253
	.byte	3,5,1,9
	.half	.L689-.L1254
	.byte	3,4,1,9
	.half	.L1255-.L689
	.byte	3,3,1,9
	.half	.L1256-.L1255
	.byte	3,5,1,9
	.half	.L698-.L1256
	.byte	3,3,1,9
	.half	.L1257-.L698
	.byte	3,5,1,9
	.half	.L1258-.L1257
	.byte	3,3,1,9
	.half	.L1259-.L1258
	.byte	3,3,1,9
	.half	.L710-.L1259
	.byte	3,3,1,9
	.half	.L1260-.L710
	.byte	3,5,1,9
	.half	.L716-.L1260
	.byte	3,3,1,9
	.half	.L719-.L716
	.byte	3,5,1,9
	.half	.L1261-.L719
	.byte	3,4,1,9
	.half	.L725-.L1261
	.byte	3,2,1,9
	.half	.L672-.L725
	.byte	3,234,126,1,5,16,9
	.half	.L730-.L672
	.byte	3,157,1,1,3,230,126,1,7,9
	.half	.L306-.L730
	.byte	0,1,1
.L1248:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_7')
	.sect	'.debug_ranges'
.L305:
	.word	-1,.L116,0,.L306-.L116,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_8')
	.sect	'.debug_info'
.L307:
	.word	239
	.half	3
	.word	.L308
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L310,.L309
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_8',0,1,142,23,13,1
	.word	.L178,.L311,.L177
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_8')
	.sect	'.debug_abbrev'
.L308:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_8')
	.sect	'.debug_line'
.L309:
	.word	.L1263-.L1262
.L1262:
	.half	3
	.word	.L1265-.L1264
.L1264:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1265:
	.byte	5,3,7,0,5,2
	.word	.L178
	.byte	3,152,23,1,9
	.half	.L1266-.L178
	.byte	3,9,1,9
	.half	.L311-.L1266
	.byte	0,1,1,5,3,0,5,2
	.word	.L178
	.byte	3,198,23,1,9
	.half	.L1266-.L178
	.byte	3,10,1,9
	.half	.L885-.L1266
	.byte	3,81,1,7,9
	.half	.L311-.L885
	.byte	0,1,1,5,3,0,5,2
	.word	.L178
	.byte	3,243,23,1,9
	.half	.L1266-.L178
	.byte	3,9,1,9
	.half	.L885-.L1266
	.byte	3,165,127,1,7,9
	.half	.L311-.L885
	.byte	0,1,1
.L1263:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_8')
	.sect	'.debug_ranges'
.L310:
	.word	-1,.L178,0,.L311-.L178,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_9')
	.sect	'.debug_info'
.L312:
	.word	239
	.half	3
	.word	.L313
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L315,.L314
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_9',0,1,207,20,13,1
	.word	.L170,.L316,.L169
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_9')
	.sect	'.debug_abbrev'
.L313:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_9')
	.sect	'.debug_line'
.L314:
	.word	.L1268-.L1267
.L1267:
	.half	3
	.word	.L1270-.L1269
.L1269:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1270:
	.byte	5,43,7,0,5,2
	.word	.L170
	.byte	3,241,20,1,5,68,9
	.half	.L1271-.L170
	.byte	1,5,16,9
	.half	.L1272-.L1271
	.byte	3,127,1,5,3,9
	.half	.L878-.L1272
	.byte	3,4,1,5,10,7,9
	.half	.L1273-.L878
	.byte	3,41,1,5,21,9
	.half	.L879-.L1273
	.byte	3,1,1,5,75,9
	.half	.L1274-.L879
	.byte	3,127,1,5,51,9
	.half	.L1275-.L1274
	.byte	3,1,1,5,72,3,126,1,5,3,9
	.half	.L96-.L1275
	.byte	3,88,1,7,9
	.half	.L316-.L96
	.byte	0,1,1,5,45,0,5,2
	.word	.L170
	.byte	3,219,21,1,5,69,9
	.half	.L1271-.L170
	.byte	1,5,15,9
	.half	.L1272-.L1271
	.byte	1,5,3,9
	.half	.L878-.L1272
	.byte	3,3,1,5,54,7,9
	.half	.L1273-.L878
	.byte	3,41,1,5,22,9
	.half	.L879-.L1273
	.byte	3,2,1,5,51,9
	.half	.L1274-.L879
	.byte	3,127,1,5,52,9
	.half	.L1275-.L1274
	.byte	3,1,1,5,51,3,126,1,5,3,9
	.half	.L96-.L1275
	.byte	3,237,126,1,7,9
	.half	.L316-.L96
	.byte	0,1,1,5,46,0,5,2
	.word	.L170
	.byte	3,196,22,1,5,69,9
	.half	.L1271-.L170
	.byte	1,5,16,9
	.half	.L1272-.L1271
	.byte	1,5,3,9
	.half	.L878-.L1272
	.byte	3,4,1,5,54,7,9
	.half	.L1273-.L878
	.byte	3,41,1,5,22,9
	.half	.L879-.L1273
	.byte	3,2,1,5,51,9
	.half	.L1274-.L879
	.byte	3,127,1,5,52,9
	.half	.L1275-.L1274
	.byte	3,1,1,5,51,3,126,1,5,3,9
	.half	.L96-.L1275
	.byte	3,131,126,1,7,9
	.half	.L316-.L96
	.byte	0,1,1
.L1268:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_9')
	.sect	'.debug_ranges'
.L315:
	.word	-1,.L170,0,.L316-.L170,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_10')
	.sect	'.debug_info'
.L317:
	.word	240
	.half	3
	.word	.L318
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L320,.L319
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_10',0,1,197,5,13,1
	.word	.L114,.L321,.L113
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_10')
	.sect	'.debug_abbrev'
.L318:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_10')
	.sect	'.debug_line'
.L319:
	.word	.L1277-.L1276
.L1276:
	.half	3
	.word	.L1279-.L1278
.L1278:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1279:
	.byte	5,34,7,0,5,2
	.word	.L114
	.byte	3,203,5,1,5,19,1,5,33,9
	.half	.L1280-.L114
	.byte	1,5,23,9
	.half	.L658-.L1280
	.byte	3,124,1,5,3,9
	.half	.L659-.L658
	.byte	3,6,1,9
	.half	.L321-.L659
	.byte	0,1,1,5,34,0,5,2
	.word	.L114
	.byte	3,229,6,1,5,19,1,5,33,9
	.half	.L1280-.L114
	.byte	1,5,23,9
	.half	.L658-.L1280
	.byte	3,124,1,5,5,9
	.half	.L659-.L658
	.byte	3,6,1,5,3,9
	.half	.L657-.L659
	.byte	3,230,126,1,7,9
	.half	.L321-.L657
	.byte	0,1,1
.L1277:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_10')
	.sect	'.debug_ranges'
.L320:
	.word	-1,.L114,0,.L321-.L114,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_11')
	.sect	'.debug_info'
.L322:
	.word	240
	.half	3
	.word	.L323
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L325,.L324
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_11',0,1,197,5,13,1
	.word	.L110,.L326,.L109
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_11')
	.sect	'.debug_abbrev'
.L323:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_11')
	.sect	'.debug_line'
.L324:
	.word	.L1282-.L1281
.L1281:
	.half	3
	.word	.L1284-.L1283
.L1283:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1284:
	.byte	5,3,7,0,5,2
	.word	.L110
	.byte	3,218,5,1,5,16,9
	.half	.L1285-.L110
	.byte	3,126,1,5,3,9
	.half	.L736-.L1285
	.byte	3,2,1,9
	.half	.L662-.L736
	.byte	3,3,1,9
	.half	.L326-.L662
	.byte	0,1,1,5,3,0,5,2
	.word	.L110
	.byte	3,244,6,1,5,18,9
	.half	.L1285-.L110
	.byte	3,126,1,5,3,9
	.half	.L736-.L1285
	.byte	3,2,1,9
	.half	.L662-.L736
	.byte	3,233,126,1,9
	.half	.L326-.L662
	.byte	0,1,1
.L1282:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_11')
	.sect	'.debug_ranges'
.L325:
	.word	-1,.L110,0,.L326-.L110,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_12')
	.sect	'.debug_info'
.L327:
	.word	240
	.half	3
	.word	.L328
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L330,.L329
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_12',0,1,178,10,13,1
	.word	.L126,.L331,.L125
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_12')
	.sect	'.debug_abbrev'
.L328:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_12')
	.sect	'.debug_line'
.L329:
	.word	.L1287-.L1286
.L1286:
	.half	3
	.word	.L1289-.L1288
.L1288:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1289:
	.byte	5,30,7,0,5,2
	.word	.L126
	.byte	3,184,10,1,5,14,9
	.half	.L1290-.L126
	.byte	1,5,30,9
	.half	.L773-.L1290
	.byte	1,7,9
	.half	.L331-.L773
	.byte	0,1,1,5,29,0,5,2
	.word	.L126
	.byte	3,225,13,1,5,14,9
	.half	.L1290-.L126
	.byte	3,215,124,1,5,30,9
	.half	.L773-.L1290
	.byte	1,7,9
	.half	.L331-.L773
	.byte	0,1,1,5,25,0,5,2
	.word	.L126
	.byte	3,184,17,1,5,14,9
	.half	.L1290-.L126
	.byte	3,128,121,1,5,30,9
	.half	.L773-.L1290
	.byte	1,7,9
	.half	.L331-.L773
	.byte	0,1,1
.L1287:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_12')
	.sect	'.debug_ranges'
.L330:
	.word	-1,.L126,0,.L331-.L126,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_13')
	.sect	'.debug_info'
.L332:
	.word	240
	.half	3
	.word	.L333
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L335,.L334
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_13',0,1,223,17,6,1
	.word	.L160,.L336,.L159
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_13')
	.sect	'.debug_abbrev'
.L333:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_13')
	.sect	'.debug_line'
.L334:
	.word	.L1292-.L1291
.L1291:
	.half	3
	.word	.L1294-.L1293
.L1293:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1294:
	.byte	5,6,7,0,5,2
	.word	.L160
	.byte	3,222,17,1,5,13,3,9,1,5,31,9
	.half	.L839-.L160
	.byte	1,5,45,9
	.half	.L1295-.L839
	.byte	3,124,1,5,30,1,5,44,9
	.half	.L1296-.L1295
	.byte	1,5,31,9
	.half	.L840-.L1296
	.byte	3,4,1,9
	.half	.L336-.L840
	.byte	0,1,1,5,6,0,5,2
	.word	.L160
	.byte	3,165,18,1,5,13,3,9,1,5,31,9
	.half	.L839-.L160
	.byte	1,5,46,9
	.half	.L1295-.L839
	.byte	3,123,1,5,31,1,5,45,9
	.half	.L1296-.L1295
	.byte	1,5,31,9
	.half	.L840-.L1296
	.byte	3,5,1,9
	.half	.L841-.L840
	.byte	3,185,127,1,7,9
	.half	.L336-.L841
	.byte	0,1,1
.L1292:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_13')
	.sect	'.debug_ranges'
.L335:
	.word	-1,.L160,0,.L336-.L160,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_14')
	.sect	'.debug_info'
.L337:
	.word	240
	.half	3
	.word	.L338
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L340,.L339
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_14',0,1,225,2,6,1
	.word	.L104,.L341,.L103
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_14')
	.sect	'.debug_abbrev'
.L338:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_14')
	.sect	'.debug_line'
.L339:
	.word	.L1298-.L1297
.L1297:
	.half	3
	.word	.L1300-.L1299
.L1299:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1300:
	.byte	5,9,7,0,5,2
	.word	.L104
	.byte	3,193,3,1,9
	.half	.L341-.L104
	.byte	0,1,1,5,34,0,5,2
	.word	.L104
	.byte	3,253,12,1,5,9,9
	.half	.L1301-.L104
	.byte	3,196,118,1,7,9
	.half	.L341-.L1301
	.byte	0,1,1,5,26,0,5,2
	.word	.L104
	.byte	3,128,18,1,5,9,9
	.half	.L1301-.L104
	.byte	3,193,113,1,7,9
	.half	.L341-.L1301
	.byte	0,1,1,5,26,0,5,2
	.word	.L104
	.byte	3,226,19,1,5,9,9
	.half	.L1301-.L104
	.byte	3,223,111,1,7,9
	.half	.L341-.L1301
	.byte	0,1,1
.L1298:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_14')
	.sect	'.debug_ranges'
.L340:
	.word	-1,.L104,0,.L341-.L104,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_15')
	.sect	'.debug_info'
.L342:
	.word	240
	.half	3
	.word	.L343
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L345,.L344
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_15',0,1,162,11,13,1
	.word	.L132,.L346,.L131
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_15')
	.sect	'.debug_abbrev'
.L343:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_15')
	.sect	'.debug_line'
.L344:
	.word	.L1303-.L1302
.L1302:
	.half	3
	.word	.L1305-.L1304
.L1304:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1305:
	.byte	5,3,7,0,5,2
	.word	.L132
	.byte	3,164,11,1,9
	.half	.L1306-.L132
	.byte	3,4,1,9
	.half	.L346-.L1306
	.byte	0,1,1,5,3,0,5,2
	.word	.L132
	.byte	3,168,11,1,9
	.half	.L1306-.L132
	.byte	3,4,1,9
	.half	.L1307-.L1306
	.byte	3,124,1,7,9
	.half	.L346-.L1307
	.byte	0,1,1,5,3,0,5,2
	.word	.L132
	.byte	3,172,11,1,9
	.half	.L1306-.L132
	.byte	3,4,1,9
	.half	.L1307-.L1306
	.byte	3,120,1,7,9
	.half	.L346-.L1307
	.byte	0,1,1,5,32,0,5,2
	.word	.L132
	.byte	3,210,14,1,5,74,9
	.half	.L1306-.L132
	.byte	3,4,1,5,3,9
	.half	.L1307-.L1306
	.byte	3,210,124,1,7,9
	.half	.L346-.L1307
	.byte	0,1,1
.L1303:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_15')
	.sect	'.debug_ranges'
.L345:
	.word	-1,.L132,0,.L346-.L132,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_16')
	.sect	'.debug_info'
.L347:
	.word	240
	.half	3
	.word	.L348
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L350,.L349
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_16',0,1,133,19,6,1
	.word	.L166,.L351,.L165
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_16')
	.sect	'.debug_abbrev'
.L348:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_16')
	.sect	'.debug_line'
.L349:
	.word	.L1309-.L1308
.L1308:
	.half	3
	.word	.L1311-.L1310
.L1310:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1311:
	.byte	5,21,7,0,5,2
	.word	.L166
	.byte	3,228,19,1,5,5,9
	.half	.L1312-.L166
	.byte	1,5,46,9
	.half	.L874-.L1312
	.byte	1,9
	.half	.L351-.L874
	.byte	0,1,1,5,21,0,5,2
	.word	.L166
	.byte	3,246,19,1,5,5,9
	.half	.L1312-.L166
	.byte	3,110,1,5,46,9
	.half	.L874-.L1312
	.byte	3,18,1,3,110,1,7,9
	.half	.L351-.L874
	.byte	0,1,1
.L1309:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_16')
	.sect	'.debug_ranges'
.L350:
	.word	-1,.L166,0,.L351-.L166,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_17')
	.sect	'.debug_info'
.L352:
	.word	240
	.half	3
	.word	.L353
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L355,.L354
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_17',0,1,197,5,13,1
	.word	.L108,.L356,.L107
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_17')
	.sect	'.debug_abbrev'
.L353:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_17')
	.sect	'.debug_line'
.L354:
	.word	.L1314-.L1313
.L1313:
	.half	3
	.word	.L1316-.L1315
.L1315:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1316:
	.byte	5,16,7,0,5,2
	.word	.L108
	.byte	3,232,5,1,5,3,3,2,1,9
	.half	.L356-.L108
	.byte	0,1,1,5,16,0,5,2
	.word	.L108
	.byte	3,130,7,1,5,3,3,2,1,9
	.half	.L669-.L108
	.byte	3,230,126,1,7,9
	.half	.L356-.L669
	.byte	0,1,1
.L1314:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_17')
	.sect	'.debug_ranges'
.L355:
	.word	-1,.L108,0,.L356-.L108,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_18')
	.sect	'.debug_info'
.L357:
	.word	240
	.half	3
	.word	.L358
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L360,.L359
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_18',0,1,179,12,17,1
	.word	.L138,.L361,.L137
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_18')
	.sect	'.debug_abbrev'
.L358:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_18')
	.sect	'.debug_line'
.L359:
	.word	.L1318-.L1317
.L1317:
	.half	3
	.word	.L1320-.L1319
.L1319:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1320:
	.byte	5,6,7,0,5,2
	.word	.L138
	.byte	3,172,13,1,9
	.half	.L801-.L138
	.byte	3,4,1,9
	.half	.L361-.L801
	.byte	0,1,1,5,6,0,5,2
	.word	.L138
	.byte	3,172,13,1,5,60,9
	.half	.L801-.L138
	.byte	3,162,6,1,5,6,9
	.half	.L1321-.L801
	.byte	3,226,121,1,7,9
	.half	.L361-.L1321
	.byte	0,1,1
.L1318:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_18')
	.sect	'.debug_ranges'
.L360:
	.word	-1,.L138,0,.L361-.L138,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_19')
	.sect	'.debug_info'
.L362:
	.word	240
	.half	3
	.word	.L363
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L365,.L364
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_19',0,1,159,16,15,1
	.word	.L154,.L366,.L153
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_19')
	.sect	'.debug_abbrev'
.L363:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_19')
	.sect	'.debug_line'
.L364:
	.word	.L1323-.L1322
.L1322:
	.half	3
	.word	.L1325-.L1324
.L1324:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1325:
	.byte	5,24,7,0,5,2
	.word	.L154
	.byte	3,193,16,1,5,53,9
	.half	.L826-.L154
	.byte	1,9
	.half	.L366-.L826
	.byte	0,1,1,5,24,0,5,2
	.word	.L154
	.byte	3,193,16,1,5,55,9
	.half	.L826-.L154
	.byte	3,179,3,1,5,53,9
	.half	.L1326-.L826
	.byte	3,205,124,1,7,9
	.half	.L366-.L1326
	.byte	0,1,1
.L1323:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_19')
	.sect	'.debug_ranges'
.L365:
	.word	-1,.L154,0,.L366-.L154,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_20')
	.sect	'.debug_info'
.L367:
	.word	240
	.half	3
	.word	.L368
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L370,.L369
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_20',0,1,159,16,15,1
	.word	.L152,.L371,.L151
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_20')
	.sect	'.debug_abbrev'
.L368:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_20')
	.sect	'.debug_line'
.L369:
	.word	.L1328-.L1327
.L1327:
	.half	3
	.word	.L1330-.L1329
.L1329:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1330:
	.byte	5,14,7,0,5,2
	.word	.L152
	.byte	3,200,16,1,9
	.half	.L371-.L152
	.byte	0,1,1,5,7,0,5,2
	.word	.L152
	.byte	3,239,17,1,5,14,9
	.half	.L1331-.L152
	.byte	3,217,126,1,7,9
	.half	.L371-.L1331
	.byte	0,1,1,5,22,0,5,2
	.word	.L152
	.byte	3,175,18,1,5,14,9
	.half	.L1331-.L152
	.byte	3,153,126,1,7,9
	.half	.L371-.L1331
	.byte	0,1,1
.L1328:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_20')
	.sect	'.debug_ranges'
.L370:
	.word	-1,.L152,0,.L371-.L152,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_21')
	.sect	'.debug_info'
.L372:
	.word	240
	.half	3
	.word	.L373
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L375,.L374
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_21',0,1,178,10,13,1
	.word	.L128,.L376,.L127
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_21')
	.sect	'.debug_abbrev'
.L373:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_21')
	.sect	'.debug_line'
.L374:
	.word	.L1333-.L1332
.L1332:
	.half	3
	.word	.L1335-.L1334
.L1334:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1335:
	.byte	5,14,7,0,5,2
	.word	.L128
	.byte	3,184,10,1,5,30,9
	.half	.L774-.L128
	.byte	1,9
	.half	.L376-.L774
	.byte	0,1,1,5,14,0,5,2
	.word	.L128
	.byte	3,184,10,1,5,29,9
	.half	.L774-.L128
	.byte	3,169,3,1,5,30,9
	.half	.L1336-.L774
	.byte	3,215,124,1,7,9
	.half	.L376-.L1336
	.byte	0,1,1,5,14,0,5,2
	.word	.L128
	.byte	3,184,10,1,5,25,9
	.half	.L774-.L128
	.byte	3,128,7,1,5,30,9
	.half	.L1336-.L774
	.byte	3,128,121,1,7,9
	.half	.L376-.L1336
	.byte	0,1,1,5,14,0,5,2
	.word	.L128
	.byte	3,184,10,1,5,30,9
	.half	.L774-.L128
	.byte	3,165,5,1,9
	.half	.L1336-.L774
	.byte	3,219,122,1,7,9
	.half	.L376-.L1336
	.byte	0,1,1,5,14,0,5,2
	.word	.L128
	.byte	3,184,10,1,5,21,9
	.half	.L774-.L128
	.byte	3,172,9,1,5,30,9
	.half	.L1336-.L774
	.byte	3,212,118,1,7,9
	.half	.L376-.L1336
	.byte	0,1,1,5,14,0,5,2
	.word	.L128
	.byte	3,184,10,1,5,21,9
	.half	.L774-.L128
	.byte	3,190,9,1,5,30,9
	.half	.L1336-.L774
	.byte	3,194,118,1,7,9
	.half	.L376-.L1336
	.byte	0,1,1
.L1333:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_21')
	.sect	'.debug_ranges'
.L375:
	.word	-1,.L128,0,.L376-.L128,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_22')
	.sect	'.debug_info'
.L377:
	.word	268
	.half	3
	.word	.L378
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L380,.L379
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_22',0,1,197,5,13,1
	.word	.L112,.L381,.L111
	.byte	4
	.word	.L112,.L381
	.byte	5
	.byte	'val',0,1,222,5,3
	.word	.L443,.L636
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_22')
	.sect	'.debug_abbrev'
.L378:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_22')
	.sect	'.debug_line'
.L379:
	.word	.L1338-.L1337
.L1337:
	.half	3
	.word	.L1340-.L1339
.L1339:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1340:
	.byte	5,3,7,0,5,2
	.word	.L112
	.byte	3,221,5,1,9
	.half	.L381-.L112
	.byte	0,1,1,5,3,0,5,2
	.word	.L112
	.byte	3,247,6,1,9
	.half	.L663-.L112
	.byte	3,230,126,1,7,9
	.half	.L381-.L663
	.byte	0,1,1,5,3,0,5,2
	.word	.L112
	.byte	3,187,6,1,9
	.half	.L663-.L112
	.byte	3,162,127,1,7,9
	.half	.L381-.L663
	.byte	0,1,1,5,3,0,5,2
	.word	.L112
	.byte	3,213,7,1,9
	.half	.L663-.L112
	.byte	3,136,126,1,7,9
	.half	.L381-.L663
	.byte	0,1,1
.L1338:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_22')
	.sect	'.debug_ranges'
.L380:
	.word	-1,.L112,0,.L381-.L112,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_23')
	.sect	'.debug_info'
.L382:
	.word	240
	.half	3
	.word	.L383
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L385,.L384
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_23',0,1,148,9,17,1
	.word	.L122,.L386,.L121
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_23')
	.sect	'.debug_abbrev'
.L383:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_23')
	.sect	'.debug_line'
.L384:
	.word	.L1342-.L1341
.L1341:
	.half	3
	.word	.L1344-.L1343
.L1343:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1344:
	.byte	5,34,7,0,5,2
	.word	.L122
	.byte	3,221,9,1,9
	.half	.L386-.L122
	.byte	0,1,1,5,24,0,5,2
	.word	.L122
	.byte	3,218,15,1,5,34,9
	.half	.L1345-.L122
	.byte	3,131,122,1,7,9
	.half	.L386-.L1345
	.byte	0,1,1,5,24,0,5,2
	.word	.L122
	.byte	3,193,16,1,5,34,9
	.half	.L1345-.L122
	.byte	3,156,121,1,7,9
	.half	.L386-.L1345
	.byte	0,1,1,5,26,0,5,2
	.word	.L122
	.byte	3,244,19,1,5,34,9
	.half	.L1345-.L122
	.byte	3,233,117,1,7,9
	.half	.L386-.L1345
	.byte	0,1,1
.L1342:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_23')
	.sect	'.debug_ranges'
.L385:
	.word	-1,.L122,0,.L386-.L122,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_24')
	.sect	'.debug_info'
.L387:
	.word	240
	.half	3
	.word	.L388
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L390,.L389
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_24',0,1,179,12,17,1
	.word	.L140,.L391,.L139
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_24')
	.sect	'.debug_abbrev'
.L388:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_24')
	.sect	'.debug_line'
.L389:
	.word	.L1347-.L1346
.L1346:
	.half	3
	.word	.L1349-.L1348
.L1348:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1349:
	.byte	5,6,7,0,5,2
	.word	.L140
	.byte	3,172,13,1,9
	.half	.L391-.L140
	.byte	0,1,1,5,72,0,5,2
	.word	.L140
	.byte	3,199,19,1,5,39,9
	.half	.L800-.L140
	.byte	3,1,1,5,31,3,127,1,5,6,9
	.half	.L799-.L800
	.byte	3,229,121,1,7,9
	.half	.L391-.L799
	.byte	0,1,1,5,73,0,5,2
	.word	.L140
	.byte	3,184,18,1,5,39,9
	.half	.L800-.L140
	.byte	3,1,1,5,32,3,127,1,5,6,9
	.half	.L799-.L800
	.byte	3,244,122,1,7,9
	.half	.L391-.L799
	.byte	0,1,1,5,73,0,5,2
	.word	.L140
	.byte	3,207,18,1,5,39,9
	.half	.L800-.L140
	.byte	3,1,1,5,32,3,127,1,5,6,9
	.half	.L799-.L800
	.byte	3,221,122,1,7,9
	.half	.L391-.L799
	.byte	0,1,1
.L1347:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_24')
	.sect	'.debug_ranges'
.L390:
	.word	-1,.L140,0,.L391-.L140,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_25')
	.sect	'.debug_info'
.L392:
	.word	240
	.half	3
	.word	.L393
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1
	.word	.L395,.L394
	.byte	2
	.word	.L183
	.byte	3
	.byte	'.cocofun_25',0,1,225,2,6,1
	.word	.L102,.L396,.L101
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_25')
	.sect	'.debug_abbrev'
.L393:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_25')
	.sect	'.debug_line'
.L394:
	.word	.L1351-.L1350
.L1350:
	.half	3
	.word	.L1353-.L1352
.L1352:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0,0,0,0,0
.L1353:
	.byte	5,9,7,0,5,2
	.word	.L102
	.byte	3,183,3,1,9
	.half	.L396-.L102
	.byte	0,1,1,5,5,0,5,2
	.word	.L102
	.byte	3,232,9,1,5,9,9
	.half	.L1354-.L102
	.byte	3,207,121,1,7,9
	.half	.L396-.L1354
	.byte	0,1,1,5,14,0,5,2
	.word	.L102
	.byte	3,184,10,1,5,9,9
	.half	.L1354-.L102
	.byte	3,255,120,1,7,9
	.half	.L396-.L1354
	.byte	0,1,1,5,13,0,5,2
	.word	.L102
	.byte	3,225,13,1,5,9,9
	.half	.L1354-.L102
	.byte	3,214,117,1,7,9
	.half	.L396-.L1354
	.byte	0,1,1,5,9,0,5,2
	.word	.L102
	.byte	3,184,17,1,9
	.half	.L1354-.L102
	.byte	3,255,113,1,7,9
	.half	.L396-.L1354
	.byte	0,1,1,5,14,0,5,2
	.word	.L102
	.byte	3,221,15,1,5,9,9
	.half	.L1354-.L102
	.byte	3,218,115,1,7,9
	.half	.L396-.L1354
	.byte	0,1,1,5,5,0,5,2
	.word	.L102
	.byte	3,228,19,1,5,9,9
	.half	.L1354-.L102
	.byte	3,211,111,1,7,9
	.half	.L396-.L1354
	.byte	0,1,1,5,5,0,5,2
	.word	.L102
	.byte	3,246,19,1,5,9,9
	.half	.L1354-.L102
	.byte	3,193,111,1,7,9
	.half	.L396-.L1354
	.byte	0,1,1,5,4,0,5,2
	.word	.L102
	.byte	3,139,13,1,5,9,9
	.half	.L1354-.L102
	.byte	3,172,118,1,7,9
	.half	.L396-.L1354
	.byte	0,1,1
.L1351:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_25')
	.sect	'.debug_ranges'
.L395:
	.word	-1,.L102,0,.L396-.L102,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_kConfigPtr')
	.sect	'.debug_info'
.L397:
	.word	233
	.half	3
	.word	.L398
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1,2
	.word	.L183
	.byte	3
	.byte	'Uart_kConfigPtr',0,1,239,1,31
	.word	.L406
	.byte	5,3
	.word	Uart_kConfigPtr
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_kConfigPtr')
	.sect	'.debug_abbrev'
.L398:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_BusChannelMap')
	.sect	'.debug_info'
.L399:
	.word	236
	.half	3
	.word	.L400
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1,2
	.word	.L183
	.byte	3
	.byte	'Uart_BusChannelMap',0,1,132,2,27
	.word	.L637
	.byte	5,3
	.word	Uart_BusChannelMap
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_BusChannelMap')
	.sect	'.debug_abbrev'
.L400:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_ChannelInfo')
	.sect	'.debug_info'
.L401:
	.word	234
	.half	3
	.word	.L402
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1,2
	.word	.L183
	.byte	3
	.byte	'Uart_ChannelInfo',0,1,157,2,29
	.word	.L638
	.byte	5,3
	.word	Uart_ChannelInfo
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_ChannelInfo')
	.sect	'.debug_abbrev'
.L402:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_ChLock')
	.sect	'.debug_info'
.L403:
	.word	229
	.half	3
	.word	.L404
	.byte	4,1
	.byte	'..\\Aurix_MC-ISAR\\uart_infineon_tricore\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'W:\\AURIX\\Robot\\TC277_RobotCtrl_ADCQueue_zhaojing\\Tasking\\TC277_RobotCtrl_ADCQueue\\Debug\\',0,12
	.byte	1,2
	.word	.L183
	.byte	3
	.byte	'Uart_ChLock',0,1,171,2,15
	.word	.L639
	.byte	5,3
	.word	Uart_ChLock
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_ChLock')
	.sect	'.debug_abbrev'
.L404:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_10')
	.sect	'.debug_loc'
.L113:
	.word	-1,.L114,0,.L321-.L114
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_11')
	.sect	'.debug_loc'
.L109:
	.word	-1,.L110,0,.L326-.L110
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_12')
	.sect	'.debug_loc'
.L125:
	.word	-1,.L126,0,.L331-.L126
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_13')
	.sect	'.debug_loc'
.L159:
	.word	-1,.L160,0,.L336-.L160
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_14')
	.sect	'.debug_loc'
.L103:
	.word	-1,.L104,0,.L341-.L104
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_15')
	.sect	'.debug_loc'
.L131:
	.word	-1,.L132,0,.L346-.L132
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_16')
	.sect	'.debug_loc'
.L165:
	.word	-1,.L166,0,.L351-.L166
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_17')
	.sect	'.debug_loc'
.L107:
	.word	-1,.L108,0,.L356-.L108
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_18')
	.sect	'.debug_loc'
.L137:
	.word	-1,.L138,0,.L361-.L138
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_19')
	.sect	'.debug_loc'
.L153:
	.word	-1,.L154,0,.L366-.L154
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_20')
	.sect	'.debug_loc'
.L151:
	.word	-1,.L152,0,.L371-.L152
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_21')
	.sect	'.debug_loc'
.L127:
	.word	-1,.L128,0,.L376-.L128
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_22')
	.sect	'.debug_loc'
.L111:
	.word	-1,.L112,0,.L381-.L112
	.half	2
	.byte	138,0
	.word	0,0
.L636:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_23')
	.sect	'.debug_loc'
.L121:
	.word	-1,.L122,0,.L386-.L122
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_24')
	.sect	'.debug_loc'
.L139:
	.word	-1,.L140,0,.L391-.L140
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_25')
	.sect	'.debug_loc'
.L101:
	.word	-1,.L102,0,.L396-.L102
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_7')
	.sect	'.debug_loc'
.L115:
	.word	-1,.L116,0,.L306-.L116
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_8')
	.sect	'.debug_loc'
.L177:
	.word	-1,.L178,0,.L311-.L178
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_9')
	.sect	'.debug_loc'
.L169:
	.word	-1,.L170,0,.L316-.L170
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_AbortRead')
	.sect	'.debug_loc'
.L483:
	.word	-1,.L148,.L761-.L148,.L386-.L148
	.half	1
	.byte	89
	.word	.L761-.L148,.L386-.L148
	.half	1
	.byte	84
	.word	0,.L815-.L148
	.half	1
	.byte	84
	.word	.L102-.L148,.L396-.L148
	.half	1
	.byte	89
	.word	.L774-.L148,.L376-.L148
	.half	1
	.byte	89
	.word	0,.L816-.L148
	.half	1
	.byte	89
	.word	0,0
.L485:
	.word	-1,.L148,.L824-.L148,.L482-.L148
	.half	1
	.byte	108
	.word	.L825-.L148,.L823-.L148
	.half	1
	.byte	100
	.word	0,0
.L484:
	.word	-1,.L148,.L818-.L148,.L819-.L148
	.half	1
	.byte	100
	.word	0,0
.L487:
	.word	-1,.L148,.L817-.L148,.L482-.L148
	.half	1
	.byte	90
	.word	.L822-.L148,.L823-.L148
	.half	1
	.byte	84
	.word	0,0
.L486:
	.word	-1,.L148,.L816-.L148,.L482-.L148
	.half	1
	.byte	88
	.word	0,0
.L147:
	.word	-1,.L148,0,.L482-.L148
	.half	2
	.byte	138,0
	.word	0,0
.L490:
	.word	-1,.L148,.L489-.L148,.L820-.L148
	.half	1
	.byte	95
	.word	0,0
.L492:
	.word	-1,.L148,.L820-.L148,.L821-.L148
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_AbortWrite')
	.sect	'.debug_loc'
.L494:
	.word	-1,.L150,.L122-.L150,.L386-.L150
	.half	1
	.byte	88
	.word	.L122-.L150,.L386-.L150
	.half	1
	.byte	84
	.word	.L826-.L150,.L366-.L150
	.half	1
	.byte	88
	.word	.L826-.L150,.L366-.L150
	.half	1
	.byte	84
	.word	0,.L827-.L150
	.half	1
	.byte	84
	.word	.L828-.L150,.L371-.L150
	.half	1
	.byte	88
	.word	.L829-.L150,.L830-.L150
	.half	1
	.byte	88
	.word	0,0
.L497:
	.word	-1,.L150,.L828-.L150,.L371-.L150
	.half	1
	.byte	109
	.word	.L831-.L150,.L493-.L150
	.half	1
	.byte	109
	.word	.L836-.L150,.L837-.L150
	.half	1
	.byte	100
	.word	0,0
.L496:
	.word	-1,.L150,.L501-.L150,.L832-.L150
	.half	1
	.byte	100
	.word	0,0
.L500:
	.word	-1,.L150,.L830-.L150,.L493-.L150
	.half	1
	.byte	88
	.word	.L836-.L150,.L837-.L150
	.half	1
	.byte	84
	.word	0,0
.L498:
	.word	-1,.L150,.L507-.L150,.L493-.L150
	.half	1
	.byte	89
	.word	0,0
.L149:
	.word	-1,.L150,0,.L493-.L150
	.half	2
	.byte	138,0
	.word	0,0
.L499:
	.word	-1,.L150,.L834-.L150,.L832-.L150
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L503:
	.word	-1,.L150,.L502-.L150,.L833-.L150
	.half	1
	.byte	95
	.word	0,0
.L509:
	.word	-1,.L150,.L507-.L150,.L835-.L150
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_GetStatus')
	.sect	'.debug_loc'
.L512:
	.word	-1,.L156,.L126-.L156,.L773-.L156
	.half	1
	.byte	84
	.word	.L102-.L156,.L396-.L156
	.half	1
	.byte	84
	.word	.L774-.L156,.L376-.L156
	.half	1
	.byte	84
	.word	.L838-.L156,.L511-.L156
	.half	1
	.byte	84
	.word	0,0
.L513:
	.word	0,0
.L155:
	.word	-1,.L156,0,.L511-.L156
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_Init')
	.sect	'.debug_loc'
.L413:
	.word	-1,.L100,.L642-.L100,.L641-.L100
	.half	1
	.byte	92
	.word	.L102-.L100,.L396-.L100
	.half	1
	.byte	92
	.word	.L104-.L100,.L341-.L100
	.half	1
	.byte	92
	.word	.L417-.L100,.L644-.L100
	.half	1
	.byte	92
	.word	.L655-.L100,.L405-.L100
	.half	1
	.byte	92
	.word	0,0
.L410:
	.word	-1,.L100,.L650-.L100,.L6-.L100
	.half	1
	.byte	109
	.word	.L654-.L100,.L653-.L100
	.half	1
	.byte	100
	.word	0,0
.L415:
	.word	-1,.L100,.L640-.L100,.L641-.L100
	.half	1
	.byte	91
	.word	.L102-.L100,.L396-.L100
	.half	1
	.byte	91
	.word	.L104-.L100,.L341-.L100
	.half	1
	.byte	91
	.word	.L417-.L100,.L645-.L100
	.half	1
	.byte	91
	.word	.L5-.L100,.L405-.L100
	.half	1
	.byte	91
	.word	0,0
.L407:
	.word	-1,.L100,0,.L641-.L100
	.half	1
	.byte	100
	.word	.L642-.L100,.L641-.L100
	.half	2
	.byte	145,116
	.word	.L102-.L100,.L396-.L100
	.half	1
	.byte	100
	.word	.L102-.L100,.L396-.L100
	.half	2
	.byte	145,116
	.word	.L104-.L100,.L341-.L100
	.half	1
	.byte	100
	.word	.L104-.L100,.L341-.L100
	.half	2
	.byte	145,116
	.word	.L417-.L100,.L3-.L100
	.half	1
	.byte	100
	.word	.L417-.L100,.L405-.L100
	.half	2
	.byte	145,116
	.word	.L648-.L100,.L649-.L100
	.half	1
	.byte	98
	.word	.L656-.L100,.L7-.L100
	.half	1
	.byte	111
	.word	0,0
.L420:
	.word	0,0
.L414:
	.word	-1,.L100,.L643-.L100,.L641-.L100
	.half	1
	.byte	95
	.word	.L102-.L100,.L396-.L100
	.half	1
	.byte	95
	.word	.L104-.L100,.L341-.L100
	.half	1
	.byte	95
	.word	.L417-.L100,.L646-.L100
	.half	1
	.byte	95
	.word	.L647-.L100,.L6-.L100
	.half	1
	.byte	108
	.word	0,0
.L429:
	.word	-1,.L100,.L426-.L100,.L653-.L100
	.half	5
	.byte	144,32,157,32,0
	.word	.L4-.L100,.L5-.L100
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L412:
	.word	-1,.L100,.L651-.L100,.L652-.L100
	.half	1
	.byte	95
	.word	.L425-.L100,.L6-.L100
	.half	2
	.byte	145,120
	.word	.L426-.L100,.L6-.L100
	.half	1
	.byte	95
	.word	.L654-.L100,.L653-.L100
	.half	1
	.byte	84
	.word	0,0
.L99:
	.word	-1,.L100,0,.L640-.L100
	.half	2
	.byte	138,0
	.word	.L640-.L100,.L405-.L100
	.half	2
	.byte	138,16
	.word	.L405-.L100,.L405-.L100
	.half	2
	.byte	138,0
	.word	0,0
.L422:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_IsrError')
	.sect	'.debug_loc'
.L532:
	.word	-1,.L164,.L868-.L164,.L866-.L164
	.half	1
	.byte	88
	.word	.L140-.L164,.L391-.L164
	.half	1
	.byte	88
	.word	.L801-.L164,.L361-.L164
	.half	1
	.byte	88
	.word	.L104-.L164,.L341-.L164
	.half	1
	.byte	88
	.word	.L871-.L164,.L873-.L164
	.half	1
	.byte	88
	.word	.L102-.L164,.L396-.L164
	.half	1
	.byte	88
	.word	.L774-.L164,.L376-.L164
	.half	1
	.byte	88
	.word	.L166-.L164,.L351-.L164
	.half	1
	.byte	88
	.word	.L122-.L164,.L386-.L164
	.half	1
	.byte	88
	.word	.L826-.L164,.L366-.L164
	.half	1
	.byte	88
	.word	.L875-.L164,.L525-.L164
	.half	1
	.byte	88
	.word	0,0
.L529:
	.word	-1,.L164,.L870-.L164,.L866-.L164
	.half	1
	.byte	108
	.word	.L140-.L164,.L391-.L164
	.half	1
	.byte	108
	.word	.L801-.L164,.L361-.L164
	.half	1
	.byte	108
	.word	.L104-.L164,.L341-.L164
	.half	1
	.byte	108
	.word	.L871-.L164,.L873-.L164
	.half	1
	.byte	108
	.word	.L102-.L164,.L396-.L164
	.half	1
	.byte	108
	.word	.L774-.L164,.L376-.L164
	.half	1
	.byte	108
	.word	.L166-.L164,.L351-.L164
	.half	1
	.byte	108
	.word	.L122-.L164,.L386-.L164
	.half	1
	.byte	108
	.word	.L826-.L164,.L366-.L164
	.half	1
	.byte	108
	.word	.L875-.L164,.L525-.L164
	.half	1
	.byte	108
	.word	0,0
.L531:
	.word	-1,.L164,.L869-.L164,.L866-.L164
	.half	1
	.byte	89
	.word	.L140-.L164,.L391-.L164
	.half	1
	.byte	89
	.word	.L801-.L164,.L361-.L164
	.half	1
	.byte	89
	.word	.L872-.L164,.L78-.L164
	.half	1
	.byte	85
	.word	.L104-.L164,.L341-.L164
	.half	1
	.byte	89
	.word	.L871-.L164,.L873-.L164
	.half	1
	.byte	89
	.word	.L102-.L164,.L396-.L164
	.half	1
	.byte	89
	.word	.L774-.L164,.L376-.L164
	.half	1
	.byte	89
	.word	.L166-.L164,.L351-.L164
	.half	1
	.byte	89
	.word	.L122-.L164,.L386-.L164
	.half	1
	.byte	89
	.word	.L826-.L164,.L366-.L164
	.half	1
	.byte	89
	.word	.L875-.L164,.L525-.L164
	.half	1
	.byte	89
	.word	.L876-.L164,.L94-.L164
	.half	1
	.byte	84
	.word	0,0
.L528:
	.word	-1,.L164,.L867-.L164,.L866-.L164
	.half	1
	.byte	111
	.word	.L140-.L164,.L391-.L164
	.half	1
	.byte	111
	.word	.L801-.L164,.L361-.L164
	.half	1
	.byte	111
	.word	.L104-.L164,.L341-.L164
	.half	1
	.byte	111
	.word	.L871-.L164,.L873-.L164
	.half	1
	.byte	111
	.word	.L166-.L164,.L874-.L164
	.half	1
	.byte	111
	.word	.L102-.L164,.L766-.L164
	.half	1
	.byte	111
	.word	0,0
.L526:
	.word	-1,.L164,0,.L866-.L164
	.half	1
	.byte	84
	.word	.L140-.L164,.L391-.L164
	.half	1
	.byte	84
	.word	.L801-.L164,.L361-.L164
	.half	1
	.byte	84
	.word	.L871-.L164,.L78-.L164
	.half	1
	.byte	84
	.word	0,0
.L163:
	.word	-1,.L164,0,.L525-.L164
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_IsrReceive')
	.sect	'.debug_loc'
.L519:
	.word	-1,.L158,.L841-.L158,.L336-.L158
	.half	1
	.byte	89
	.word	.L843-.L158,.L845-.L158
	.half	1
	.byte	84
	.word	.L828-.L158,.L371-.L158
	.half	1
	.byte	89
	.word	.L104-.L158,.L341-.L158
	.half	1
	.byte	89
	.word	.L842-.L158,.L514-.L158
	.half	1
	.byte	89
	.word	0,0
.L517:
	.word	-1,.L158,.L828-.L158,.L371-.L158
	.half	1
	.byte	108
	.word	.L104-.L158,.L341-.L158
	.half	1
	.byte	108
	.word	.L850-.L158,.L514-.L158
	.half	1
	.byte	108
	.word	0,0
.L518:
	.word	-1,.L158,.L840-.L158,.L336-.L158
	.half	1
	.byte	111
	.word	.L844-.L158,.L845-.L158
	.half	1
	.byte	100
	.word	.L828-.L158,.L371-.L158
	.half	1
	.byte	111
	.word	.L846-.L158,.L847-.L158
	.half	1
	.byte	100
	.word	.L104-.L158,.L341-.L158
	.half	1
	.byte	111
	.word	.L842-.L158,.L851-.L158
	.half	1
	.byte	111
	.word	0,0
.L515:
	.word	-1,.L158,.L160-.L158,.L336-.L158
	.half	1
	.byte	84
	.word	.L839-.L158,.L336-.L158
	.half	1
	.byte	88
	.word	.L842-.L158,.L843-.L158
	.half	1
	.byte	84
	.word	.L828-.L158,.L371-.L158
	.half	1
	.byte	88
	.word	.L848-.L158,.L849-.L158
	.half	1
	.byte	84
	.word	.L104-.L158,.L341-.L158
	.half	1
	.byte	88
	.word	.L842-.L158,.L514-.L158
	.half	1
	.byte	88
	.word	0,0
.L157:
	.word	-1,.L158,0,.L514-.L158
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_IsrTransmit')
	.sect	'.debug_loc'
.L524:
	.word	-1,.L162,.L841-.L162,.L336-.L162
	.half	1
	.byte	89
	.word	.L828-.L162,.L371-.L162
	.half	1
	.byte	89
	.word	.L140-.L162,.L391-.L162
	.half	1
	.byte	89
	.word	.L854-.L162,.L520-.L162
	.half	1
	.byte	89
	.word	0,0
.L522:
	.word	-1,.L162,.L840-.L162,.L336-.L162
	.half	1
	.byte	111
	.word	.L828-.L162,.L371-.L162
	.half	1
	.byte	111
	.word	.L140-.L162,.L391-.L162
	.half	1
	.byte	111
	.word	.L854-.L162,.L855-.L162
	.half	1
	.byte	111
	.word	.L856-.L162,.L857-.L162
	.half	1
	.byte	100
	.word	.L74-.L162,.L520-.L162
	.half	1
	.byte	111
	.word	.L860-.L162,.L861-.L162
	.half	1
	.byte	100
	.word	.L862-.L162,.L863-.L162
	.half	1
	.byte	100
	.word	.L864-.L162,.L865-.L162
	.half	1
	.byte	100
	.word	0,0
.L521:
	.word	-1,.L162,.L160-.L162,.L336-.L162
	.half	1
	.byte	84
	.word	.L160-.L162,.L336-.L162
	.half	1
	.byte	88
	.word	.L828-.L162,.L371-.L162
	.half	1
	.byte	88
	.word	.L828-.L162,.L371-.L162
	.half	1
	.byte	84
	.word	.L140-.L162,.L391-.L162
	.half	1
	.byte	88
	.word	.L140-.L162,.L391-.L162
	.half	1
	.byte	84
	.word	.L854-.L162,.L856-.L162
	.half	1
	.byte	84
	.word	.L858-.L162,.L859-.L162
	.half	1
	.byte	84
	.word	.L854-.L162,.L520-.L162
	.half	1
	.byte	88
	.word	.L74-.L162,.L860-.L162
	.half	1
	.byte	84
	.word	0,0
.L523:
	.word	-1,.L162,.L852-.L162,.L853-.L162
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L161:
	.word	-1,.L162,0,.L520-.L162
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_Read')
	.sect	'.debug_loc'
.L444:
	.word	-1,.L120,.L766-.L120,.L396-.L120
	.half	1
	.byte	82
	.word	.L764-.L120,.L767-.L120
	.half	1
	.byte	82
	.word	0,0
.L432:
	.word	-1,.L120,.L761-.L120,.L386-.L120
	.half	1
	.byte	95
	.word	.L761-.L120,.L386-.L120
	.half	1
	.byte	84
	.word	.L762-.L120,.L763-.L120
	.half	1
	.byte	95
	.word	0,.L764-.L120
	.half	1
	.byte	84
	.word	0,0
.L439:
	.word	-1,.L120,.L445-.L120,.L33-.L120
	.half	1
	.byte	111
	.word	.L452-.L120,.L767-.L120
	.half	1
	.byte	100
	.word	0,0
.L441:
	.word	-1,.L120,.L769-.L120,.L33-.L120
	.half	1
	.byte	88
	.word	0,0
.L434:
	.word	-1,.L120,.L761-.L120,.L386-.L120
	.half	1
	.byte	108
	.word	.L761-.L120,.L386-.L120
	.half	1
	.byte	100
	.word	0,.L765-.L120
	.half	1
	.byte	100
	.word	.L766-.L120,.L396-.L120
	.half	1
	.byte	108
	.word	.L762-.L120,.L431-.L120
	.half	1
	.byte	108
	.word	0,0
.L440:
	.word	-1,.L120,.L761-.L120,.L386-.L120
	.half	1
	.byte	89
	.word	.L766-.L120,.L396-.L120
	.half	1
	.byte	89
	.word	.L768-.L120,.L431-.L120
	.half	1
	.byte	89
	.word	0,0
.L436:
	.word	-1,.L120,.L761-.L120,.L386-.L120
	.half	1
	.byte	88
	.word	.L761-.L120,.L386-.L120
	.half	1
	.byte	85
	.word	0,.L764-.L120
	.half	1
	.byte	85
	.word	.L766-.L120,.L396-.L120
	.half	1
	.byte	88
	.word	.L768-.L120,.L769-.L120
	.half	1
	.byte	88
	.word	0,0
.L442:
	.word	-1,.L120,.L448-.L120,.L34-.L120
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L119:
	.word	-1,.L120,0,.L431-.L120
	.half	2
	.byte	138,0
	.word	0,0
.L447:
	.word	-1,.L120,.L446-.L120,.L770-.L120
	.half	1
	.byte	95
	.word	0,0
.L449:
	.word	0,0
.L451:
	.word	-1,.L120,.L35-.L120,.L771-.L120
	.half	1
	.byte	95
	.word	0,0
.L454:
	.word	-1,.L120,.L771-.L120,.L772-.L120
	.half	1
	.byte	95
	.word	0,0
.L456:
	.word	-1,.L120,.L772-.L120,.L33-.L120
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_Write')
	.sect	'.debug_loc'
.L465:
	.word	-1,.L136,.L766-.L136,.L396-.L136
	.half	1
	.byte	82
	.word	.L788-.L136,.L790-.L136
	.half	1
	.byte	82
	.word	0,0
.L458:
	.word	-1,.L136,.L787-.L136,.L341-.L136
	.half	1
	.byte	88
	.word	.L787-.L136,.L341-.L136
	.half	1
	.byte	84
	.word	0,.L788-.L136
	.half	1
	.byte	84
	.word	.L766-.L136,.L396-.L136
	.half	1
	.byte	88
	.word	.L794-.L136,.L790-.L136
	.half	1
	.byte	84
	.word	.L140-.L136,.L799-.L136
	.half	1
	.byte	88
	.word	.L801-.L136,.L361-.L136
	.half	1
	.byte	88
	.word	.L792-.L136,.L457-.L136
	.half	1
	.byte	88
	.word	0,0
.L461:
	.word	-1,.L136,.L766-.L136,.L396-.L136
	.half	1
	.byte	98
	.word	.L791-.L136,.L790-.L136
	.half	1
	.byte	98
	.word	0,0
.L462:
	.word	-1,.L136,.L471-.L136,.L790-.L136
	.half	1
	.byte	100
	.word	.L140-.L136,.L799-.L136
	.half	1
	.byte	111
	.word	.L801-.L136,.L361-.L136
	.half	1
	.byte	111
	.word	.L466-.L136,.L46-.L136
	.half	1
	.byte	111
	.word	.L805-.L136,.L806-.L136
	.half	1
	.byte	100
	.word	0,0
.L464:
	.word	-1,.L136,.L140-.L136,.L799-.L136
	.half	1
	.byte	91
	.word	.L801-.L136,.L361-.L136
	.half	1
	.byte	91
	.word	.L802-.L136,.L46-.L136
	.half	1
	.byte	91
	.word	0,0
.L459:
	.word	-1,.L136,.L787-.L136,.L341-.L136
	.half	1
	.byte	108
	.word	.L787-.L136,.L341-.L136
	.half	1
	.byte	100
	.word	0,.L789-.L136
	.half	1
	.byte	100
	.word	.L766-.L136,.L396-.L136
	.half	1
	.byte	108
	.word	.L792-.L136,.L793-.L136
	.half	1
	.byte	108
	.word	0,0
.L463:
	.word	-1,.L136,.L787-.L136,.L341-.L136
	.half	1
	.byte	90
	.word	.L766-.L136,.L396-.L136
	.half	1
	.byte	90
	.word	.L140-.L136,.L799-.L136
	.half	1
	.byte	90
	.word	.L801-.L136,.L361-.L136
	.half	1
	.byte	90
	.word	.L803-.L136,.L457-.L136
	.half	1
	.byte	90
	.word	0,0
.L460:
	.word	-1,.L136,.L787-.L136,.L341-.L136
	.half	1
	.byte	85
	.word	.L787-.L136,.L341-.L136
	.half	1
	.byte	89
	.word	0,.L788-.L136
	.half	1
	.byte	85
	.word	.L766-.L136,.L396-.L136
	.half	1
	.byte	89
	.word	.L140-.L136,.L799-.L136
	.half	1
	.byte	89
	.word	.L801-.L136,.L361-.L136
	.half	1
	.byte	89
	.word	.L803-.L136,.L457-.L136
	.half	1
	.byte	89
	.word	0,0
.L135:
	.word	-1,.L136,0,.L457-.L136
	.half	2
	.byte	138,0
	.word	0,0
.L468:
	.word	-1,.L136,.L467-.L136,.L795-.L136
	.half	1
	.byte	95
	.word	0,0
.L470:
	.word	-1,.L136,.L796-.L136,.L797-.L136
	.half	1
	.byte	95
	.word	0,0
.L473:
	.word	-1,.L136,.L798-.L136,.L476-.L136
	.half	1
	.byte	95
	.word	.L140-.L136,.L800-.L136
	.half	1
	.byte	95
	.word	.L47-.L136,.L48-.L136
	.half	1
	.byte	95
	.word	0,0
.L477:
	.word	-1,.L136,.L801-.L136,.L361-.L136
	.half	1
	.byte	95
	.word	0,0
.L479:
	.word	-1,.L136,.L478-.L136,.L804-.L136
	.half	1
	.byte	95
	.word	0,0
.L481:
	.word	-1,.L136,.L807-.L136,.L46-.L136
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lClearReadInterrupts')
	.sect	'.debug_loc'
.L594:
	.word	-1,.L134,0,.L592-.L134
	.half	1
	.byte	84
	.word	0,0
.L593:
	.word	-1,.L134,0,.L592-.L134
	.half	1
	.byte	100
	.word	0,0
.L133:
	.word	-1,.L134,0,.L592-.L134
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lClearWriteInterrupts')
	.sect	'.debug_loc'
.L591:
	.word	-1,.L146,0,.L589-.L146
	.half	1
	.byte	84
	.word	0,0
.L590:
	.word	-1,.L146,0,.L589-.L146
	.half	1
	.byte	100
	.word	0,0
.L145:
	.word	-1,.L146,0,.L589-.L146
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lEnableReadInterrupts')
	.sect	'.debug_loc'
.L576:
	.word	-1,.L130,.L132-.L130,.L346-.L130
	.half	1
	.byte	100
	.word	0,.L575-.L130
	.half	1
	.byte	100
	.word	0,0
.L129:
	.word	-1,.L130,0,.L575-.L130
	.half	2
	.byte	138,0
	.word	0,0
.L579:
	.word	-1,.L130,.L784-.L130,.L578-.L130
	.half	1
	.byte	95
	.word	.L132-.L130,.L346-.L130
	.half	1
	.byte	95
	.word	0,0
.L581:
	.word	-1,.L130,.L785-.L130,.L580-.L130
	.half	1
	.byte	95
	.word	.L132-.L130,.L346-.L130
	.half	1
	.byte	95
	.word	0,0
.L583:
	.word	-1,.L130,.L786-.L130,.L582-.L130
	.half	1
	.byte	95
	.word	.L132-.L130,.L346-.L130
	.half	1
	.byte	95
	.word	0,0
.L585:
	.word	-1,.L130,.L584-.L130,.L575-.L130
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lEnableWriteInterrupts')
	.sect	'.debug_loc'
.L588:
	.word	-1,.L144,.L132-.L144,.L346-.L144
	.half	1
	.byte	84
	.word	0,.L586-.L144
	.half	1
	.byte	84
	.word	0,0
.L587:
	.word	-1,.L144,.L132-.L144,.L346-.L144
	.half	1
	.byte	100
	.word	0,.L586-.L144
	.half	1
	.byte	100
	.word	0,0
.L143:
	.word	-1,.L144,0,.L586-.L144
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lHwDisableAscLinErrIntr')
	.sect	'.debug_loc'
.L632:
	.word	-1,.L168,0,.L877-.L168
	.half	1
	.byte	85
	.word	.L170-.L168,.L96-.L168
	.half	1
	.byte	85
	.word	.L880-.L168,.L629-.L168
	.half	1
	.byte	85
	.word	0,0
.L631:
	.word	-1,.L168,0,.L877-.L168
	.half	1
	.byte	84
	.word	.L170-.L168,.L96-.L168
	.half	1
	.byte	84
	.word	.L880-.L168,.L629-.L168
	.half	1
	.byte	84
	.word	0,0
.L635:
	.word	-1,.L168,.L878-.L168,.L879-.L168
	.half	1
	.byte	95
	.word	0,0
.L634:
	.word	-1,.L168,.L170-.L168,.L878-.L168
	.half	1
	.byte	95
	.word	0,0
.L167:
	.word	-1,.L168,0,.L629-.L168
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lHwDisableAscLinRxIntr')
	.sect	'.debug_loc'
.L626:
	.word	-1,.L172,0,.L881-.L172
	.half	1
	.byte	85
	.word	.L170-.L172,.L316-.L172
	.half	1
	.byte	85
	.word	.L882-.L172,.L623-.L172
	.half	1
	.byte	85
	.word	0,0
.L625:
	.word	-1,.L172,0,.L881-.L172
	.half	1
	.byte	84
	.word	.L170-.L172,.L316-.L172
	.half	1
	.byte	84
	.word	.L882-.L172,.L623-.L172
	.half	1
	.byte	84
	.word	0,0
.L628:
	.word	-1,.L172,.L878-.L172,.L879-.L172
	.half	1
	.byte	95
	.word	0,0
.L627:
	.word	-1,.L172,.L170-.L172,.L878-.L172
	.half	1
	.byte	95
	.word	0,0
.L171:
	.word	-1,.L172,0,.L623-.L172
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lHwDisableAscLinTxIntr')
	.sect	'.debug_loc'
.L620:
	.word	-1,.L174,0,.L883-.L174
	.half	1
	.byte	85
	.word	.L170-.L174,.L316-.L174
	.half	1
	.byte	85
	.word	.L884-.L174,.L617-.L174
	.half	1
	.byte	85
	.word	0,0
.L619:
	.word	-1,.L174,0,.L883-.L174
	.half	1
	.byte	84
	.word	.L170-.L174,.L316-.L174
	.half	1
	.byte	84
	.word	.L884-.L174,.L617-.L174
	.half	1
	.byte	84
	.word	0,0
.L622:
	.word	-1,.L174,.L878-.L174,.L879-.L174
	.half	1
	.byte	95
	.word	0,0
.L621:
	.word	-1,.L174,.L170-.L174,.L878-.L174
	.half	1
	.byte	95
	.word	0,0
.L173:
	.word	-1,.L174,0,.L617-.L174
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lHwEnableAscLinErrIntr')
	.sect	'.debug_loc'
.L611:
	.word	-1,.L176,0,.L614-.L176
	.half	1
	.byte	84
	.word	.L178-.L176,.L885-.L176
	.half	1
	.byte	84
	.word	.L615-.L176,.L609-.L176
	.half	1
	.byte	84
	.word	0,0
.L612:
	.word	-1,.L176,.L178-.L176,.L886-.L176
	.half	1
	.byte	95
	.word	0,0
.L175:
	.word	-1,.L176,0,.L609-.L176
	.half	2
	.byte	138,0
	.word	0,0
.L616:
	.word	-1,.L176,.L887-.L176,.L888-.L176
	.half	1
	.byte	95
	.word	0,0
.L889:
	.word	-1,.L176,.L615-.L176,.L609-.L176
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lHwEnableAscLinRxIntr')
	.sect	'.debug_loc'
.L604:
	.word	-1,.L180,0,.L606-.L180
	.half	1
	.byte	84
	.word	.L178-.L180,.L311-.L180
	.half	1
	.byte	84
	.word	.L607-.L180,.L602-.L180
	.half	1
	.byte	84
	.word	0,0
.L605:
	.word	-1,.L180,.L178-.L180,.L886-.L180
	.half	1
	.byte	95
	.word	0,0
.L179:
	.word	-1,.L180,0,.L602-.L180
	.half	2
	.byte	138,0
	.word	0,0
.L608:
	.word	-1,.L180,.L887-.L180,.L888-.L180
	.half	1
	.byte	95
	.word	0,0
.L890:
	.word	-1,.L180,.L891-.L180,.L311-.L180
	.half	1
	.byte	95
	.word	.L607-.L180,.L602-.L180
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lHwEnableAscLinTxIntr')
	.sect	'.debug_loc'
.L597:
	.word	-1,.L182,0,.L599-.L182
	.half	1
	.byte	84
	.word	.L178-.L182,.L311-.L182
	.half	1
	.byte	84
	.word	.L600-.L182,.L595-.L182
	.half	1
	.byte	84
	.word	0,0
.L598:
	.word	-1,.L182,.L178-.L182,.L886-.L182
	.half	1
	.byte	95
	.word	0,0
.L181:
	.word	-1,.L182,0,.L595-.L182
	.half	2
	.byte	138,0
	.word	0,0
.L601:
	.word	-1,.L182,.L887-.L182,.L888-.L182
	.half	1
	.byte	95
	.word	0,0
.L892:
	.word	-1,.L182,.L891-.L182,.L311-.L182
	.half	1
	.byte	95
	.word	.L600-.L182,.L595-.L182
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lHwInit')
	.sect	'.debug_loc'
.L535:
	.word	-1,.L106,.L114-.L106,.L657-.L106
	.half	1
	.byte	100
	.word	.L110-.L106,.L662-.L106
	.half	1
	.byte	100
	.word	.L112-.L106,.L663-.L106
	.half	1
	.byte	100
	.word	.L108-.L106,.L669-.L106
	.half	1
	.byte	100
	.word	.L661-.L106,.L540-.L106
	.half	1
	.byte	100
	.word	.L116-.L106,.L672-.L106
	.half	1
	.byte	100
	.word	.L112-.L106,.L381-.L106
	.half	1
	.byte	100
	.word	.L730-.L106,.L306-.L106
	.half	1
	.byte	100
	.word	.L18-.L106,.L533-.L106
	.half	1
	.byte	100
	.word	0,0
.L537:
	.word	-1,.L106,.L658-.L106,.L657-.L106
	.half	1
	.byte	111
	.word	.L110-.L106,.L662-.L106
	.half	1
	.byte	111
	.word	.L112-.L106,.L663-.L106
	.half	1
	.byte	111
	.word	.L108-.L106,.L669-.L106
	.half	1
	.byte	111
	.word	.L661-.L106,.L540-.L106
	.half	1
	.byte	111
	.word	.L116-.L106,.L672-.L106
	.half	1
	.byte	111
	.word	.L112-.L106,.L381-.L106
	.half	1
	.byte	111
	.word	.L730-.L106,.L306-.L106
	.half	1
	.byte	111
	.word	.L18-.L106,.L533-.L106
	.half	1
	.byte	111
	.word	0,0
.L534:
	.word	-1,.L106,.L114-.L106,.L657-.L106
	.half	1
	.byte	84
	.word	.L110-.L106,.L662-.L106
	.half	1
	.byte	84
	.word	.L112-.L106,.L663-.L106
	.half	1
	.byte	84
	.word	.L108-.L106,.L669-.L106
	.half	1
	.byte	84
	.word	.L661-.L106,.L540-.L106
	.half	1
	.byte	84
	.word	.L116-.L106,.L672-.L106
	.half	1
	.byte	84
	.word	.L112-.L106,.L381-.L106
	.half	1
	.byte	84
	.word	.L730-.L106,.L306-.L106
	.half	1
	.byte	84
	.word	.L18-.L106,.L533-.L106
	.half	1
	.byte	84
	.word	0,0
.L538:
	.word	-1,.L106,.L659-.L106,.L657-.L106
	.half	5
	.byte	144,32,157,32,0
	.word	.L110-.L106,.L662-.L106
	.half	5
	.byte	144,32,157,32,0
	.word	.L112-.L106,.L663-.L106
	.half	5
	.byte	144,32,157,32,0
	.word	.L661-.L106,.L666-.L106
	.half	5
	.byte	144,32,157,32,0
	.word	.L108-.L106,.L670-.L106
	.half	5
	.byte	144,32,157,32,0
	.word	.L670-.L106,.L669-.L106
	.half	1
	.byte	95
	.word	.L666-.L106,.L540-.L106
	.half	1
	.byte	95
	.word	.L116-.L106,.L673-.L106
	.half	1
	.byte	95
	.word	.L730-.L106,.L306-.L106
	.half	1
	.byte	95
	.word	.L18-.L106,.L533-.L106
	.half	1
	.byte	95
	.word	0,0
.L105:
	.word	-1,.L106,0,.L533-.L106
	.half	2
	.byte	138,0
	.word	0,0
.L660:
	.word	-1,.L106,.L661-.L106,.L9-.L106
	.half	1
	.byte	95
	.word	0,0
.L664:
	.word	-1,.L106,.L112-.L106,.L665-.L106
	.half	1
	.byte	95
	.word	0,0
.L667:
	.word	-1,.L106,.L668-.L106,.L12-.L106
	.half	1
	.byte	95
	.word	0,0
.L671:
	.word	-1,.L106,.L666-.L106,.L15-.L106
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L541:
	.word	-1,.L106,.L674-.L106,.L675-.L106
	.half	1
	.byte	95
	.word	0,0
.L676:
	.word	-1,.L106,.L677-.L106,.L678-.L106
	.half	1
	.byte	95
	.word	0,0
.L679:
	.word	-1,.L106,.L680-.L106,.L681-.L106
	.half	1
	.byte	95
	.word	0,0
.L682:
	.word	-1,.L106,.L683-.L106,.L684-.L106
	.half	1
	.byte	95
	.word	0,0
.L685:
	.word	-1,.L106,.L686-.L106,.L687-.L106
	.half	1
	.byte	95
	.word	0,0
.L688:
	.word	-1,.L106,.L689-.L106,.L690-.L106
	.half	1
	.byte	95
	.word	0,0
.L691:
	.word	-1,.L106,.L692-.L106,.L693-.L106
	.half	1
	.byte	95
	.word	0,0
.L694:
	.word	-1,.L106,.L695-.L106,.L696-.L106
	.half	1
	.byte	95
	.word	0,0
.L697:
	.word	-1,.L106,.L698-.L106,.L699-.L106
	.half	1
	.byte	95
	.word	0,0
.L700:
	.word	-1,.L106,.L701-.L106,.L702-.L106
	.half	1
	.byte	95
	.word	0,0
.L703:
	.word	-1,.L106,.L704-.L106,.L705-.L106
	.half	1
	.byte	95
	.word	0,0
.L706:
	.word	-1,.L106,.L707-.L106,.L708-.L106
	.half	1
	.byte	95
	.word	0,0
.L709:
	.word	-1,.L106,.L710-.L106,.L711-.L106
	.half	1
	.byte	95
	.word	0,0
.L712:
	.word	-1,.L106,.L713-.L106,.L714-.L106
	.half	1
	.byte	95
	.word	0,0
.L715:
	.word	-1,.L106,.L716-.L106,.L717-.L106
	.half	1
	.byte	95
	.word	0,0
.L718:
	.word	-1,.L106,.L719-.L106,.L720-.L106
	.half	1
	.byte	95
	.word	0,0
.L721:
	.word	-1,.L106,.L722-.L106,.L723-.L106
	.half	1
	.byte	95
	.word	0,0
.L724:
	.word	-1,.L106,.L725-.L106,.L726-.L106
	.half	1
	.byte	95
	.word	0,0
.L727:
	.word	-1,.L106,.L728-.L106,.L672-.L106
	.half	1
	.byte	95
	.word	.L112-.L106,.L665-.L106
	.half	1
	.byte	95
	.word	0,0
.L729:
	.word	-1,.L106,.L665-.L106,.L381-.L106
	.half	1
	.byte	95
	.word	.L730-.L106,.L306-.L106
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lHwInitRuntime')
	.sect	'.debug_loc'
.L544:
	.word	-1,.L118,.L114-.L118,.L321-.L118
	.half	1
	.byte	100
	.word	.L110-.L118,.L734-.L118
	.half	1
	.byte	100
	.word	.L112-.L118,.L381-.L118
	.half	1
	.byte	100
	.word	.L108-.L118,.L356-.L118
	.half	1
	.byte	100
	.word	.L116-.L118,.L306-.L118
	.half	1
	.byte	100
	.word	.L733-.L118,.L542-.L118
	.half	1
	.byte	100
	.word	0,0
.L545:
	.word	-1,.L118,.L658-.L118,.L321-.L118
	.half	1
	.byte	111
	.word	.L110-.L118,.L734-.L118
	.half	1
	.byte	111
	.word	.L112-.L118,.L381-.L118
	.half	1
	.byte	111
	.word	.L108-.L118,.L356-.L118
	.half	1
	.byte	111
	.word	.L116-.L118,.L306-.L118
	.half	1
	.byte	111
	.word	.L733-.L118,.L542-.L118
	.half	1
	.byte	111
	.word	0,0
.L543:
	.word	-1,.L118,.L114-.L118,.L321-.L118
	.half	1
	.byte	84
	.word	.L110-.L118,.L734-.L118
	.half	1
	.byte	84
	.word	.L112-.L118,.L381-.L118
	.half	1
	.byte	84
	.word	.L108-.L118,.L356-.L118
	.half	1
	.byte	84
	.word	.L116-.L118,.L306-.L118
	.half	1
	.byte	84
	.word	.L733-.L118,.L542-.L118
	.half	1
	.byte	84
	.word	0,0
.L546:
	.word	-1,.L118,.L659-.L118,.L321-.L118
	.half	5
	.byte	144,32,157,32,0
	.word	.L110-.L118,.L734-.L118
	.half	5
	.byte	144,32,157,32,0
	.word	.L112-.L118,.L381-.L118
	.half	5
	.byte	144,32,157,32,0
	.word	.L733-.L118,.L738-.L118
	.half	5
	.byte	144,32,157,32,0
	.word	.L108-.L118,.L108-.L118
	.half	5
	.byte	144,32,157,32,0
	.word	.L108-.L118,.L356-.L118
	.half	1
	.byte	95
	.word	.L116-.L118,.L673-.L118
	.half	1
	.byte	95
	.word	.L730-.L118,.L306-.L118
	.half	1
	.byte	95
	.word	.L738-.L118,.L542-.L118
	.half	1
	.byte	95
	.word	0,0
.L117:
	.word	-1,.L118,0,.L542-.L118
	.half	2
	.byte	138,0
	.word	0,0
.L731:
	.word	-1,.L118,.L732-.L118,.L321-.L118
	.half	1
	.byte	95
	.word	.L733-.L118,.L21-.L118
	.half	1
	.byte	95
	.word	0,0
.L735:
	.word	-1,.L118,.L736-.L118,.L734-.L118
	.half	1
	.byte	95
	.word	.L112-.L118,.L665-.L118
	.half	1
	.byte	95
	.word	0,0
.L737:
	.word	-1,.L118,.L665-.L118,.L381-.L118
	.half	1
	.byte	95
	.word	.L739-.L118,.L24-.L118
	.half	1
	.byte	95
	.word	0,0
.L740:
	.word	-1,.L118,.L670-.L118,.L356-.L118
	.half	5
	.byte	144,32,157,32,0
	.word	.L738-.L118,.L27-.L118
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L548:
	.word	-1,.L118,.L741-.L118,.L675-.L118
	.half	1
	.byte	95
	.word	0,0
.L742:
	.word	-1,.L118,.L677-.L118,.L678-.L118
	.half	1
	.byte	95
	.word	0,0
.L743:
	.word	-1,.L118,.L680-.L118,.L681-.L118
	.half	1
	.byte	95
	.word	0,0
.L744:
	.word	-1,.L118,.L683-.L118,.L684-.L118
	.half	1
	.byte	95
	.word	0,0
.L745:
	.word	-1,.L118,.L686-.L118,.L687-.L118
	.half	1
	.byte	95
	.word	0,0
.L746:
	.word	-1,.L118,.L687-.L118,.L690-.L118
	.half	1
	.byte	95
	.word	0,0
.L747:
	.word	-1,.L118,.L692-.L118,.L693-.L118
	.half	1
	.byte	95
	.word	0,0
.L748:
	.word	-1,.L118,.L695-.L118,.L696-.L118
	.half	1
	.byte	95
	.word	0,0
.L749:
	.word	-1,.L118,.L696-.L118,.L699-.L118
	.half	1
	.byte	95
	.word	0,0
.L750:
	.word	-1,.L118,.L701-.L118,.L702-.L118
	.half	1
	.byte	95
	.word	0,0
.L751:
	.word	-1,.L118,.L704-.L118,.L705-.L118
	.half	1
	.byte	95
	.word	0,0
.L752:
	.word	-1,.L118,.L707-.L118,.L708-.L118
	.half	1
	.byte	95
	.word	0,0
.L753:
	.word	-1,.L118,.L708-.L118,.L711-.L118
	.half	1
	.byte	95
	.word	0,0
.L754:
	.word	-1,.L118,.L713-.L118,.L714-.L118
	.half	1
	.byte	95
	.word	0,0
.L755:
	.word	-1,.L118,.L714-.L118,.L717-.L118
	.half	1
	.byte	95
	.word	0,0
.L756:
	.word	-1,.L118,.L717-.L118,.L720-.L118
	.half	1
	.byte	95
	.word	0,0
.L757:
	.word	-1,.L118,.L722-.L118,.L723-.L118
	.half	1
	.byte	95
	.word	0,0
.L758:
	.word	-1,.L118,.L723-.L118,.L726-.L118
	.half	1
	.byte	95
	.word	0,0
.L759:
	.word	-1,.L118,.L728-.L118,.L730-.L118
	.half	1
	.byte	95
	.word	.L112-.L118,.L665-.L118
	.half	1
	.byte	95
	.word	0,0
.L760:
	.word	-1,.L118,.L665-.L118,.L381-.L118
	.half	1
	.byte	95
	.word	.L730-.L118,.L306-.L118
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lRead')
	.sect	'.debug_loc'
.L553:
	.word	-1,.L124,.L776-.L124,.L549-.L124
	.half	1
	.byte	98
	.word	0,0
.L551:
	.word	-1,.L124,.L126-.L124,.L773-.L124
	.half	1
	.byte	84
	.word	.L102-.L124,.L396-.L124
	.half	1
	.byte	84
	.word	.L774-.L124,.L376-.L124
	.half	1
	.byte	84
	.word	.L775-.L124,.L549-.L124
	.half	1
	.byte	84
	.word	0,0
.L550:
	.word	-1,.L124,.L126-.L124,.L773-.L124
	.half	1
	.byte	100
	.word	.L102-.L124,.L396-.L124
	.half	1
	.byte	100
	.word	.L774-.L124,.L376-.L124
	.half	1
	.byte	100
	.word	.L775-.L124,.L549-.L124
	.half	1
	.byte	100
	.word	0,0
.L554:
	.word	-1,.L124,.L777-.L124,.L778-.L124
	.half	5
	.byte	144,32,157,32,0
	.word	.L560-.L124,.L782-.L124
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L555:
	.word	-1,.L124,.L563-.L124,.L783-.L124
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L556:
	.word	-1,.L124,.L779-.L124,.L780-.L124
	.half	1
	.byte	95
	.word	.L39-.L124,.L41-.L124
	.half	1
	.byte	95
	.word	0,0
.L123:
	.word	-1,.L124,0,.L549-.L124
	.half	2
	.byte	138,0
	.word	0,0
.L559:
	.word	-1,.L124,.L558-.L124,.L781-.L124
	.half	1
	.byte	95
	.word	0,0
.L562:
	.word	-1,.L124,.L561-.L124,.L39-.L124
	.half	1
	.byte	95
	.word	0,0
.L564:
	.word	0,0
.L565:
	.word	-1,.L124,.L44-.L124,.L43-.L124
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lWrite')
	.sect	'.debug_loc'
.L569:
	.word	-1,.L142,.L809-.L142,.L566-.L142
	.half	1
	.byte	101
	.word	0,0
.L568:
	.word	-1,.L142,.L126-.L142,.L773-.L142
	.half	1
	.byte	84
	.word	.L102-.L142,.L396-.L142
	.half	1
	.byte	84
	.word	.L774-.L142,.L376-.L142
	.half	1
	.byte	84
	.word	.L808-.L142,.L566-.L142
	.half	1
	.byte	84
	.word	0,0
.L567:
	.word	-1,.L142,.L126-.L142,.L773-.L142
	.half	1
	.byte	100
	.word	.L102-.L142,.L396-.L142
	.half	1
	.byte	100
	.word	.L774-.L142,.L376-.L142
	.half	1
	.byte	100
	.word	.L808-.L142,.L566-.L142
	.half	1
	.byte	100
	.word	0,0
.L571:
	.word	-1,.L142,.L810-.L142,.L811-.L142
	.half	1
	.byte	95
	.word	.L56-.L142,.L812-.L142
	.half	1
	.byte	95
	.word	0,0
.L141:
	.word	-1,.L142,0,.L566-.L142
	.half	2
	.byte	138,0
	.word	0,0
.L570:
	.word	-1,.L142,.L813-.L142,.L814-.L142
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L574:
	.word	-1,.L142,.L573-.L142,.L56-.L142
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1355:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Uart_Init')
	.sect	'.debug_frame'
	.word	36
	.word	.L1355,.L100,.L405-.L100
	.byte	4
	.word	(.L640-.L100)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L405-.L640)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Uart_lHwInit')
	.sect	'.debug_frame'
	.word	24
	.word	.L1355,.L106,.L533-.L106
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Uart_lHwInitRuntime')
	.sect	'.debug_frame'
	.word	24
	.word	.L1355,.L118,.L542-.L118
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Uart_Read')
	.sect	'.debug_frame'
	.word	12
	.word	.L1355,.L120,.L431-.L120
	.sdecl	'.debug_frame',debug,cluster('Uart_lRead')
	.sect	'.debug_frame'
	.word	20
	.word	.L1355,.L124,.L549-.L124
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Uart_lEnableReadInterrupts')
	.sect	'.debug_frame'
	.word	24
	.word	.L1355,.L130,.L575-.L130
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Uart_lClearReadInterrupts')
	.sect	'.debug_frame'
	.word	24
	.word	.L1355,.L134,.L592-.L134
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Uart_Write')
	.sect	'.debug_frame'
	.word	12
	.word	.L1355,.L136,.L457-.L136
	.sdecl	'.debug_frame',debug,cluster('Uart_lWrite')
	.sect	'.debug_frame'
	.word	20
	.word	.L1355,.L142,.L566-.L142
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Uart_lEnableWriteInterrupts')
	.sect	'.debug_frame'
	.word	24
	.word	.L1355,.L144,.L586-.L144
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Uart_lClearWriteInterrupts')
	.sect	'.debug_frame'
	.word	24
	.word	.L1355,.L146,.L589-.L146
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Uart_AbortRead')
	.sect	'.debug_frame'
	.word	12
	.word	.L1355,.L148,.L482-.L148
	.sdecl	'.debug_frame',debug,cluster('Uart_AbortWrite')
	.sect	'.debug_frame'
	.word	12
	.word	.L1355,.L150,.L493-.L150
	.sdecl	'.debug_frame',debug,cluster('Uart_GetStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L1355,.L156,.L511-.L156
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Uart_IsrReceive')
	.sect	'.debug_frame'
	.word	12
	.word	.L1355,.L158,.L514-.L158
	.sdecl	'.debug_frame',debug,cluster('Uart_IsrTransmit')
	.sect	'.debug_frame'
	.word	12
	.word	.L1355,.L162,.L520-.L162
	.sdecl	'.debug_frame',debug,cluster('Uart_IsrError')
	.sect	'.debug_frame'
	.word	12
	.word	.L1355,.L164,.L525-.L164
	.sdecl	'.debug_frame',debug,cluster('Uart_lHwDisableAscLinErrIntr')
	.sect	'.debug_frame'
	.word	24
	.word	.L1355,.L168,.L629-.L168
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Uart_lHwDisableAscLinRxIntr')
	.sect	'.debug_frame'
	.word	24
	.word	.L1355,.L172,.L623-.L172
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Uart_lHwDisableAscLinTxIntr')
	.sect	'.debug_frame'
	.word	24
	.word	.L1355,.L174,.L617-.L174
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Uart_lHwEnableAscLinErrIntr')
	.sect	'.debug_frame'
	.word	24
	.word	.L1355,.L176,.L609-.L176
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Uart_lHwEnableAscLinRxIntr')
	.sect	'.debug_frame'
	.word	24
	.word	.L1355,.L180,.L602-.L180
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Uart_lHwEnableAscLinTxIntr')
	.sect	'.debug_frame'
	.word	24
	.word	.L1355,.L182,.L595-.L182
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1356:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_25')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L102,.L396-.L102
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_14')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L104,.L341-.L104
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_17')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L108,.L356-.L108
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_11')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L110,.L326-.L110
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_22')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L112,.L381-.L112
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_10')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L114,.L321-.L114
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_7')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L116,.L306-.L116
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_23')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L122,.L386-.L122
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_12')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L126,.L331-.L126
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_21')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L128,.L376-.L128
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_15')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L132,.L346-.L132
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_18')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L138,.L361-.L138
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_24')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L140,.L391-.L140
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_20')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L152,.L371-.L152
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_19')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L154,.L366-.L154
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_13')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L160,.L336-.L160
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_16')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L166,.L351-.L166
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_9')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L170,.L316-.L170
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_8')
	.sect	'.debug_frame'
	.word	24
	.word	.L1356,.L178,.L311-.L178
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3073  /*----------------------------------------------------------------------------*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3074  /* Memory Map of the UART Code */
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3075  #define UART_STOP_SEC_CODE
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3076  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3077   allowed only for MemMap.h*/
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3078  #include "MemMap.h"
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3079  /*******************************************************************************
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3080  **                               End of File                                  **
; ..\Aurix_MC-ISAR\uart_infineon_tricore\ssc\src\Uart.c	  3081  *******************************************************************************/

	; Module end
